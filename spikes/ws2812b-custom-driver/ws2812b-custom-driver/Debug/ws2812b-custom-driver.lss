
ws2812b-custom-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000956  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e9  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042a  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dd  00000000  00000000  00001c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <util/delay.h>

int main(void)
{
	ledsetup();
  80:	0e 94 90 00 	call	0x120	; 0x120 <ledsetup>
	
	uint8_t r = 0x00, g = 0x00, b = 0x00;
  84:	10 e0       	ldi	r17, 0x00	; 0
  86:	00 e0       	ldi	r16, 0x00	; 0
  88:	d0 e0       	ldi	r29, 0x00	; 0
  8a:	c9 e1       	ldi	r28, 0x19	; 25
    {
		
		for(uint8_t i = 0; i < 25; i++)
		{

			sendPixel(r, g, b);			
  8c:	41 2f       	mov	r20, r17
  8e:	60 2f       	mov	r22, r16
  90:	8d 2f       	mov	r24, r29
  92:	0e 94 92 00 	call	0x124	; 0x124 <sendPixel>
  96:	c1 50       	subi	r28, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		
		for(uint8_t i = 0; i < 25; i++)
  98:	c9 f7       	brne	.-14     	; 0x8c <main+0xc>
			
		}
	

	
		show();
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <show>
		
		if(b == 0 && r != 0xFF)
  9e:	11 11       	cpse	r17, r1
  a0:	04 c0       	rjmp	.+8      	; 0xaa <main+0x2a>
  a2:	df 3f       	cpi	r29, 0xFF	; 255
  a4:	31 f0       	breq	.+12     	; 0xb2 <main+0x32>
			r++;
  a6:	df 5f       	subi	r29, 0xFF	; 255
  a8:	19 c0       	rjmp	.+50     	; 0xdc <main+0x5c>
		else if(r == 0xFF && b != 0xFF)
  aa:	df 3f       	cpi	r29, 0xFF	; 255
  ac:	29 f4       	brne	.+10     	; 0xb8 <main+0x38>
  ae:	1f 3f       	cpi	r17, 0xFF	; 255
  b0:	39 f0       	breq	.+14     	; 0xc0 <main+0x40>
			b++;
  b2:	1f 5f       	subi	r17, 0xFF	; 255
  b4:	df ef       	ldi	r29, 0xFF	; 255
  b6:	12 c0       	rjmp	.+36     	; 0xdc <main+0x5c>
		else if(b == 0xFF && r != 0x00)
  b8:	1f 3f       	cpi	r17, 0xFF	; 255
  ba:	29 f4       	brne	.+10     	; 0xc6 <main+0x46>
  bc:	dd 23       	and	r29, r29
  be:	29 f0       	breq	.+10     	; 0xca <main+0x4a>
			r--;
  c0:	d1 50       	subi	r29, 0x01	; 1
  c2:	1f ef       	ldi	r17, 0xFF	; 255
  c4:	0b c0       	rjmp	.+22     	; 0xdc <main+0x5c>
		else if(r == 0x00 && g != 0xFF)
  c6:	d1 11       	cpse	r29, r1
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <main+0x54>
  ca:	0f 3f       	cpi	r16, 0xFF	; 255
  cc:	29 f0       	breq	.+10     	; 0xd8 <main+0x58>
			g++;
  ce:	0f 5f       	subi	r16, 0xFF	; 255
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	04 c0       	rjmp	.+8      	; 0xdc <main+0x5c>
		else if(g == 0xFF && b != 0x00)
  d4:	0f 3f       	cpi	r16, 0xFF	; 255
  d6:	11 f4       	brne	.+4      	; 0xdc <main+0x5c>
			b--;
  d8:	11 50       	subi	r17, 0x01	; 1
  da:	0f ef       	ldi	r16, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	9c e7       	ldi	r25, 0x7C	; 124
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
  e8:	d0 cf       	rjmp	.-96     	; 0x8a <main+0xa>

000000ea <sendByte>:
	// This has thenice side effect of avoid glitches on very long strings becuase

	
}
 
void sendByte( unsigned char byte ) {
  ea:	98 e0       	ldi	r25, 0x08	; 8
// not reorder things and make it so the delay happens in the wrong place.
 

inline void sendBit( bool bitVal ) {
	
	if (  bitVal ) {				// 0 bit
  ec:	88 23       	and	r24, r24
  ee:	64 f4       	brge	.+24     	; 0x108 <sendByte+0x1e>
		
		asm volatile (
  f0:	5f 9a       	sbi	0x0b, 7	; 11
	...
  fe:	00 00       	nop
 100:	5f 98       	cbi	0x0b, 7	; 11
 102:	00 00       	nop
 104:	00 00       	nop
 106:	08 c0       	rjmp	.+16     	; 0x118 <sendByte+0x2e>
		// **************************************************************************
		// This line is really the only tight goldilocks timing in the whole program!
		// **************************************************************************


		asm volatile (
 108:	5f 9a       	sbi	0x0b, 7	; 11
 10a:	00 00       	nop
 10c:	5f 98       	cbi	0x0b, 7	; 11
	...
 116:	00 00       	nop
 
    for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
 
      sendBit( bitRead( byte , 7 ) ); // Neopixel wants bit in highest-to-lowest order
                                                     // so send highest bit (bit #7 in an 8-bit byte since they start at 0)
      byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
 118:	88 0f       	add	r24, r24
 11a:	91 50       	subi	r25, 0x01	; 1
	
}
 
void sendByte( unsigned char byte ) {
 
    for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
 11c:	39 f7       	brne	.-50     	; 0xec <sendByte+0x2>
      sendBit( bitRead( byte , 7 ) ); // Neopixel wants bit in highest-to-lowest order
                                                     // so send highest bit (bit #7 in an 8-bit byte since they start at 0)
      byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
 
    }
}
 11e:	08 95       	ret

00000120 <ledsetup>:
 
// Set the specified pin up as digital out
 
void ledsetup() {
 
  bitSet( PIXEL_DDR , PIXEL_BIT );
 120:	57 9a       	sbi	0x0a, 7	; 10
 122:	08 95       	ret

00000124 <sendPixel>:
 
}
 
void sendPixel( unsigned char r, unsigned char g , unsigned char b ) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	d8 2f       	mov	r29, r24
 12a:	86 2f       	mov	r24, r22
 12c:	c4 2f       	mov	r28, r20
 
  sendByte(g); // Neopixel wants colors in green-then-red-then-blue order
 12e:	0e 94 75 00 	call	0xea	; 0xea <sendByte>
  sendByte(r);
 132:	8d 2f       	mov	r24, r29
 134:	0e 94 75 00 	call	0xea	; 0xea <sendByte>
  sendByte(b);
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 75 00 	call	0xea	; 0xea <sendByte>
 
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <show>:
 
// Just wait long enough without sending any bots to cause the pixels to latch and display the last sent frame
 
void show() {
    DELAY_CYCLES( NS_TO_CYCLES(RES) );
 144:	82 e1       	ldi	r24, 0x12	; 18
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <show+0x2>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <show+0x8>
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
