
CM1060-Lighting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  000066fa  0000678e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800314  00800314  000069a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000069a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a8  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009de2  00000000  00000000  000072e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b59  00000000  00000000  000110ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fd3  00000000  00000000  00012c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024b4  00000000  00000000  00016bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003aec  00000000  00000000  000190ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004fd3  00000000  00000000  0001cb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  00021b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__vector_7>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__vector_11>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_14>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	13 e0       	ldi	r17, 0x03	; 3
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ea ef       	ldi	r30, 0xFA	; 250
      9a:	f6 e6       	ldi	r31, 0x66	; 102
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a4 31       	cpi	r26, 0x14	; 20
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	25 e0       	ldi	r18, 0x05	; 5
      aa:	a4 e1       	ldi	r26, 0x14	; 20
      ac:	b3 e0       	ldi	r27, 0x03	; 3
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	af 33       	cpi	r26, 0x3F	; 63
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 25 13 	call	0x264a	; 0x264a <main>
      bc:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <ElementAnimationEngine_get_current_frame>:
		buffer->current_animation_size--;
	}
	
	return Animation_Engine_Success;	

}
      c4:	2f 92       	push	r2
      c6:	3f 92       	push	r3
      c8:	4f 92       	push	r4
      ca:	5f 92       	push	r5
      cc:	6f 92       	push	r6
      ce:	7f 92       	push	r7
      d0:	8f 92       	push	r8
      d2:	9f 92       	push	r9
      d4:	af 92       	push	r10
      d6:	bf 92       	push	r11
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	e0 97       	sbiw	r28, 0x30	; 48
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	98 ab       	std	Y+48, r25	; 0x30
      fa:	8f a7       	std	Y+47, r24	; 0x2f
      fc:	8f a5       	ldd	r24, Y+47	; 0x2f
      fe:	98 a9       	ldd	r25, Y+48	; 0x30
     100:	9e 83       	std	Y+6, r25	; 0x06
     102:	8d 83       	std	Y+5, r24	; 0x05
     104:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
     108:	98 87       	std	Y+8, r25	; 0x08
     10a:	8f 83       	std	Y+7, r24	; 0x07
     10c:	89 2f       	mov	r24, r25
     10e:	88 0f       	add	r24, r24
     110:	88 0b       	sbc	r24, r24
     112:	89 87       	std	Y+9, r24	; 0x09
     114:	8a 87       	std	Y+10, r24	; 0x0a
     116:	8b 87       	std	Y+11, r24	; 0x0b
     118:	8c 87       	std	Y+12, r24	; 0x0c
     11a:	8d 87       	std	Y+13, r24	; 0x0d
     11c:	8e 87       	std	Y+14, r24	; 0x0e
     11e:	8d 81       	ldd	r24, Y+5	; 0x05
     120:	9e 81       	ldd	r25, Y+6	; 0x06
     122:	fc 01       	movw	r30, r24
     124:	24 89       	ldd	r18, Z+20	; 0x14
     126:	2f 87       	std	Y+15, r18	; 0x0f
     128:	fc 01       	movw	r30, r24
     12a:	25 89       	ldd	r18, Z+21	; 0x15
     12c:	28 8b       	std	Y+16, r18	; 0x10
     12e:	fc 01       	movw	r30, r24
     130:	26 89       	ldd	r18, Z+22	; 0x16
     132:	29 8b       	std	Y+17, r18	; 0x11
     134:	fc 01       	movw	r30, r24
     136:	27 89       	ldd	r18, Z+23	; 0x17
     138:	2a 8b       	std	Y+18, r18	; 0x12
     13a:	fc 01       	movw	r30, r24
     13c:	20 8d       	ldd	r18, Z+24	; 0x18
     13e:	2b 8b       	std	Y+19, r18	; 0x13
     140:	fc 01       	movw	r30, r24
     142:	21 8d       	ldd	r18, Z+25	; 0x19
     144:	2c 8b       	std	Y+20, r18	; 0x14
     146:	fc 01       	movw	r30, r24
     148:	22 8d       	ldd	r18, Z+26	; 0x1a
     14a:	2d 8b       	std	Y+21, r18	; 0x15
     14c:	fc 01       	movw	r30, r24
     14e:	83 8d       	ldd	r24, Z+27	; 0x1b
     150:	8e 8b       	std	Y+22, r24	; 0x16
     152:	2f 81       	ldd	r18, Y+7	; 0x07
     154:	38 85       	ldd	r19, Y+8	; 0x08
     156:	49 85       	ldd	r20, Y+9	; 0x09
     158:	5a 85       	ldd	r21, Y+10	; 0x0a
     15a:	6b 85       	ldd	r22, Y+11	; 0x0b
     15c:	7c 85       	ldd	r23, Y+12	; 0x0c
     15e:	8d 85       	ldd	r24, Y+13	; 0x0d
     160:	9e 85       	ldd	r25, Y+14	; 0x0e
     162:	af 84       	ldd	r10, Y+15	; 0x0f
     164:	b8 88       	ldd	r11, Y+16	; 0x10
     166:	c9 88       	ldd	r12, Y+17	; 0x11
     168:	da 88       	ldd	r13, Y+18	; 0x12
     16a:	eb 88       	ldd	r14, Y+19	; 0x13
     16c:	fc 88       	ldd	r15, Y+20	; 0x14
     16e:	0d 89       	ldd	r16, Y+21	; 0x15
     170:	1e 89       	ldd	r17, Y+22	; 0x16
     172:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
     176:	a2 2e       	mov	r10, r18
     178:	b3 2e       	mov	r11, r19
     17a:	c4 2e       	mov	r12, r20
     17c:	d5 2e       	mov	r13, r21
     17e:	e6 2e       	mov	r14, r22
     180:	f7 2e       	mov	r15, r23
     182:	08 2f       	mov	r16, r24
     184:	19 2f       	mov	r17, r25
     186:	af 8a       	std	Y+23, r10	; 0x17
     188:	b8 8e       	std	Y+24, r11	; 0x18
     18a:	c9 8e       	std	Y+25, r12	; 0x19
     18c:	da 8e       	std	Y+26, r13	; 0x1a
     18e:	eb 8e       	std	Y+27, r14	; 0x1b
     190:	fc 8e       	std	Y+28, r15	; 0x1c
     192:	0d 8f       	std	Y+29, r16	; 0x1d
     194:	1e 8f       	std	Y+30, r17	; 0x1e
     196:	19 82       	std	Y+1, r1	; 0x01
     198:	1a 82       	std	Y+2, r1	; 0x02
     19a:	1b 82       	std	Y+3, r1	; 0x03
     19c:	1c 82       	std	Y+4, r1	; 0x04
     19e:	8d 81       	ldd	r24, Y+5	; 0x05
     1a0:	9e 81       	ldd	r25, Y+6	; 0x06
     1a2:	fc 01       	movw	r30, r24
     1a4:	83 89       	ldd	r24, Z+19	; 0x13
     1a6:	88 23       	and	r24, r24
     1a8:	09 f4       	brne	.+2      	; 0x1ac <ElementAnimationEngine_get_current_frame+0xe8>
     1aa:	02 c1       	rjmp	.+516    	; 0x3b0 <ElementAnimationEngine_get_current_frame+0x2ec>
     1ac:	8d 81       	ldd	r24, Y+5	; 0x05
     1ae:	9e 81       	ldd	r25, Y+6	; 0x06
     1b0:	fc 01       	movw	r30, r24
     1b2:	84 81       	ldd	r24, Z+4	; 0x04
     1b4:	95 81       	ldd	r25, Z+5	; 0x05
     1b6:	cc 01       	movw	r24, r24
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	bc 01       	movw	r22, r24
     1be:	cd 01       	movw	r24, r26
     1c0:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
     1c4:	6b 01       	movw	r12, r22
     1c6:	7c 01       	movw	r14, r24
     1c8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ca:	9e 81       	ldd	r25, Y+6	; 0x06
     1cc:	fc 01       	movw	r30, r24
     1ce:	81 81       	ldd	r24, Z+1	; 0x01
     1d0:	88 2f       	mov	r24, r24
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	bc 01       	movw	r22, r24
     1da:	cd 01       	movw	r24, r26
     1dc:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
     1e0:	dc 01       	movw	r26, r24
     1e2:	cb 01       	movw	r24, r22
     1e4:	9c 01       	movw	r18, r24
     1e6:	ad 01       	movw	r20, r26
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	4a e7       	ldi	r20, 0x7A	; 122
     1fa:	54 e4       	ldi	r21, 0x44	; 68
     1fc:	bc 01       	movw	r22, r24
     1fe:	cd 01       	movw	r24, r26
     200:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
     204:	dc 01       	movw	r26, r24
     206:	cb 01       	movw	r24, r22
     208:	bc 01       	movw	r22, r24
     20a:	cd 01       	movw	r24, r26
     20c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__fixsfdi>
     210:	a2 2e       	mov	r10, r18
     212:	b3 2e       	mov	r11, r19
     214:	c4 2e       	mov	r12, r20
     216:	d5 2e       	mov	r13, r21
     218:	e6 2e       	mov	r14, r22
     21a:	f7 2e       	mov	r15, r23
     21c:	08 2f       	mov	r16, r24
     21e:	19 2f       	mov	r17, r25
     220:	af 8e       	std	Y+31, r10	; 0x1f
     222:	b8 a2       	std	Y+32, r11	; 0x20
     224:	c9 a2       	std	Y+33, r12	; 0x21
     226:	da a2       	std	Y+34, r13	; 0x22
     228:	eb a2       	std	Y+35, r14	; 0x23
     22a:	fc a2       	std	Y+36, r15	; 0x24
     22c:	0d a3       	std	Y+37, r16	; 0x25
     22e:	1e a3       	std	Y+38, r17	; 0x26
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	9e 81       	ldd	r25, Y+6	; 0x06
     234:	fc 01       	movw	r30, r24
     236:	81 81       	ldd	r24, Z+1	; 0x01
     238:	28 2f       	mov	r18, r24
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	88 ee       	ldi	r24, 0xE8	; 232
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	b9 01       	movw	r22, r18
     242:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <__divmodhi4>
     246:	cb 01       	movw	r24, r22
     248:	98 a7       	std	Y+40, r25	; 0x28
     24a:	8f a3       	std	Y+39, r24	; 0x27
     24c:	89 2f       	mov	r24, r25
     24e:	88 0f       	add	r24, r24
     250:	88 0b       	sbc	r24, r24
     252:	89 a7       	std	Y+41, r24	; 0x29
     254:	8a a7       	std	Y+42, r24	; 0x2a
     256:	8b a7       	std	Y+43, r24	; 0x2b
     258:	8c a7       	std	Y+44, r24	; 0x2c
     25a:	8d a7       	std	Y+45, r24	; 0x2d
     25c:	8e a7       	std	Y+46, r24	; 0x2e
     25e:	8d 81       	ldd	r24, Y+5	; 0x05
     260:	9e 81       	ldd	r25, Y+6	; 0x06
     262:	fc 01       	movw	r30, r24
     264:	96 a1       	ldd	r25, Z+38	; 0x26
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	89 27       	eor	r24, r25
     26a:	88 23       	and	r24, r24
     26c:	21 f1       	breq	.+72     	; 0x2b6 <ElementAnimationEngine_get_current_frame+0x1f2>
     26e:	af 8c       	ldd	r10, Y+31	; 0x1f
     270:	b8 a0       	ldd	r11, Y+32	; 0x20
     272:	c9 a0       	ldd	r12, Y+33	; 0x21
     274:	da a0       	ldd	r13, Y+34	; 0x22
     276:	eb a0       	ldd	r14, Y+35	; 0x23
     278:	fc a0       	ldd	r15, Y+36	; 0x24
     27a:	0d a1       	ldd	r16, Y+37	; 0x25
     27c:	1e a1       	ldd	r17, Y+38	; 0x26
     27e:	2f 88       	ldd	r2, Y+23	; 0x17
     280:	38 8c       	ldd	r3, Y+24	; 0x18
     282:	49 8c       	ldd	r4, Y+25	; 0x19
     284:	5a 8c       	ldd	r5, Y+26	; 0x1a
     286:	6b 8c       	ldd	r6, Y+27	; 0x1b
     288:	7c 8c       	ldd	r7, Y+28	; 0x1c
     28a:	8d 8c       	ldd	r8, Y+29	; 0x1d
     28c:	9e 8c       	ldd	r9, Y+30	; 0x1e
     28e:	2a 2d       	mov	r18, r10
     290:	3b 2d       	mov	r19, r11
     292:	4c 2d       	mov	r20, r12
     294:	5d 2d       	mov	r21, r13
     296:	6e 2d       	mov	r22, r14
     298:	7f 2d       	mov	r23, r15
     29a:	80 2f       	mov	r24, r16
     29c:	91 2f       	mov	r25, r17
     29e:	a2 2c       	mov	r10, r2
     2a0:	b3 2c       	mov	r11, r3
     2a2:	c4 2c       	mov	r12, r4
     2a4:	d5 2c       	mov	r13, r5
     2a6:	e6 2c       	mov	r14, r6
     2a8:	f7 2c       	mov	r15, r7
     2aa:	08 2d       	mov	r16, r8
     2ac:	19 2d       	mov	r17, r9
     2ae:	0e 94 aa 30 	call	0x6154	; 0x6154 <__cmpdi2>
     2b2:	0c f4       	brge	.+2      	; 0x2b6 <ElementAnimationEngine_get_current_frame+0x1f2>
     2b4:	89 c0       	rjmp	.+274    	; 0x3c8 <ElementAnimationEngine_get_current_frame+0x304>
     2b6:	2f 88       	ldd	r2, Y+23	; 0x17
     2b8:	38 8c       	ldd	r3, Y+24	; 0x18
     2ba:	49 8c       	ldd	r4, Y+25	; 0x19
     2bc:	5a 8c       	ldd	r5, Y+26	; 0x1a
     2be:	6b 8c       	ldd	r6, Y+27	; 0x1b
     2c0:	7c 8c       	ldd	r7, Y+28	; 0x1c
     2c2:	8d 8c       	ldd	r8, Y+29	; 0x1d
     2c4:	9e 8c       	ldd	r9, Y+30	; 0x1e
     2c6:	af 8c       	ldd	r10, Y+31	; 0x1f
     2c8:	b8 a0       	ldd	r11, Y+32	; 0x20
     2ca:	c9 a0       	ldd	r12, Y+33	; 0x21
     2cc:	da a0       	ldd	r13, Y+34	; 0x22
     2ce:	eb a0       	ldd	r14, Y+35	; 0x23
     2d0:	fc a0       	ldd	r15, Y+36	; 0x24
     2d2:	0d a1       	ldd	r16, Y+37	; 0x25
     2d4:	1e a1       	ldd	r17, Y+38	; 0x26
     2d6:	22 2d       	mov	r18, r2
     2d8:	33 2d       	mov	r19, r3
     2da:	44 2d       	mov	r20, r4
     2dc:	55 2d       	mov	r21, r5
     2de:	66 2d       	mov	r22, r6
     2e0:	77 2d       	mov	r23, r7
     2e2:	88 2d       	mov	r24, r8
     2e4:	99 2d       	mov	r25, r9
     2e6:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <__moddi3>
     2ea:	22 2e       	mov	r2, r18
     2ec:	33 2e       	mov	r3, r19
     2ee:	44 2e       	mov	r4, r20
     2f0:	55 2e       	mov	r5, r21
     2f2:	66 2e       	mov	r6, r22
     2f4:	77 2e       	mov	r7, r23
     2f6:	88 2e       	mov	r8, r24
     2f8:	99 2e       	mov	r9, r25
     2fa:	a2 2c       	mov	r10, r2
     2fc:	b3 2c       	mov	r11, r3
     2fe:	c4 2c       	mov	r12, r4
     300:	d5 2c       	mov	r13, r5
     302:	e6 2c       	mov	r14, r6
     304:	f7 2c       	mov	r15, r7
     306:	08 2d       	mov	r16, r8
     308:	19 2d       	mov	r17, r9
     30a:	8d 81       	ldd	r24, Y+5	; 0x05
     30c:	9e 81       	ldd	r25, Y+6	; 0x06
     30e:	fc 01       	movw	r30, r24
     310:	24 8c       	ldd	r2, Z+28	; 0x1c
     312:	fc 01       	movw	r30, r24
     314:	35 8c       	ldd	r3, Z+29	; 0x1d
     316:	fc 01       	movw	r30, r24
     318:	46 8c       	ldd	r4, Z+30	; 0x1e
     31a:	fc 01       	movw	r30, r24
     31c:	57 8c       	ldd	r5, Z+31	; 0x1f
     31e:	fc 01       	movw	r30, r24
     320:	60 a0       	ldd	r6, Z+32	; 0x20
     322:	fc 01       	movw	r30, r24
     324:	71 a0       	ldd	r7, Z+33	; 0x21
     326:	fc 01       	movw	r30, r24
     328:	82 a0       	ldd	r8, Z+34	; 0x22
     32a:	fc 01       	movw	r30, r24
     32c:	93 a0       	ldd	r9, Z+35	; 0x23
     32e:	2a 2d       	mov	r18, r10
     330:	3b 2d       	mov	r19, r11
     332:	4c 2d       	mov	r20, r12
     334:	5d 2d       	mov	r21, r13
     336:	6e 2d       	mov	r22, r14
     338:	7f 2d       	mov	r23, r15
     33a:	80 2f       	mov	r24, r16
     33c:	91 2f       	mov	r25, r17
     33e:	a2 2c       	mov	r10, r2
     340:	b3 2c       	mov	r11, r3
     342:	c4 2c       	mov	r12, r4
     344:	d5 2c       	mov	r13, r5
     346:	e6 2c       	mov	r14, r6
     348:	f7 2c       	mov	r15, r7
     34a:	08 2d       	mov	r16, r8
     34c:	19 2d       	mov	r17, r9
     34e:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
     352:	22 2e       	mov	r2, r18
     354:	33 2e       	mov	r3, r19
     356:	44 2e       	mov	r4, r20
     358:	55 2e       	mov	r5, r21
     35a:	66 2e       	mov	r6, r22
     35c:	77 2e       	mov	r7, r23
     35e:	88 2e       	mov	r8, r24
     360:	99 2e       	mov	r9, r25
     362:	af a0       	ldd	r10, Y+39	; 0x27
     364:	b8 a4       	ldd	r11, Y+40	; 0x28
     366:	c9 a4       	ldd	r12, Y+41	; 0x29
     368:	da a4       	ldd	r13, Y+42	; 0x2a
     36a:	eb a4       	ldd	r14, Y+43	; 0x2b
     36c:	fc a4       	ldd	r15, Y+44	; 0x2c
     36e:	0d a5       	ldd	r16, Y+45	; 0x2d
     370:	1e a5       	ldd	r17, Y+46	; 0x2e
     372:	22 2d       	mov	r18, r2
     374:	33 2d       	mov	r19, r3
     376:	44 2d       	mov	r20, r4
     378:	55 2d       	mov	r21, r5
     37a:	66 2d       	mov	r22, r6
     37c:	77 2d       	mov	r23, r7
     37e:	88 2d       	mov	r24, r8
     380:	99 2d       	mov	r25, r9
     382:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__divdi3>
     386:	a2 2e       	mov	r10, r18
     388:	b3 2e       	mov	r11, r19
     38a:	c4 2e       	mov	r12, r20
     38c:	d5 2e       	mov	r13, r21
     38e:	e6 2e       	mov	r14, r22
     390:	f7 2e       	mov	r15, r23
     392:	08 2f       	mov	r16, r24
     394:	19 2f       	mov	r17, r25
     396:	2a 2d       	mov	r18, r10
     398:	3b 2d       	mov	r19, r11
     39a:	4c 2d       	mov	r20, r12
     39c:	5d 2d       	mov	r21, r13
     39e:	6e 2d       	mov	r22, r14
     3a0:	7f 2d       	mov	r23, r15
     3a2:	80 2f       	mov	r24, r16
     3a4:	91 2f       	mov	r25, r17
     3a6:	29 83       	std	Y+1, r18	; 0x01
     3a8:	3a 83       	std	Y+2, r19	; 0x02
     3aa:	4b 83       	std	Y+3, r20	; 0x03
     3ac:	5c 83       	std	Y+4, r21	; 0x04
     3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <ElementAnimationEngine_get_current_frame+0x304>
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	fc 01       	movw	r30, r24
     3b6:	84 a1       	ldd	r24, Z+36	; 0x24
     3b8:	95 a1       	ldd	r25, Z+37	; 0x25
     3ba:	cc 01       	movw	r24, r24
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	ab 83       	std	Y+3, r26	; 0x03
     3c6:	bc 83       	std	Y+4, r27	; 0x04
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
     3cc:	ab 81       	ldd	r26, Y+3	; 0x03
     3ce:	bc 81       	ldd	r27, Y+4	; 0x04
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	e0 96       	adiw	r28, 0x30	; 48
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	bf 90       	pop	r11
     3f2:	af 90       	pop	r10
     3f4:	9f 90       	pop	r9
     3f6:	8f 90       	pop	r8
     3f8:	7f 90       	pop	r7
     3fa:	6f 90       	pop	r6
     3fc:	5f 90       	pop	r5
     3fe:	4f 90       	pop	r4
     400:	3f 90       	pop	r3
     402:	2f 90       	pop	r2
     404:	08 95       	ret

00000406 <isolate_bits>:
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	27 97       	sbiw	r28, 0x07	; 7
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	8b 83       	std	Y+3, r24	; 0x03
     41c:	6c 83       	std	Y+4, r22	; 0x04
     41e:	4d 83       	std	Y+5, r20	; 0x05
     420:	3f 83       	std	Y+7, r19	; 0x07
     422:	2e 83       	std	Y+6, r18	; 0x06
     424:	19 82       	std	Y+1, r1	; 0x01
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	08 2e       	mov	r0, r24
     42a:	00 0c       	add	r0, r0
     42c:	99 0b       	sbc	r25, r25
     42e:	9c 01       	movw	r18, r24
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	08 2e       	mov	r0, r24
     438:	00 0c       	add	r0, r0
     43a:	99 0b       	sbc	r25, r25
     43c:	28 17       	cp	r18, r24
     43e:	39 07       	cpc	r19, r25
     440:	1c f0       	brlt	.+6      	; 0x448 <isolate_bits+0x42>
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	03 c0       	rjmp	.+6      	; 0x44e <isolate_bits+0x48>
     448:	8c 81       	ldd	r24, Y+4	; 0x04
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	89 83       	std	Y+1, r24	; 0x01
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	8d 81       	ldd	r24, Y+5	; 0x05
     452:	29 2f       	mov	r18, r25
     454:	28 1b       	sub	r18, r24
     456:	82 2f       	mov	r24, r18
     458:	8f 5f       	subi	r24, 0xFF	; 255
     45a:	8a 83       	std	Y+2, r24	; 0x02
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	88 23       	and	r24, r24
     460:	0c f4       	brge	.+2      	; 0x464 <isolate_bits+0x5e>
     462:	1a 82       	std	Y+2, r1	; 0x02
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	9f ef       	ldi	r25, 0xFF	; 255
     46e:	02 c0       	rjmp	.+4      	; 0x474 <isolate_bits+0x6e>
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	2a 95       	dec	r18
     476:	e2 f7       	brpl	.-8      	; 0x470 <isolate_bits+0x6a>
     478:	80 95       	com	r24
     47a:	90 95       	com	r25
     47c:	2a 81       	ldd	r18, Y+2	; 0x02
     47e:	02 2e       	mov	r0, r18
     480:	00 0c       	add	r0, r0
     482:	33 0b       	sbc	r19, r19
     484:	ac 01       	movw	r20, r24
     486:	02 c0       	rjmp	.+4      	; 0x48c <isolate_bits+0x86>
     488:	44 0f       	add	r20, r20
     48a:	55 1f       	adc	r21, r21
     48c:	2a 95       	dec	r18
     48e:	e2 f7       	brpl	.-8      	; 0x488 <isolate_bits+0x82>
     490:	9a 01       	movw	r18, r20
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	82 23       	and	r24, r18
     49a:	93 23       	and	r25, r19
     49c:	2a 81       	ldd	r18, Y+2	; 0x02
     49e:	02 2e       	mov	r0, r18
     4a0:	00 0c       	add	r0, r0
     4a2:	33 0b       	sbc	r19, r19
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <isolate_bits+0xa4>
     4a6:	95 95       	asr	r25
     4a8:	87 95       	ror	r24
     4aa:	2a 95       	dec	r18
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <isolate_bits+0xa0>
     4ae:	28 2f       	mov	r18, r24
     4b0:	8e 81       	ldd	r24, Y+6	; 0x06
     4b2:	9f 81       	ldd	r25, Y+7	; 0x07
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	27 96       	adiw	r28, 0x07	; 7
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <ElementAnimationEngine_access_bits>:
     4cc:	4f 92       	push	r4
     4ce:	5f 92       	push	r5
     4d0:	6f 92       	push	r6
     4d2:	7f 92       	push	r7
     4d4:	8f 92       	push	r8
     4d6:	9f 92       	push	r9
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	ac 97       	sbiw	r28, 0x2c	; 44
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	9b 8b       	std	Y+19, r25	; 0x13
     4fa:	8a 8b       	std	Y+18, r24	; 0x12
     4fc:	6c 8b       	std	Y+20, r22	; 0x14
     4fe:	5e 8b       	std	Y+22, r21	; 0x16
     500:	4d 8b       	std	Y+21, r20	; 0x15
     502:	38 8f       	std	Y+24, r19	; 0x18
     504:	2f 8b       	std	Y+23, r18	; 0x17
     506:	1a 8f       	std	Y+26, r17	; 0x1a
     508:	09 8f       	std	Y+25, r16	; 0x19
     50a:	fc 8e       	std	Y+28, r15	; 0x1c
     50c:	eb 8e       	std	Y+27, r14	; 0x1b
     50e:	19 86       	std	Y+9, r1	; 0x09
     510:	1a 86       	std	Y+10, r1	; 0x0a
     512:	1b 86       	std	Y+11, r1	; 0x0b
     514:	1c 86       	std	Y+12, r1	; 0x0c
     516:	1d 86       	std	Y+13, r1	; 0x0d
     518:	1e 86       	std	Y+14, r1	; 0x0e
     51a:	1f 86       	std	Y+15, r1	; 0x0f
     51c:	18 8a       	std	Y+16, r1	; 0x10
     51e:	8c 89       	ldd	r24, Y+20	; 0x14
     520:	28 2f       	mov	r18, r24
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	8d 89       	ldd	r24, Y+21	; 0x15
     526:	9e 89       	ldd	r25, Y+22	; 0x16
     528:	b9 01       	movw	r22, r18
     52a:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__udivmodhi4>
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	4b 8d       	ldd	r20, Y+27	; 0x1b
     532:	5c 8d       	ldd	r21, Y+28	; 0x1c
     534:	8d 89       	ldd	r24, Y+21	; 0x15
     536:	9e 89       	ldd	r25, Y+22	; 0x16
     538:	48 9f       	mul	r20, r24
     53a:	90 01       	movw	r18, r0
     53c:	49 9f       	mul	r20, r25
     53e:	30 0d       	add	r19, r0
     540:	58 9f       	mul	r21, r24
     542:	30 0d       	add	r19, r0
     544:	11 24       	eor	r1, r1
     546:	89 8d       	ldd	r24, Y+25	; 0x19
     548:	9a 8d       	ldd	r25, Y+26	; 0x1a
     54a:	a9 01       	movw	r20, r18
     54c:	48 0f       	add	r20, r24
     54e:	59 1f       	adc	r21, r25
     550:	8c 89       	ldd	r24, Y+20	; 0x14
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	42 9f       	mul	r20, r18
     558:	c0 01       	movw	r24, r0
     55a:	43 9f       	mul	r20, r19
     55c:	90 0d       	add	r25, r0
     55e:	52 9f       	mul	r21, r18
     560:	90 0d       	add	r25, r0
     562:	11 24       	eor	r1, r1
     564:	9c 83       	std	Y+4, r25	; 0x04
     566:	8b 83       	std	Y+3, r24	; 0x03
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	96 95       	lsr	r25
     56e:	87 95       	ror	r24
     570:	96 95       	lsr	r25
     572:	87 95       	ror	r24
     574:	96 95       	lsr	r25
     576:	87 95       	ror	r24
     578:	9e 83       	std	Y+6, r25	; 0x06
     57a:	8d 83       	std	Y+5, r24	; 0x05
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	80 95       	com	r24
     580:	87 70       	andi	r24, 0x07	; 7
     582:	8f 83       	std	Y+7, r24	; 0x07
     584:	4c 89       	ldd	r20, Y+20	; 0x14
     586:	6f 81       	ldd	r22, Y+7	; 0x07
     588:	2a 89       	ldd	r18, Y+18	; 0x12
     58a:	3b 89       	ldd	r19, Y+19	; 0x13
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	9e 81       	ldd	r25, Y+6	; 0x06
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	fc 01       	movw	r30, r24
     596:	50 81       	ld	r21, Z
     598:	ce 01       	movw	r24, r28
     59a:	09 96       	adiw	r24, 0x09	; 9
     59c:	9c 01       	movw	r18, r24
     59e:	85 2f       	mov	r24, r21
     5a0:	0e 94 03 02 	call	0x406	; 0x406 <isolate_bits>
     5a4:	98 2f       	mov	r25, r24
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	89 0f       	add	r24, r25
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	6c c0       	rjmp	.+216    	; 0x686 <ElementAnimationEngine_access_bits+0x1ba>
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	86 95       	lsr	r24
     5b2:	86 95       	lsr	r24
     5b4:	86 95       	lsr	r24
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	9e 83       	std	Y+6, r25	; 0x06
     5bc:	8d 83       	std	Y+5, r24	; 0x05
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	80 95       	com	r24
     5c2:	87 70       	andi	r24, 0x07	; 7
     5c4:	8f 83       	std	Y+7, r24	; 0x07
     5c6:	9b 81       	ldd	r25, Y+3	; 0x03
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	98 1b       	sub	r25, r24
     5cc:	8c 89       	ldd	r24, Y+20	; 0x14
     5ce:	89 0f       	add	r24, r25
     5d0:	48 2f       	mov	r20, r24
     5d2:	6f 81       	ldd	r22, Y+7	; 0x07
     5d4:	2a 89       	ldd	r18, Y+18	; 0x12
     5d6:	3b 89       	ldd	r19, Y+19	; 0x13
     5d8:	8d 81       	ldd	r24, Y+5	; 0x05
     5da:	9e 81       	ldd	r25, Y+6	; 0x06
     5dc:	82 0f       	add	r24, r18
     5de:	93 1f       	adc	r25, r19
     5e0:	fc 01       	movw	r30, r24
     5e2:	50 81       	ld	r21, Z
     5e4:	ce 01       	movw	r24, r28
     5e6:	41 96       	adiw	r24, 0x11	; 17
     5e8:	9c 01       	movw	r18, r24
     5ea:	85 2f       	mov	r24, r21
     5ec:	0e 94 03 02 	call	0x406	; 0x406 <isolate_bits>
     5f0:	88 87       	std	Y+8, r24	; 0x08
     5f2:	f9 85       	ldd	r31, Y+9	; 0x09
     5f4:	fd 8f       	std	Y+29, r31	; 0x1d
     5f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     5f8:	8e 8f       	std	Y+30, r24	; 0x1e
     5fa:	eb 85       	ldd	r30, Y+11	; 0x0b
     5fc:	ef 8f       	std	Y+31, r30	; 0x1f
     5fe:	fc 85       	ldd	r31, Y+12	; 0x0c
     600:	f8 a3       	std	Y+32, r31	; 0x20
     602:	8d 85       	ldd	r24, Y+13	; 0x0d
     604:	89 a3       	std	Y+33, r24	; 0x21
     606:	ee 85       	ldd	r30, Y+14	; 0x0e
     608:	ea a3       	std	Y+34, r30	; 0x22
     60a:	ff 85       	ldd	r31, Y+15	; 0x0f
     60c:	fb a3       	std	Y+35, r31	; 0x23
     60e:	88 89       	ldd	r24, Y+16	; 0x10
     610:	8c a3       	std	Y+36, r24	; 0x24
     612:	88 85       	ldd	r24, Y+8	; 0x08
     614:	e8 2f       	mov	r30, r24
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	2d 8d       	ldd	r18, Y+29	; 0x1d
     61a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     61c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     61e:	58 a1       	ldd	r21, Y+32	; 0x20
     620:	69 a1       	ldd	r22, Y+33	; 0x21
     622:	7a a1       	ldd	r23, Y+34	; 0x22
     624:	8b a1       	ldd	r24, Y+35	; 0x23
     626:	9c a1       	ldd	r25, Y+36	; 0x24
     628:	0e 2f       	mov	r16, r30
     62a:	0e 94 55 30 	call	0x60aa	; 0x60aa <__ashldi3>
     62e:	2d a3       	std	Y+37, r18	; 0x25
     630:	3e a3       	std	Y+38, r19	; 0x26
     632:	4f a3       	std	Y+39, r20	; 0x27
     634:	58 a7       	std	Y+40, r21	; 0x28
     636:	69 a7       	std	Y+41, r22	; 0x29
     638:	7a a7       	std	Y+42, r23	; 0x2a
     63a:	8b a7       	std	Y+43, r24	; 0x2b
     63c:	9c a7       	std	Y+44, r25	; 0x2c
     63e:	89 89       	ldd	r24, Y+17	; 0x11
     640:	28 2f       	mov	r18, r24
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	cb 01       	movw	r24, r22
     64e:	4d a0       	ldd	r4, Y+37	; 0x25
     650:	42 2a       	or	r4, r18
     652:	5e a0       	ldd	r5, Y+38	; 0x26
     654:	53 2a       	or	r5, r19
     656:	6f a0       	ldd	r6, Y+39	; 0x27
     658:	64 2a       	or	r6, r20
     65a:	78 a4       	ldd	r7, Y+40	; 0x28
     65c:	75 2a       	or	r7, r21
     65e:	89 a4       	ldd	r8, Y+41	; 0x29
     660:	86 2a       	or	r8, r22
     662:	9a a4       	ldd	r9, Y+42	; 0x2a
     664:	97 2a       	or	r9, r23
     666:	ab a4       	ldd	r10, Y+43	; 0x2b
     668:	a8 2a       	or	r10, r24
     66a:	bc a4       	ldd	r11, Y+44	; 0x2c
     66c:	b9 2a       	or	r11, r25
     66e:	49 86       	std	Y+9, r4	; 0x09
     670:	5a 86       	std	Y+10, r5	; 0x0a
     672:	6b 86       	std	Y+11, r6	; 0x0b
     674:	7c 86       	std	Y+12, r7	; 0x0c
     676:	8d 86       	std	Y+13, r8	; 0x0d
     678:	9e 86       	std	Y+14, r9	; 0x0e
     67a:	af 86       	std	Y+15, r10	; 0x0f
     67c:	b8 8a       	std	Y+16, r11	; 0x10
     67e:	99 81       	ldd	r25, Y+1	; 0x01
     680:	88 85       	ldd	r24, Y+8	; 0x08
     682:	89 0f       	add	r24, r25
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	28 2f       	mov	r18, r24
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	8b 81       	ldd	r24, Y+3	; 0x03
     68e:	9c 81       	ldd	r25, Y+4	; 0x04
     690:	28 1b       	sub	r18, r24
     692:	39 0b       	sbc	r19, r25
     694:	8c 89       	ldd	r24, Y+20	; 0x14
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	28 17       	cp	r18, r24
     69c:	39 07       	cpc	r19, r25
     69e:	08 f4       	brcc	.+2      	; 0x6a2 <ElementAnimationEngine_access_bits+0x1d6>
     6a0:	86 cf       	rjmp	.-244    	; 0x5ae <ElementAnimationEngine_access_bits+0xe2>
     6a2:	29 85       	ldd	r18, Y+9	; 0x09
     6a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     6a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     6a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     6aa:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ac:	7e 85       	ldd	r23, Y+14	; 0x0e
     6ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b0:	98 89       	ldd	r25, Y+16	; 0x10
     6b2:	82 2f       	mov	r24, r18
     6b4:	ac 96       	adiw	r28, 0x2c	; 44
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	7f 90       	pop	r7
     6d6:	6f 90       	pop	r6
     6d8:	5f 90       	pop	r5
     6da:	4f 90       	pop	r4
     6dc:	08 95       	ret

000006de <write_bits>:
     6de:	4f 92       	push	r4
     6e0:	5f 92       	push	r5
     6e2:	6f 92       	push	r6
     6e4:	7f 92       	push	r7
     6e6:	8f 92       	push	r8
     6e8:	9f 92       	push	r9
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	67 97       	sbiw	r28, 0x17	; 23
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	9d 83       	std	Y+5, r25	; 0x05
     710:	8c 83       	std	Y+4, r24	; 0x04
     712:	6e 83       	std	Y+6, r22	; 0x06
     714:	4f 83       	std	Y+7, r20	; 0x07
     716:	c8 86       	std	Y+8, r12	; 0x08
     718:	d9 86       	std	Y+9, r13	; 0x09
     71a:	ea 86       	std	Y+10, r14	; 0x0a
     71c:	fb 86       	std	Y+11, r15	; 0x0b
     71e:	0c 87       	std	Y+12, r16	; 0x0c
     720:	1d 87       	std	Y+13, r17	; 0x0d
     722:	2e 87       	std	Y+14, r18	; 0x0e
     724:	3f 87       	std	Y+15, r19	; 0x0f
     726:	19 82       	std	Y+1, r1	; 0x01
     728:	1a 82       	std	Y+2, r1	; 0x02
     72a:	88 85       	ldd	r24, Y+8	; 0x08
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	8e 81       	ldd	r24, Y+6	; 0x06
     730:	08 2e       	mov	r0, r24
     732:	00 0c       	add	r0, r0
     734:	99 0b       	sbc	r25, r25
     736:	9c 01       	movw	r18, r24
     738:	2f 5f       	subi	r18, 0xFF	; 255
     73a:	3f 4f       	sbci	r19, 0xFF	; 255
     73c:	8f 81       	ldd	r24, Y+7	; 0x07
     73e:	08 2e       	mov	r0, r24
     740:	00 0c       	add	r0, r0
     742:	99 0b       	sbc	r25, r25
     744:	28 17       	cp	r18, r24
     746:	39 07       	cpc	r19, r25
     748:	54 f0       	brlt	.+20     	; 0x75e <write_bits+0x80>
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	9e 81       	ldd	r25, Y+6	; 0x06
     750:	8f 81       	ldd	r24, Y+7	; 0x07
     752:	29 2f       	mov	r18, r25
     754:	28 1b       	sub	r18, r24
     756:	82 2f       	mov	r24, r18
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	8a 83       	std	Y+2, r24	; 0x02
     75c:	5d c0       	rjmp	.+186    	; 0x818 <write_bits+0x13a>
     75e:	8e 81       	ldd	r24, Y+6	; 0x06
     760:	8f 5f       	subi	r24, 0xFF	; 255
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	9f 81       	ldd	r25, Y+7	; 0x07
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	e9 2f       	mov	r30, r25
     76a:	e8 1b       	sub	r30, r24
     76c:	8e 2f       	mov	r24, r30
     76e:	8a 83       	std	Y+2, r24	; 0x02
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	81 50       	subi	r24, 0x01	; 1
     774:	8e 83       	std	Y+6, r24	; 0x06
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	28 2f       	mov	r18, r24
     77a:	88 0f       	add	r24, r24
     77c:	33 0b       	sbc	r19, r19
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	9f ef       	ldi	r25, 0xFF	; 255
     782:	02 c0       	rjmp	.+4      	; 0x788 <write_bits+0xaa>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	2a 95       	dec	r18
     78a:	e2 f7       	brpl	.-8      	; 0x784 <write_bits+0xa6>
     78c:	80 95       	com	r24
     78e:	90 95       	com	r25
     790:	2a 81       	ldd	r18, Y+2	; 0x02
     792:	02 2e       	mov	r0, r18
     794:	00 0c       	add	r0, r0
     796:	33 0b       	sbc	r19, r19
     798:	02 c0       	rjmp	.+4      	; 0x79e <write_bits+0xc0>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	2a 95       	dec	r18
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <write_bits+0xbc>
     7a2:	99 8b       	std	Y+17, r25	; 0x11
     7a4:	88 8b       	std	Y+16, r24	; 0x10
     7a6:	89 2f       	mov	r24, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	88 0b       	sbc	r24, r24
     7ac:	8a 8b       	std	Y+18, r24	; 0x12
     7ae:	8b 8b       	std	Y+19, r24	; 0x13
     7b0:	8c 8b       	std	Y+20, r24	; 0x14
     7b2:	8d 8b       	std	Y+21, r24	; 0x15
     7b4:	8e 8b       	std	Y+22, r24	; 0x16
     7b6:	8f 8b       	std	Y+23, r24	; 0x17
     7b8:	88 85       	ldd	r24, Y+8	; 0x08
     7ba:	48 88       	ldd	r4, Y+16	; 0x10
     7bc:	48 22       	and	r4, r24
     7be:	89 85       	ldd	r24, Y+9	; 0x09
     7c0:	59 88       	ldd	r5, Y+17	; 0x11
     7c2:	58 22       	and	r5, r24
     7c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c6:	6a 88       	ldd	r6, Y+18	; 0x12
     7c8:	68 22       	and	r6, r24
     7ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     7cc:	7b 88       	ldd	r7, Y+19	; 0x13
     7ce:	78 22       	and	r7, r24
     7d0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d2:	8c 88       	ldd	r8, Y+20	; 0x14
     7d4:	88 22       	and	r8, r24
     7d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7d8:	9d 88       	ldd	r9, Y+21	; 0x15
     7da:	98 22       	and	r9, r24
     7dc:	8e 85       	ldd	r24, Y+14	; 0x0e
     7de:	ae 88       	ldd	r10, Y+22	; 0x16
     7e0:	a8 22       	and	r10, r24
     7e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e4:	bf 88       	ldd	r11, Y+23	; 0x17
     7e6:	b8 22       	and	r11, r24
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	e8 2f       	mov	r30, r24
     7ec:	88 0f       	add	r24, r24
     7ee:	ff 0b       	sbc	r31, r31
     7f0:	24 2d       	mov	r18, r4
     7f2:	35 2d       	mov	r19, r5
     7f4:	46 2d       	mov	r20, r6
     7f6:	57 2d       	mov	r21, r7
     7f8:	68 2d       	mov	r22, r8
     7fa:	79 2d       	mov	r23, r9
     7fc:	8a 2d       	mov	r24, r10
     7fe:	9b 2d       	mov	r25, r11
     800:	0e 2f       	mov	r16, r30
     802:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__lshrdi3>
     806:	a2 2e       	mov	r10, r18
     808:	b3 2e       	mov	r11, r19
     80a:	c4 2e       	mov	r12, r20
     80c:	d5 2e       	mov	r13, r21
     80e:	e6 2e       	mov	r14, r22
     810:	f7 2e       	mov	r15, r23
     812:	08 2f       	mov	r16, r24
     814:	19 2f       	mov	r17, r25
     816:	ab 82       	std	Y+3, r10	; 0x03
     818:	8c 81       	ldd	r24, Y+4	; 0x04
     81a:	9d 81       	ldd	r25, Y+5	; 0x05
     81c:	fc 01       	movw	r30, r24
     81e:	80 81       	ld	r24, Z
     820:	48 2f       	mov	r20, r24
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	28 2f       	mov	r18, r24
     826:	88 0f       	add	r24, r24
     828:	33 0b       	sbc	r19, r19
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	02 c0       	rjmp	.+4      	; 0x834 <write_bits+0x156>
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	2a 95       	dec	r18
     836:	e2 f7       	brpl	.-8      	; 0x830 <write_bits+0x152>
     838:	80 95       	com	r24
     83a:	90 95       	com	r25
     83c:	2a 81       	ldd	r18, Y+2	; 0x02
     83e:	02 2e       	mov	r0, r18
     840:	00 0c       	add	r0, r0
     842:	33 0b       	sbc	r19, r19
     844:	02 c0       	rjmp	.+4      	; 0x84a <write_bits+0x16c>
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	2a 95       	dec	r18
     84c:	e2 f7       	brpl	.-8      	; 0x846 <write_bits+0x168>
     84e:	80 95       	com	r24
     850:	64 2f       	mov	r22, r20
     852:	68 23       	and	r22, r24
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	88 2f       	mov	r24, r24
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	2e 81       	ldd	r18, Y+6	; 0x06
     85c:	02 2e       	mov	r0, r18
     85e:	00 0c       	add	r0, r0
     860:	33 0b       	sbc	r19, r19
     862:	a9 01       	movw	r20, r18
     864:	4f 5f       	subi	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	29 81       	ldd	r18, Y+1	; 0x01
     86a:	02 2e       	mov	r0, r18
     86c:	00 0c       	add	r0, r0
     86e:	33 0b       	sbc	r19, r19
     870:	fa 01       	movw	r30, r20
     872:	e2 1b       	sub	r30, r18
     874:	f3 0b       	sbc	r31, r19
     876:	9f 01       	movw	r18, r30
     878:	02 c0       	rjmp	.+4      	; 0x87e <write_bits+0x1a0>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	2a 95       	dec	r18
     880:	e2 f7       	brpl	.-8      	; 0x87a <write_bits+0x19c>
     882:	86 2b       	or	r24, r22
     884:	28 2f       	mov	r18, r24
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	67 96       	adiw	r28, 0x17	; 23
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	08 95       	ret

000008be <ElementAnimationEngine_write_bits>:
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	6a 97       	sbiw	r28, 0x1a	; 26
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	99 8b       	std	Y+17, r25	; 0x11
     8e4:	88 8b       	std	Y+16, r24	; 0x10
     8e6:	6a 8b       	std	Y+18, r22	; 0x12
     8e8:	5c 8b       	std	Y+20, r21	; 0x14
     8ea:	4b 8b       	std	Y+19, r20	; 0x13
     8ec:	3e 8b       	std	Y+22, r19	; 0x16
     8ee:	2d 8b       	std	Y+21, r18	; 0x15
     8f0:	18 8f       	std	Y+24, r17	; 0x18
     8f2:	0f 8b       	std	Y+23, r16	; 0x17
     8f4:	fa 8e       	std	Y+26, r15	; 0x1a
     8f6:	e9 8e       	std	Y+25, r14	; 0x19
     8f8:	1a 82       	std	Y+2, r1	; 0x02
     8fa:	1b 82       	std	Y+3, r1	; 0x03
     8fc:	1c 82       	std	Y+4, r1	; 0x04
     8fe:	1d 82       	std	Y+5, r1	; 0x05
     900:	1e 82       	std	Y+6, r1	; 0x06
     902:	1f 82       	std	Y+7, r1	; 0x07
     904:	18 86       	std	Y+8, r1	; 0x08
     906:	19 86       	std	Y+9, r1	; 0x09
     908:	49 8d       	ldd	r20, Y+25	; 0x19
     90a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     90c:	8b 89       	ldd	r24, Y+19	; 0x13
     90e:	9c 89       	ldd	r25, Y+20	; 0x14
     910:	48 9f       	mul	r20, r24
     912:	90 01       	movw	r18, r0
     914:	49 9f       	mul	r20, r25
     916:	30 0d       	add	r19, r0
     918:	58 9f       	mul	r21, r24
     91a:	30 0d       	add	r19, r0
     91c:	11 24       	eor	r1, r1
     91e:	8f 89       	ldd	r24, Y+23	; 0x17
     920:	98 8d       	ldd	r25, Y+24	; 0x18
     922:	a9 01       	movw	r20, r18
     924:	48 0f       	add	r20, r24
     926:	59 1f       	adc	r21, r25
     928:	8a 89       	ldd	r24, Y+18	; 0x12
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	42 9f       	mul	r20, r18
     930:	c0 01       	movw	r24, r0
     932:	43 9f       	mul	r20, r19
     934:	90 0d       	add	r25, r0
     936:	52 9f       	mul	r21, r18
     938:	90 0d       	add	r25, r0
     93a:	11 24       	eor	r1, r1
     93c:	9b 87       	std	Y+11, r25	; 0x0b
     93e:	8a 87       	std	Y+10, r24	; 0x0a
     940:	8a 85       	ldd	r24, Y+10	; 0x0a
     942:	9b 85       	ldd	r25, Y+11	; 0x0b
     944:	96 95       	lsr	r25
     946:	87 95       	ror	r24
     948:	96 95       	lsr	r25
     94a:	87 95       	ror	r24
     94c:	96 95       	lsr	r25
     94e:	87 95       	ror	r24
     950:	9d 87       	std	Y+13, r25	; 0x0d
     952:	8c 87       	std	Y+12, r24	; 0x0c
     954:	8a 85       	ldd	r24, Y+10	; 0x0a
     956:	80 95       	com	r24
     958:	87 70       	andi	r24, 0x07	; 7
     95a:	8e 87       	std	Y+14, r24	; 0x0e
     95c:	aa 88       	ldd	r10, Y+18	; 0x12
     95e:	be 84       	ldd	r11, Y+14	; 0x0e
     960:	28 89       	ldd	r18, Y+16	; 0x10
     962:	39 89       	ldd	r19, Y+17	; 0x11
     964:	8c 85       	ldd	r24, Y+12	; 0x0c
     966:	9d 85       	ldd	r25, Y+13	; 0x0d
     968:	f9 01       	movw	r30, r18
     96a:	e8 0f       	add	r30, r24
     96c:	f9 1f       	adc	r31, r25
     96e:	4f a1       	ldd	r20, Y+39	; 0x27
     970:	58 a5       	ldd	r21, Y+40	; 0x28
     972:	69 a5       	ldd	r22, Y+41	; 0x29
     974:	7a a5       	ldd	r23, Y+42	; 0x2a
     976:	8b a5       	ldd	r24, Y+43	; 0x2b
     978:	9c a5       	ldd	r25, Y+44	; 0x2c
     97a:	ad a5       	ldd	r26, Y+45	; 0x2d
     97c:	be a5       	ldd	r27, Y+46	; 0x2e
     97e:	c4 2e       	mov	r12, r20
     980:	d5 2e       	mov	r13, r21
     982:	e6 2e       	mov	r14, r22
     984:	f7 2e       	mov	r15, r23
     986:	08 2f       	mov	r16, r24
     988:	19 2f       	mov	r17, r25
     98a:	2a 2f       	mov	r18, r26
     98c:	3b 2f       	mov	r19, r27
     98e:	4a 2d       	mov	r20, r10
     990:	6b 2d       	mov	r22, r11
     992:	cf 01       	movw	r24, r30
     994:	0e 94 6f 03 	call	0x6de	; 0x6de <write_bits>
     998:	98 2f       	mov	r25, r24
     99a:	8a 85       	ldd	r24, Y+10	; 0x0a
     99c:	89 0f       	add	r24, r25
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	34 c0       	rjmp	.+104    	; 0xa0a <__stack+0x10b>
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	86 95       	lsr	r24
     9a6:	86 95       	lsr	r24
     9a8:	86 95       	lsr	r24
     9aa:	88 2f       	mov	r24, r24
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	9d 87       	std	Y+13, r25	; 0x0d
     9b0:	8c 87       	std	Y+12, r24	; 0x0c
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	80 95       	com	r24
     9b6:	87 70       	andi	r24, 0x07	; 7
     9b8:	8e 87       	std	Y+14, r24	; 0x0e
     9ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	98 1b       	sub	r25, r24
     9c0:	8a 89       	ldd	r24, Y+18	; 0x12
     9c2:	89 0f       	add	r24, r25
     9c4:	a8 2e       	mov	r10, r24
     9c6:	be 84       	ldd	r11, Y+14	; 0x0e
     9c8:	28 89       	ldd	r18, Y+16	; 0x10
     9ca:	39 89       	ldd	r19, Y+17	; 0x11
     9cc:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ce:	9d 85       	ldd	r25, Y+13	; 0x0d
     9d0:	f9 01       	movw	r30, r18
     9d2:	e8 0f       	add	r30, r24
     9d4:	f9 1f       	adc	r31, r25
     9d6:	4f a1       	ldd	r20, Y+39	; 0x27
     9d8:	58 a5       	ldd	r21, Y+40	; 0x28
     9da:	69 a5       	ldd	r22, Y+41	; 0x29
     9dc:	7a a5       	ldd	r23, Y+42	; 0x2a
     9de:	8b a5       	ldd	r24, Y+43	; 0x2b
     9e0:	9c a5       	ldd	r25, Y+44	; 0x2c
     9e2:	ad a5       	ldd	r26, Y+45	; 0x2d
     9e4:	be a5       	ldd	r27, Y+46	; 0x2e
     9e6:	c4 2e       	mov	r12, r20
     9e8:	d5 2e       	mov	r13, r21
     9ea:	e6 2e       	mov	r14, r22
     9ec:	f7 2e       	mov	r15, r23
     9ee:	08 2f       	mov	r16, r24
     9f0:	19 2f       	mov	r17, r25
     9f2:	2a 2f       	mov	r18, r26
     9f4:	3b 2f       	mov	r19, r27
     9f6:	4a 2d       	mov	r20, r10
     9f8:	6b 2d       	mov	r22, r11
     9fa:	cf 01       	movw	r24, r30
     9fc:	0e 94 6f 03 	call	0x6de	; 0x6de <write_bits>
     a00:	8f 87       	std	Y+15, r24	; 0x0f
     a02:	99 81       	ldd	r25, Y+1	; 0x01
     a04:	8f 85       	ldd	r24, Y+15	; 0x0f
     a06:	89 0f       	add	r24, r25
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	28 2f       	mov	r18, r24
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	8a 85       	ldd	r24, Y+10	; 0x0a
     a12:	9b 85       	ldd	r25, Y+11	; 0x0b
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	8a 89       	ldd	r24, Y+18	; 0x12
     a1a:	88 2f       	mov	r24, r24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	28 17       	cp	r18, r24
     a20:	39 07       	cpc	r19, r25
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	be cf       	rjmp	.-132    	; 0x9a2 <__stack+0xa3>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	6a 96       	adiw	r28, 0x1a	; 26
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	08 95       	ret

00000a4a <ElementAnimationEngine_get_max_bitdepth_value>:
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	61 97       	sbiw	r28, 0x11	; 17
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	e8 2f       	mov	r30, r24
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	2f ef       	ldi	r18, 0xFF	; 255
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f ef       	ldi	r20, 0xFF	; 255
     a7e:	5f ef       	ldi	r21, 0xFF	; 255
     a80:	6f ef       	ldi	r22, 0xFF	; 255
     a82:	7f ef       	ldi	r23, 0xFF	; 255
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	9f ef       	ldi	r25, 0xFF	; 255
     a88:	0e 2f       	mov	r16, r30
     a8a:	0e 94 55 30 	call	0x60aa	; 0x60aa <__ashldi3>
     a8e:	2a 83       	std	Y+2, r18	; 0x02
     a90:	3b 83       	std	Y+3, r19	; 0x03
     a92:	4c 83       	std	Y+4, r20	; 0x04
     a94:	5d 83       	std	Y+5, r21	; 0x05
     a96:	6e 83       	std	Y+6, r22	; 0x06
     a98:	7f 83       	std	Y+7, r23	; 0x07
     a9a:	88 87       	std	Y+8, r24	; 0x08
     a9c:	99 87       	std	Y+9, r25	; 0x09
     a9e:	8a 80       	ldd	r8, Y+2	; 0x02
     aa0:	80 94       	com	r8
     aa2:	9b 80       	ldd	r9, Y+3	; 0x03
     aa4:	90 94       	com	r9
     aa6:	ac 80       	ldd	r10, Y+4	; 0x04
     aa8:	a0 94       	com	r10
     aaa:	bd 80       	ldd	r11, Y+5	; 0x05
     aac:	b0 94       	com	r11
     aae:	ce 80       	ldd	r12, Y+6	; 0x06
     ab0:	c0 94       	com	r12
     ab2:	df 80       	ldd	r13, Y+7	; 0x07
     ab4:	d0 94       	com	r13
     ab6:	e8 84       	ldd	r14, Y+8	; 0x08
     ab8:	e0 94       	com	r14
     aba:	f9 84       	ldd	r15, Y+9	; 0x09
     abc:	f0 94       	com	r15
     abe:	8a 86       	std	Y+10, r8	; 0x0a
     ac0:	9b 86       	std	Y+11, r9	; 0x0b
     ac2:	ac 86       	std	Y+12, r10	; 0x0c
     ac4:	bd 86       	std	Y+13, r11	; 0x0d
     ac6:	ce 86       	std	Y+14, r12	; 0x0e
     ac8:	df 86       	std	Y+15, r13	; 0x0f
     aca:	e8 8a       	std	Y+16, r14	; 0x10
     acc:	f9 8a       	std	Y+17, r15	; 0x11
     ace:	2a 85       	ldd	r18, Y+10	; 0x0a
     ad0:	3b 85       	ldd	r19, Y+11	; 0x0b
     ad2:	4c 85       	ldd	r20, Y+12	; 0x0c
     ad4:	5d 85       	ldd	r21, Y+13	; 0x0d
     ad6:	6e 85       	ldd	r22, Y+14	; 0x0e
     ad8:	7f 85       	ldd	r23, Y+15	; 0x0f
     ada:	88 89       	ldd	r24, Y+16	; 0x10
     adc:	99 89       	ldd	r25, Y+17	; 0x11
     ade:	61 96       	adiw	r28, 0x11	; 17
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	bf 90       	pop	r11
     afa:	af 90       	pop	r10
     afc:	9f 90       	pop	r9
     afe:	8f 90       	pop	r8
     b00:	08 95       	ret

00000b02 <ElementAnimationEngine_load_to_buffer>:
     b02:	2f 92       	push	r2
     b04:	3f 92       	push	r3
     b06:	4f 92       	push	r4
     b08:	5f 92       	push	r5
     b0a:	6f 92       	push	r6
     b0c:	7f 92       	push	r7
     b0e:	8f 92       	push	r8
     b10:	9f 92       	push	r9
     b12:	af 92       	push	r10
     b14:	bf 92       	push	r11
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	e1 97       	sbiw	r28, 0x31	; 49
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	9f a7       	std	Y+47, r25	; 0x2f
     b38:	8e a7       	std	Y+46, r24	; 0x2e
     b3a:	79 ab       	std	Y+49, r23	; 0x31
     b3c:	68 ab       	std	Y+48, r22	; 0x30
     b3e:	8e a5       	ldd	r24, Y+46	; 0x2e
     b40:	9f a5       	ldd	r25, Y+47	; 0x2f
     b42:	fc 01       	movw	r30, r24
     b44:	91 81       	ldd	r25, Z+1	; 0x01
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	89 27       	eor	r24, r25
     b4a:	88 23       	and	r24, r24
     b4c:	79 f0       	breq	.+30     	; 0xb6c <ElementAnimationEngine_load_to_buffer+0x6a>
     b4e:	8e a5       	ldd	r24, Y+46	; 0x2e
     b50:	9f a5       	ldd	r25, Y+47	; 0x2f
     b52:	fc 01       	movw	r30, r24
     b54:	84 81       	ldd	r24, Z+4	; 0x04
     b56:	95 81       	ldd	r25, Z+5	; 0x05
     b58:	fc 01       	movw	r30, r24
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	88 a9       	ldd	r24, Y+48	; 0x30
     b60:	99 a9       	ldd	r25, Y+49	; 0x31
     b62:	f9 01       	movw	r30, r18
     b64:	09 95       	icall
     b66:	8d 87       	std	Y+13, r24	; 0x0d
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	78 c1       	rjmp	.+752    	; 0xe5c <ElementAnimationEngine_load_to_buffer+0x35a>
     b6c:	8e a5       	ldd	r24, Y+46	; 0x2e
     b6e:	9f a5       	ldd	r25, Y+47	; 0x2f
     b70:	fc 01       	movw	r30, r24
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	9f 87       	std	Y+15, r25	; 0x0f
     b78:	8e 87       	std	Y+14, r24	; 0x0e
     b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b7e:	0e 94 62 00 	call	0xc4	; 0xc4 <ElementAnimationEngine_get_current_frame>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	88 8b       	std	Y+16, r24	; 0x10
     b88:	99 8b       	std	Y+17, r25	; 0x11
     b8a:	aa 8b       	std	Y+18, r26	; 0x12
     b8c:	bb 8b       	std	Y+19, r27	; 0x13
     b8e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b90:	9f 85       	ldd	r25, Y+15	; 0x0f
     b92:	fc 01       	movw	r30, r24
     b94:	82 89       	ldd	r24, Z+18	; 0x12
     b96:	0e 94 25 05 	call	0xa4a	; 0xa4a <ElementAnimationEngine_get_max_bitdepth_value>
     b9a:	a2 2e       	mov	r10, r18
     b9c:	b3 2e       	mov	r11, r19
     b9e:	c4 2e       	mov	r12, r20
     ba0:	d5 2e       	mov	r13, r21
     ba2:	e6 2e       	mov	r14, r22
     ba4:	f7 2e       	mov	r15, r23
     ba6:	08 2f       	mov	r16, r24
     ba8:	19 2f       	mov	r17, r25
     baa:	ac 8a       	std	Y+20, r10	; 0x14
     bac:	bd 8a       	std	Y+21, r11	; 0x15
     bae:	ce 8a       	std	Y+22, r12	; 0x16
     bb0:	df 8a       	std	Y+23, r13	; 0x17
     bb2:	e8 8e       	std	Y+24, r14	; 0x18
     bb4:	f9 8e       	std	Y+25, r15	; 0x19
     bb6:	0a 8f       	std	Y+26, r16	; 0x1a
     bb8:	1b 8f       	std	Y+27, r17	; 0x1b
     bba:	88 89       	ldd	r24, Y+16	; 0x10
     bbc:	99 89       	ldd	r25, Y+17	; 0x11
     bbe:	aa 89       	ldd	r26, Y+18	; 0x12
     bc0:	bb 89       	ldd	r27, Y+19	; 0x13
     bc2:	bb 23       	and	r27, r27
     bc4:	0c f4       	brge	.+2      	; 0xbc8 <ElementAnimationEngine_load_to_buffer+0xc6>
     bc6:	49 c1       	rjmp	.+658    	; 0xe5a <ElementAnimationEngine_load_to_buffer+0x358>
     bc8:	8e 85       	ldd	r24, Y+14	; 0x0e
     bca:	9f 85       	ldd	r25, Y+15	; 0x0f
     bcc:	fc 01       	movw	r30, r24
     bce:	84 81       	ldd	r24, Z+4	; 0x04
     bd0:	95 81       	ldd	r25, Z+5	; 0x05
     bd2:	9c 01       	movw	r18, r24
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	88 89       	ldd	r24, Y+16	; 0x10
     bda:	99 89       	ldd	r25, Y+17	; 0x11
     bdc:	aa 89       	ldd	r26, Y+18	; 0x12
     bde:	bb 89       	ldd	r27, Y+19	; 0x13
     be0:	82 17       	cp	r24, r18
     be2:	93 07       	cpc	r25, r19
     be4:	a4 07       	cpc	r26, r20
     be6:	b5 07       	cpc	r27, r21
     be8:	0c f0       	brlt	.+2      	; 0xbec <ElementAnimationEngine_load_to_buffer+0xea>
     bea:	37 c1       	rjmp	.+622    	; 0xe5a <ElementAnimationEngine_load_to_buffer+0x358>
     bec:	8e 85       	ldd	r24, Y+14	; 0x0e
     bee:	9f 85       	ldd	r25, Y+15	; 0x0f
     bf0:	fc 01       	movw	r30, r24
     bf2:	22 81       	ldd	r18, Z+2	; 0x02
     bf4:	33 81       	ldd	r19, Z+3	; 0x03
     bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
     bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
     bfa:	fc 01       	movw	r30, r24
     bfc:	86 81       	ldd	r24, Z+6	; 0x06
     bfe:	97 81       	ldd	r25, Z+7	; 0x07
     c00:	a0 85       	ldd	r26, Z+8	; 0x08
     c02:	b1 85       	ldd	r27, Z+9	; 0x09
     c04:	bc 01       	movw	r22, r24
     c06:	48 89       	ldd	r20, Y+16	; 0x10
     c08:	59 89       	ldd	r21, Y+17	; 0x11
     c0a:	64 9f       	mul	r22, r20
     c0c:	c0 01       	movw	r24, r0
     c0e:	65 9f       	mul	r22, r21
     c10:	90 0d       	add	r25, r0
     c12:	74 9f       	mul	r23, r20
     c14:	90 0d       	add	r25, r0
     c16:	11 24       	eor	r1, r1
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	9d 8f       	std	Y+29, r25	; 0x1d
     c1e:	8c 8f       	std	Y+28, r24	; 0x1c
     c20:	1a 82       	std	Y+2, r1	; 0x02
     c22:	19 82       	std	Y+1, r1	; 0x01
     c24:	0f c1       	rjmp	.+542    	; 0xe44 <ElementAnimationEngine_load_to_buffer+0x342>
     c26:	1c 82       	std	Y+4, r1	; 0x04
     c28:	1b 82       	std	Y+3, r1	; 0x03
     c2a:	fc c0       	rjmp	.+504    	; 0xe24 <ElementAnimationEngine_load_to_buffer+0x322>
     c2c:	8e 85       	ldd	r24, Y+14	; 0x0e
     c2e:	9f 85       	ldd	r25, Y+15	; 0x0f
     c30:	fc 01       	movw	r30, r24
     c32:	24 85       	ldd	r18, Z+12	; 0x0c
     c34:	35 85       	ldd	r19, Z+13	; 0x0d
     c36:	8e 85       	ldd	r24, Y+14	; 0x0e
     c38:	9f 85       	ldd	r25, Y+15	; 0x0f
     c3a:	fc 01       	movw	r30, r24
     c3c:	42 85       	ldd	r20, Z+10	; 0x0a
     c3e:	53 85       	ldd	r21, Z+11	; 0x0b
     c40:	8e 85       	ldd	r24, Y+14	; 0x0e
     c42:	9f 85       	ldd	r25, Y+15	; 0x0f
     c44:	fc 01       	movw	r30, r24
     c46:	a2 89       	ldd	r26, Z+18	; 0x12
     c48:	eb 81       	ldd	r30, Y+3	; 0x03
     c4a:	fc 81       	ldd	r31, Y+4	; 0x04
     c4c:	69 81       	ldd	r22, Y+1	; 0x01
     c4e:	7a 81       	ldd	r23, Y+2	; 0x02
     c50:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c52:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c54:	7f 01       	movw	r14, r30
     c56:	8b 01       	movw	r16, r22
     c58:	6a 2f       	mov	r22, r26
     c5a:	0e 94 66 02 	call	0x4cc	; 0x4cc <ElementAnimationEngine_access_bits>
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	cb 01       	movw	r24, r22
     c6c:	2e 8f       	std	Y+30, r18	; 0x1e
     c6e:	3f 8f       	std	Y+31, r19	; 0x1f
     c70:	48 a3       	std	Y+32, r20	; 0x20
     c72:	59 a3       	std	Y+33, r21	; 0x21
     c74:	6a a3       	std	Y+34, r22	; 0x22
     c76:	7b a3       	std	Y+35, r23	; 0x23
     c78:	8c a3       	std	Y+36, r24	; 0x24
     c7a:	9d a3       	std	Y+37, r25	; 0x25
     c7c:	88 a9       	ldd	r24, Y+48	; 0x30
     c7e:	99 a9       	ldd	r25, Y+49	; 0x31
     c80:	fc 01       	movw	r30, r24
     c82:	27 85       	ldd	r18, Z+15	; 0x0f
     c84:	30 89       	ldd	r19, Z+16	; 0x10
     c86:	88 a9       	ldd	r24, Y+48	; 0x30
     c88:	99 a9       	ldd	r25, Y+49	; 0x31
     c8a:	fc 01       	movw	r30, r24
     c8c:	45 85       	ldd	r20, Z+13	; 0x0d
     c8e:	56 85       	ldd	r21, Z+14	; 0x0e
     c90:	88 a9       	ldd	r24, Y+48	; 0x30
     c92:	99 a9       	ldd	r25, Y+49	; 0x31
     c94:	fc 01       	movw	r30, r24
     c96:	a0 85       	ldd	r26, Z+8	; 0x08
     c98:	88 a9       	ldd	r24, Y+48	; 0x30
     c9a:	99 a9       	ldd	r25, Y+49	; 0x31
     c9c:	fc 01       	movw	r30, r24
     c9e:	83 81       	ldd	r24, Z+3	; 0x03
     ca0:	94 81       	ldd	r25, Z+4	; 0x04
     ca2:	eb 81       	ldd	r30, Y+3	; 0x03
     ca4:	fc 81       	ldd	r31, Y+4	; 0x04
     ca6:	69 81       	ldd	r22, Y+1	; 0x01
     ca8:	7a 81       	ldd	r23, Y+2	; 0x02
     caa:	7f 01       	movw	r14, r30
     cac:	8b 01       	movw	r16, r22
     cae:	6a 2f       	mov	r22, r26
     cb0:	0e 94 66 02 	call	0x4cc	; 0x4cc <ElementAnimationEngine_access_bits>
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	2e a3       	std	Y+38, r18	; 0x26
     cc4:	3f a3       	std	Y+39, r19	; 0x27
     cc6:	48 a7       	std	Y+40, r20	; 0x28
     cc8:	59 a7       	std	Y+41, r21	; 0x29
     cca:	6a a7       	std	Y+42, r22	; 0x2a
     ccc:	7b a7       	std	Y+43, r23	; 0x2b
     cce:	8c a7       	std	Y+44, r24	; 0x2c
     cd0:	9d a7       	std	Y+45, r25	; 0x2d
     cd2:	1d 82       	std	Y+5, r1	; 0x05
     cd4:	1e 82       	std	Y+6, r1	; 0x06
     cd6:	1f 82       	std	Y+7, r1	; 0x07
     cd8:	18 86       	std	Y+8, r1	; 0x08
     cda:	19 86       	std	Y+9, r1	; 0x09
     cdc:	1a 86       	std	Y+10, r1	; 0x0a
     cde:	1b 86       	std	Y+11, r1	; 0x0b
     ce0:	1c 86       	std	Y+12, r1	; 0x0c
     ce2:	2c 89       	ldd	r18, Y+20	; 0x14
     ce4:	3d 89       	ldd	r19, Y+21	; 0x15
     ce6:	4e 89       	ldd	r20, Y+22	; 0x16
     ce8:	5f 89       	ldd	r21, Y+23	; 0x17
     cea:	68 8d       	ldd	r22, Y+24	; 0x18
     cec:	79 8d       	ldd	r23, Y+25	; 0x19
     cee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cf0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cf2:	ae 8c       	ldd	r10, Y+30	; 0x1e
     cf4:	bf 8c       	ldd	r11, Y+31	; 0x1f
     cf6:	c8 a0       	ldd	r12, Y+32	; 0x20
     cf8:	d9 a0       	ldd	r13, Y+33	; 0x21
     cfa:	ea a0       	ldd	r14, Y+34	; 0x22
     cfc:	fb a0       	ldd	r15, Y+35	; 0x23
     cfe:	0c a1       	ldd	r16, Y+36	; 0x24
     d00:	1d a1       	ldd	r17, Y+37	; 0x25
     d02:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
     d06:	a2 2e       	mov	r10, r18
     d08:	b3 2e       	mov	r11, r19
     d0a:	c4 2e       	mov	r12, r20
     d0c:	d5 2e       	mov	r13, r21
     d0e:	e6 2e       	mov	r14, r22
     d10:	f7 2e       	mov	r15, r23
     d12:	08 2f       	mov	r16, r24
     d14:	19 2f       	mov	r17, r25
     d16:	2e a0       	ldd	r2, Y+38	; 0x26
     d18:	3f a0       	ldd	r3, Y+39	; 0x27
     d1a:	48 a4       	ldd	r4, Y+40	; 0x28
     d1c:	59 a4       	ldd	r5, Y+41	; 0x29
     d1e:	6a a4       	ldd	r6, Y+42	; 0x2a
     d20:	7b a4       	ldd	r7, Y+43	; 0x2b
     d22:	8c a4       	ldd	r8, Y+44	; 0x2c
     d24:	9d a4       	ldd	r9, Y+45	; 0x2d
     d26:	2a 2d       	mov	r18, r10
     d28:	3b 2d       	mov	r19, r11
     d2a:	4c 2d       	mov	r20, r12
     d2c:	5d 2d       	mov	r21, r13
     d2e:	6e 2d       	mov	r22, r14
     d30:	7f 2d       	mov	r23, r15
     d32:	80 2f       	mov	r24, r16
     d34:	91 2f       	mov	r25, r17
     d36:	a2 2c       	mov	r10, r2
     d38:	b3 2c       	mov	r11, r3
     d3a:	c4 2c       	mov	r12, r4
     d3c:	d5 2c       	mov	r13, r5
     d3e:	e6 2c       	mov	r14, r6
     d40:	f7 2c       	mov	r15, r7
     d42:	08 2d       	mov	r16, r8
     d44:	19 2d       	mov	r17, r9
     d46:	0e 94 aa 30 	call	0x6154	; 0x6154 <__cmpdi2>
     d4a:	88 f4       	brcc	.+34     	; 0xd6e <ElementAnimationEngine_load_to_buffer+0x26c>
     d4c:	8c 89       	ldd	r24, Y+20	; 0x14
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	8d 89       	ldd	r24, Y+21	; 0x15
     d52:	8e 83       	std	Y+6, r24	; 0x06
     d54:	8e 89       	ldd	r24, Y+22	; 0x16
     d56:	8f 83       	std	Y+7, r24	; 0x07
     d58:	8f 89       	ldd	r24, Y+23	; 0x17
     d5a:	88 87       	std	Y+8, r24	; 0x08
     d5c:	88 8d       	ldd	r24, Y+24	; 0x18
     d5e:	89 87       	std	Y+9, r24	; 0x09
     d60:	89 8d       	ldd	r24, Y+25	; 0x19
     d62:	8a 87       	std	Y+10, r24	; 0x0a
     d64:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d66:	8b 87       	std	Y+11, r24	; 0x0b
     d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d6a:	8c 87       	std	Y+12, r24	; 0x0c
     d6c:	22 c0       	rjmp	.+68     	; 0xdb2 <ElementAnimationEngine_load_to_buffer+0x2b0>
     d6e:	2e a1       	ldd	r18, Y+38	; 0x26
     d70:	3f a1       	ldd	r19, Y+39	; 0x27
     d72:	48 a5       	ldd	r20, Y+40	; 0x28
     d74:	59 a5       	ldd	r21, Y+41	; 0x29
     d76:	6a a5       	ldd	r22, Y+42	; 0x2a
     d78:	7b a5       	ldd	r23, Y+43	; 0x2b
     d7a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d7c:	9d a5       	ldd	r25, Y+45	; 0x2d
     d7e:	ae 8c       	ldd	r10, Y+30	; 0x1e
     d80:	bf 8c       	ldd	r11, Y+31	; 0x1f
     d82:	c8 a0       	ldd	r12, Y+32	; 0x20
     d84:	d9 a0       	ldd	r13, Y+33	; 0x21
     d86:	ea a0       	ldd	r14, Y+34	; 0x22
     d88:	fb a0       	ldd	r15, Y+35	; 0x23
     d8a:	0c a1       	ldd	r16, Y+36	; 0x24
     d8c:	1d a1       	ldd	r17, Y+37	; 0x25
     d8e:	0e 94 8c 30 	call	0x6118	; 0x6118 <__adddi3>
     d92:	a2 2e       	mov	r10, r18
     d94:	b3 2e       	mov	r11, r19
     d96:	c4 2e       	mov	r12, r20
     d98:	d5 2e       	mov	r13, r21
     d9a:	e6 2e       	mov	r14, r22
     d9c:	f7 2e       	mov	r15, r23
     d9e:	08 2f       	mov	r16, r24
     da0:	19 2f       	mov	r17, r25
     da2:	ad 82       	std	Y+5, r10	; 0x05
     da4:	be 82       	std	Y+6, r11	; 0x06
     da6:	cf 82       	std	Y+7, r12	; 0x07
     da8:	d8 86       	std	Y+8, r13	; 0x08
     daa:	e9 86       	std	Y+9, r14	; 0x09
     dac:	fa 86       	std	Y+10, r15	; 0x0a
     dae:	0b 87       	std	Y+11, r16	; 0x0b
     db0:	1c 87       	std	Y+12, r17	; 0x0c
     db2:	88 a9       	ldd	r24, Y+48	; 0x30
     db4:	99 a9       	ldd	r25, Y+49	; 0x31
     db6:	fc 01       	movw	r30, r24
     db8:	27 85       	ldd	r18, Z+15	; 0x0f
     dba:	30 89       	ldd	r19, Z+16	; 0x10
     dbc:	88 a9       	ldd	r24, Y+48	; 0x30
     dbe:	99 a9       	ldd	r25, Y+49	; 0x31
     dc0:	fc 01       	movw	r30, r24
     dc2:	45 85       	ldd	r20, Z+13	; 0x0d
     dc4:	56 85       	ldd	r21, Z+14	; 0x0e
     dc6:	88 a9       	ldd	r24, Y+48	; 0x30
     dc8:	99 a9       	ldd	r25, Y+49	; 0x31
     dca:	fc 01       	movw	r30, r24
     dcc:	b0 85       	ldd	r27, Z+8	; 0x08
     dce:	88 a9       	ldd	r24, Y+48	; 0x30
     dd0:	99 a9       	ldd	r25, Y+49	; 0x31
     dd2:	fc 01       	movw	r30, r24
     dd4:	83 81       	ldd	r24, Z+3	; 0x03
     dd6:	94 81       	ldd	r25, Z+4	; 0x04
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	69 81       	ldd	r22, Y+1	; 0x01
     dde:	7a 81       	ldd	r23, Y+2	; 0x02
     de0:	ac 85       	ldd	r26, Y+12	; 0x0c
     de2:	af 93       	push	r26
     de4:	ab 85       	ldd	r26, Y+11	; 0x0b
     de6:	af 93       	push	r26
     de8:	aa 85       	ldd	r26, Y+10	; 0x0a
     dea:	af 93       	push	r26
     dec:	a9 85       	ldd	r26, Y+9	; 0x09
     dee:	af 93       	push	r26
     df0:	a8 85       	ldd	r26, Y+8	; 0x08
     df2:	af 93       	push	r26
     df4:	af 81       	ldd	r26, Y+7	; 0x07
     df6:	af 93       	push	r26
     df8:	ae 81       	ldd	r26, Y+6	; 0x06
     dfa:	af 93       	push	r26
     dfc:	ad 81       	ldd	r26, Y+5	; 0x05
     dfe:	af 93       	push	r26
     e00:	7f 01       	movw	r14, r30
     e02:	8b 01       	movw	r16, r22
     e04:	6b 2f       	mov	r22, r27
     e06:	0e 94 5f 04 	call	0x8be	; 0x8be <ElementAnimationEngine_write_bits>
     e0a:	8d b7       	in	r24, 0x3d	; 61
     e0c:	9e b7       	in	r25, 0x3e	; 62
     e0e:	08 96       	adiw	r24, 0x08	; 8
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	8e 85       	ldd	r24, Y+14	; 0x0e
     e26:	9f 85       	ldd	r25, Y+15	; 0x0f
     e28:	fc 01       	movw	r30, r24
     e2a:	24 85       	ldd	r18, Z+12	; 0x0c
     e2c:	35 85       	ldd	r19, Z+13	; 0x0d
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	08 f4       	brcc	.+2      	; 0xe3a <ElementAnimationEngine_load_to_buffer+0x338>
     e38:	f9 ce       	rjmp	.-526    	; 0xc2c <ElementAnimationEngine_load_to_buffer+0x12a>
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	8e 85       	ldd	r24, Y+14	; 0x0e
     e46:	9f 85       	ldd	r25, Y+15	; 0x0f
     e48:	fc 01       	movw	r30, r24
     e4a:	22 85       	ldd	r18, Z+10	; 0x0a
     e4c:	33 85       	ldd	r19, Z+11	; 0x0b
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	82 17       	cp	r24, r18
     e54:	93 07       	cpc	r25, r19
     e56:	08 f4       	brcc	.+2      	; 0xe5a <ElementAnimationEngine_load_to_buffer+0x358>
     e58:	e6 ce       	rjmp	.-564    	; 0xc26 <ElementAnimationEngine_load_to_buffer+0x124>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	e1 96       	adiw	r28, 0x31	; 49
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	5f 90       	pop	r5
     e86:	4f 90       	pop	r4
     e88:	3f 90       	pop	r3
     e8a:	2f 90       	pop	r2
     e8c:	08 95       	ret

00000e8e <ElementAnimationEngine_add_buffer>:
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	00 d0       	rcall	.+0      	; 0xe94 <ElementAnimationEngine_add_buffer+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ea0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ea4:	98 17       	cp	r25, r24
     ea6:	78 f5       	brcc	.+94     	; 0xf06 <ElementAnimationEngine_add_buffer+0x78>
     ea8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	98 0f       	add	r25, r24
     eb0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	80 50       	subi	r24, 0x00	; 0
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	29 81       	ldd	r18, Y+1	; 0x01
     ec4:	3a 81       	ldd	r19, Y+2	; 0x02
     ec6:	fc 01       	movw	r30, r24
     ec8:	31 83       	std	Z+1, r19	; 0x01
     eca:	20 83       	st	Z, r18
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	fc 01       	movw	r30, r24
     ed2:	21 81       	ldd	r18, Z+1	; 0x01
     ed4:	32 81       	ldd	r19, Z+2	; 0x02
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	fc 01       	movw	r30, r24
     edc:	36 83       	std	Z+6, r19	; 0x06
     ede:	25 83       	std	Z+5, r18	; 0x05
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	fc 01       	movw	r30, r24
     ee6:	21 81       	ldd	r18, Z+1	; 0x01
     ee8:	32 81       	ldd	r19, Z+2	; 0x02
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	fc 01       	movw	r30, r24
     ef0:	81 85       	ldd	r24, Z+9	; 0x09
     ef2:	92 85       	ldd	r25, Z+10	; 0x0a
     ef4:	a3 85       	ldd	r26, Z+11	; 0x0b
     ef6:	b4 85       	ldd	r27, Z+12	; 0x0c
     ef8:	28 0f       	add	r18, r24
     efa:	39 1f       	adc	r19, r25
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	fc 01       	movw	r30, r24
     f02:	34 83       	std	Z+4, r19	; 0x04
     f04:	23 83       	std	Z+3, r18	; 0x03
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <ElementAnimationEngine_push_animation>:
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <ElementAnimationEngine_push_animation+0x6>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <ElementAnimationEngine_push_animation+0x8>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	7c 83       	std	Y+4, r23	; 0x04
     f24:	6b 83       	std	Y+3, r22	; 0x03
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	fc 01       	movw	r30, r24
     f2c:	83 8d       	ldd	r24, Z+27	; 0x1b
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	c0 f4       	brcc	.+48     	; 0xf62 <ElementAnimationEngine_push_animation+0x50>
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	23 8d       	ldd	r18, Z+27	; 0x1b
     f3a:	31 e0       	ldi	r19, 0x01	; 1
     f3c:	32 0f       	add	r19, r18
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	fc 01       	movw	r30, r24
     f44:	33 8f       	std	Z+27, r19	; 0x1b
     f46:	82 2f       	mov	r24, r18
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	29 81       	ldd	r18, Y+1	; 0x01
     f4c:	3a 81       	ldd	r19, Y+2	; 0x02
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	41 96       	adiw	r24, 0x11	; 17
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	fc 01       	movw	r30, r24
     f5e:	31 83       	std	Z+1, r19	; 0x01
     f60:	20 83       	st	Z, r18
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <ElementAnimationEngine_remove_animation>:

// Removes a specific animation from the stack.
enum ElementAnimationEngineStatus ElementAnimationEngine_remove_animation(ElementAnimationBufferConfigStruct * buffer, uint8_t animation_id)
{
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	00 d0       	rcall	.+0      	; 0xf78 <ElementAnimationEngine_remove_animation+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <ElementAnimationEngine_remove_animation+0x8>
     f7a:	1f 92       	push	r1
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	6d 83       	std	Y+5, r22	; 0x05
	
	for(uint8_t i = 0, j = 0; i < buffer->current_animation_size - 1; i ++, j++)
     f86:	19 82       	std	Y+1, r1	; 0x01
     f88:	1a 82       	std	Y+2, r1	; 0x02
     f8a:	36 c0       	rjmp	.+108    	; 0xff8 <ElementAnimationEngine_remove_animation+0x86>
	{
		
		if(buffer->current_animations[i]->animation_id == animation_id)
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	2b 81       	ldd	r18, Y+3	; 0x03
     f94:	3c 81       	ldd	r19, Y+4	; 0x04
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	41 96       	adiw	r24, 0x11	; 17
     fa0:	fc 01       	movw	r30, r24
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	fc 01       	movw	r30, r24
     fa8:	90 81       	ld	r25, Z
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	98 17       	cp	r25, r24
     fae:	19 f4       	brne	.+6      	; 0xfb6 <ElementAnimationEngine_remove_animation+0x44>
		{
			j ++;
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		buffer->current_animations[i] = buffer->current_animations[j];
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	2a 81       	ldd	r18, Y+2	; 0x02
     fbe:	22 2f       	mov	r18, r18
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4b 81       	ldd	r20, Y+3	; 0x03
     fc4:	5c 81       	ldd	r21, Y+4	; 0x04
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	24 0f       	add	r18, r20
     fcc:	35 1f       	adc	r19, r21
     fce:	2f 5e       	subi	r18, 0xEF	; 239
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	f9 01       	movw	r30, r18
     fd4:	20 81       	ld	r18, Z
     fd6:	31 81       	ldd	r19, Z+1	; 0x01
     fd8:	4b 81       	ldd	r20, Y+3	; 0x03
     fda:	5c 81       	ldd	r21, Y+4	; 0x04
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	84 0f       	add	r24, r20
     fe2:	95 1f       	adc	r25, r21
     fe4:	41 96       	adiw	r24, 0x11	; 17
     fe6:	fc 01       	movw	r30, r24
     fe8:	31 83       	std	Z+1, r19	; 0x01
     fea:	20 83       	st	Z, r18

// Removes a specific animation from the stack.
enum ElementAnimationEngineStatus ElementAnimationEngine_remove_animation(ElementAnimationBufferConfigStruct * buffer, uint8_t animation_id)
{
	
	for(uint8_t i = 0, j = 0; i < buffer->current_animation_size - 1; i ++, j++)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	fc 01       	movw	r30, r24
    1004:	83 8d       	ldd	r24, Z+27	; 0x1b
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	28 17       	cp	r18, r24
    100e:	39 07       	cpc	r19, r25
    1010:	0c f4       	brge	.+2      	; 0x1014 <ElementAnimationEngine_remove_animation+0xa2>
    1012:	bc cf       	rjmp	.-136    	; 0xf8c <ElementAnimationEngine_remove_animation+0x1a>
		
		buffer->current_animations[i] = buffer->current_animations[j];
				
	}
	
	if(	buffer->current_animation_size != 0)
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	fc 01       	movw	r30, r24
    101a:	83 8d       	ldd	r24, Z+27	; 0x1b
    101c:	88 23       	and	r24, r24
    101e:	51 f0       	breq	.+20     	; 0x1034 <ElementAnimationEngine_remove_animation+0xc2>
		buffer->current_animation_size --;
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	fc 01       	movw	r30, r24
    1026:	83 8d       	ldd	r24, Z+27	; 0x1b
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	28 0f       	add	r18, r24
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	fc 01       	movw	r30, r24
    1032:	23 8f       	std	Z+27, r18	; 0x1b
	
	return Animation_Engine_Success;
    1034:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <ElementAnimationEngine_remove_all_animations>:

// Removes every animation from the stack.
enum ElementAnimationEngineStatus ElementAnimationEngine_remove_all_animations(ElementAnimationBufferConfigStruct * buffer)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	00 d0       	rcall	.+0      	; 0x104c <ElementAnimationEngine_remove_all_animations+0x6>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	9a 83       	std	Y+2, r25	; 0x02
    1052:	89 83       	std	Y+1, r24	; 0x01
	
	buffer->current_animation_size = 0;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	fc 01       	movw	r30, r24
    105a:	13 8e       	std	Z+27, r1	; 0x1b
	
	return Animation_Engine_Success;
    105c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <ElementAnimationEngine_update>:


// This will update every animation buffer that has been registered, then flip buffers.
enum ElementAnimationEngineStatus ElementAnimationEngine_update()
{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	28 97       	sbiw	r28, 0x08	; 8
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
	//		3b. Extract the correct bits from the frame
	//		3c. Add the bits to the buffer bits then integrate back into buffer.	
	//		3c. Repeat for next animation. 
	// 4. Repeat with next buffer.
	
	for(uint8_t buf = 0; buf < animation_engine_config.current_animation_buffers; buf++)
    107c:	19 82       	std	Y+1, r1	; 0x01
    107e:	80 c0       	rjmp	.+256    	; 0x1180 <ElementAnimationEngine_update+0x118>
	{
		
		ElementAnimationBufferConfigStruct * buffer_ptr = animation_engine_config.animation_buffers[buf];
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	80 50       	subi	r24, 0x00	; 0
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
    1090:	fc 01       	movw	r30, r24
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	9d 83       	std	Y+5, r25	; 0x05
    1098:	8c 83       	std	Y+4, r24	; 0x04
		
		for(uint8_t cur_anim = 0; cur_anim < buffer_ptr->current_animation_size; cur_anim++)
    109a:	1a 82       	std	Y+2, r1	; 0x02
    109c:	2d c0       	rjmp	.+90     	; 0x10f8 <ElementAnimationEngine_update+0x90>
		{
			
			enum ElementAnimationEngineStatus status = ElementAnimationEngine_load_to_buffer(buffer_ptr->current_animations[cur_anim], buffer_ptr);  //ERROR HERE AFTER FINAL ANIMATION HAS BEEN PUSHED
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	41 96       	adiw	r24, 0x11	; 17
    10b2:	fc 01       	movw	r30, r24
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ba:	3d 81       	ldd	r19, Y+5	; 0x05
    10bc:	b9 01       	movw	r22, r18
    10be:	0e 94 81 05 	call	0xb02	; 0xb02 <ElementAnimationEngine_load_to_buffer>
    10c2:	8e 83       	std	Y+6, r24	; 0x06
			
	
		
			if(status == Animation_Engine_Animation_Complete)
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	84 30       	cpi	r24, 0x04	; 4
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <ElementAnimationEngine_update+0x8a>
			{
				// We need to pop this one off the stack.
				ElementAnimationEngine_remove_animation(buffer_ptr, buffer_ptr->current_animations[cur_anim]->animation_id);
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	82 0f       	add	r24, r18
    10da:	93 1f       	adc	r25, r19
    10dc:	41 96       	adiw	r24, 0x11	; 17
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 81       	ld	r18, Z
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	62 2f       	mov	r22, r18
    10ee:	0e 94 b9 07 	call	0xf72	; 0xf72 <ElementAnimationEngine_remove_animation>
	for(uint8_t buf = 0; buf < animation_engine_config.current_animation_buffers; buf++)
	{
		
		ElementAnimationBufferConfigStruct * buffer_ptr = animation_engine_config.animation_buffers[buf];
		
		for(uint8_t cur_anim = 0; cur_anim < buffer_ptr->current_animation_size; cur_anim++)
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	fc 01       	movw	r30, r24
    10fe:	93 8d       	ldd	r25, Z+27	; 0x1b
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	89 17       	cp	r24, r25
    1104:	60 f2       	brcs	.-104    	; 0x109e <ElementAnimationEngine_update+0x36>
				// We need to pop this one off the stack.
				ElementAnimationEngine_remove_animation(buffer_ptr, buffer_ptr->current_animations[cur_anim]->animation_id);
			}
		}
		
		uint8_t * swap = buffer_ptr->write_buffer;
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	fc 01       	movw	r30, r24
    110c:	83 81       	ldd	r24, Z+3	; 0x03
    110e:	94 81       	ldd	r25, Z+4	; 0x04
    1110:	98 87       	std	Y+8, r25	; 0x08
    1112:	8f 83       	std	Y+7, r24	; 0x07
		
		buffer_ptr->write_buffer = buffer_ptr->read_buffer;
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	fc 01       	movw	r30, r24
    111a:	25 81       	ldd	r18, Z+5	; 0x05
    111c:	36 81       	ldd	r19, Z+6	; 0x06
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	fc 01       	movw	r30, r24
    1124:	34 83       	std	Z+4, r19	; 0x04
    1126:	23 83       	std	Z+3, r18	; 0x03
		
		buffer_ptr->read_buffer = swap;
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	9d 81       	ldd	r25, Y+5	; 0x05
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
    112e:	38 85       	ldd	r19, Y+8	; 0x08
    1130:	fc 01       	movw	r30, r24
    1132:	36 83       	std	Z+6, r19	; 0x06
    1134:	25 83       	std	Z+5, r18	; 0x05
	
		// Clear the write buffer.
		for(uint8_t i = 0; i < buffer_ptr->buffer_size; i++)
    1136:	1b 82       	std	Y+3, r1	; 0x03
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <ElementAnimationEngine_update+0xf0>
		{
			buffer_ptr->write_buffer[i] = 0x0;
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	fc 01       	movw	r30, r24
    1140:	23 81       	ldd	r18, Z+3	; 0x03
    1142:	34 81       	ldd	r19, Z+4	; 0x04
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	82 0f       	add	r24, r18
    114c:	93 1f       	adc	r25, r19
    114e:	fc 01       	movw	r30, r24
    1150:	10 82       	st	Z, r1
		buffer_ptr->write_buffer = buffer_ptr->read_buffer;
		
		buffer_ptr->read_buffer = swap;
	
		// Clear the write buffer.
		for(uint8_t i = 0; i < buffer_ptr->buffer_size; i++)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	fc 01       	movw	r30, r24
    1168:	81 85       	ldd	r24, Z+9	; 0x09
    116a:	92 85       	ldd	r25, Z+10	; 0x0a
    116c:	a3 85       	ldd	r26, Z+11	; 0x0b
    116e:	b4 85       	ldd	r27, Z+12	; 0x0c
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	4a 07       	cpc	r20, r26
    1176:	5b 07       	cpc	r21, r27
    1178:	00 f3       	brcs	.-64     	; 0x113a <ElementAnimationEngine_update+0xd2>
	//		3b. Extract the correct bits from the frame
	//		3c. Add the bits to the buffer bits then integrate back into buffer.	
	//		3c. Repeat for next animation. 
	// 4. Repeat with next buffer.
	
	for(uint8_t buf = 0; buf < animation_engine_config.current_animation_buffers; buf++)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	89 17       	cp	r24, r25
    1188:	08 f4       	brcc	.+2      	; 0x118c <ElementAnimationEngine_update+0x124>
    118a:	7a cf       	rjmp	.-268    	; 0x1080 <ElementAnimationEngine_update+0x18>
		}
			
	
	}
	
}
    118c:	00 00       	nop
    118e:	28 96       	adiw	r28, 0x08	; 8
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <MorphUtils_empty_callback>:
		//
		//// We have an index. 
		//
	//}

}
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	00 00       	nop
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <find_button_id>:
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <find_button_id+0x6>
    11b6:	1f 92       	push	r1
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	1a 82       	std	Y+2, r1	; 0x02
    11c4:	1c c0       	rjmp	.+56     	; 0x11fe <find_button_id+0x4e>
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	42 e2       	ldi	r20, 0x22	; 34
    11ce:	42 9f       	mul	r20, r18
    11d0:	c0 01       	movw	r24, r0
    11d2:	43 9f       	mul	r20, r19
    11d4:	90 0d       	add	r25, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	8a 5e       	subi	r24, 0xEA	; 234
    11da:	9c 4f       	sbci	r25, 0xFC	; 252
    11dc:	fc 01       	movw	r30, r24
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	88 0f       	add	r24, r24
    11e4:	33 0b       	sbc	r19, r19
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	19 f4       	brne	.+6      	; 0x11f8 <find_button_id+0x48>
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <find_button_id+0x5a>
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	0e 94 30 0c 	call	0x1860	; 0x1860 <ElementDirectButton_get_count>
    1202:	98 2f       	mov	r25, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	89 17       	cp	r24, r25
    1208:	f0 f2       	brcs	.-68     	; 0x11c6 <find_button_id+0x16>
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <clear_button_config>:
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	00 d0       	rcall	.+0      	; 0x121e <clear_button_config+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	fc 01       	movw	r30, r24
    122c:	10 82       	st	Z, r1
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	2f ef       	ldi	r18, 0xFF	; 255
    1234:	fc 01       	movw	r30, r24
    1236:	21 83       	std	Z+1, r18	; 0x01
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	fc 01       	movw	r30, r24
    123e:	12 82       	std	Z+2, r1	; 0x02
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	fc 01       	movw	r30, r24
    1246:	13 82       	std	Z+3, r1	; 0x03
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	14 82       	std	Z+4, r1	; 0x04
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	fc 01       	movw	r30, r24
    1256:	15 82       	std	Z+5, r1	; 0x05
    1258:	fc 01       	movw	r30, r24
    125a:	16 82       	std	Z+6, r1	; 0x06
    125c:	fc 01       	movw	r30, r24
    125e:	17 82       	std	Z+7, r1	; 0x07
    1260:	fc 01       	movw	r30, r24
    1262:	10 86       	std	Z+8, r1	; 0x08
    1264:	fc 01       	movw	r30, r24
    1266:	11 86       	std	Z+9, r1	; 0x09
    1268:	fc 01       	movw	r30, r24
    126a:	12 86       	std	Z+10, r1	; 0x0a
    126c:	fc 01       	movw	r30, r24
    126e:	13 86       	std	Z+11, r1	; 0x0b
    1270:	fc 01       	movw	r30, r24
    1272:	14 86       	std	Z+12, r1	; 0x0c
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	fc 01       	movw	r30, r24
    127a:	15 86       	std	Z+13, r1	; 0x0d
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	20 ed       	ldi	r18, 0xD0	; 208
    1282:	38 e0       	ldi	r19, 0x08	; 8
    1284:	fc 01       	movw	r30, r24
    1286:	37 87       	std	Z+15, r19	; 0x0f
    1288:	26 87       	std	Z+14, r18	; 0x0e
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	fc 01       	movw	r30, r24
    1290:	10 8a       	std	Z+16, r1	; 0x10
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	fc 01       	movw	r30, r24
    1298:	11 8a       	std	Z+17, r1	; 0x11
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	20 ed       	ldi	r18, 0xD0	; 208
    12a0:	38 e0       	ldi	r19, 0x08	; 8
    12a2:	fc 01       	movw	r30, r24
    12a4:	33 8b       	std	Z+19, r19	; 0x13
    12a6:	22 8b       	std	Z+18, r18	; 0x12
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	fc 01       	movw	r30, r24
    12ae:	14 8a       	std	Z+20, r1	; 0x14
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	fc 01       	movw	r30, r24
    12b6:	15 8a       	std	Z+21, r1	; 0x15
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	20 ed       	ldi	r18, 0xD0	; 208
    12be:	38 e0       	ldi	r19, 0x08	; 8
    12c0:	fc 01       	movw	r30, r24
    12c2:	37 8b       	std	Z+23, r19	; 0x17
    12c4:	26 8b       	std	Z+22, r18	; 0x16
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	fc 01       	movw	r30, r24
    12cc:	10 8e       	std	Z+24, r1	; 0x18
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	fc 01       	movw	r30, r24
    12d4:	11 8e       	std	Z+25, r1	; 0x19
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	20 ed       	ldi	r18, 0xD0	; 208
    12dc:	38 e0       	ldi	r19, 0x08	; 8
    12de:	fc 01       	movw	r30, r24
    12e0:	33 8f       	std	Z+27, r19	; 0x1b
    12e2:	22 8f       	std	Z+26, r18	; 0x1a
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	fc 01       	movw	r30, r24
    12ea:	14 8e       	std	Z+28, r1	; 0x1c
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	fc 01       	movw	r30, r24
    12f2:	15 8e       	std	Z+29, r1	; 0x1d
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	20 ed       	ldi	r18, 0xD0	; 208
    12fa:	38 e0       	ldi	r19, 0x08	; 8
    12fc:	fc 01       	movw	r30, r24
    12fe:	37 8f       	std	Z+31, r19	; 0x1f
    1300:	26 8f       	std	Z+30, r18	; 0x1e
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	fc 01       	movw	r30, r24
    1308:	10 a2       	std	Z+32, r1	; 0x20
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	fc 01       	movw	r30, r24
    1310:	11 a2       	std	Z+33, r1	; 0x21
    1312:	00 00       	nop
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <ElementDirectButton_init>:
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	a3 97       	sbiw	r28, 0x23	; 35
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	19 82       	std	Y+1, r1	; 0x01
    1334:	28 c0       	rjmp	.+80     	; 0x1386 <ElementDirectButton_init+0x68>
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	42 e2       	ldi	r20, 0x22	; 34
    133e:	42 9f       	mul	r20, r18
    1340:	c0 01       	movw	r24, r0
    1342:	43 9f       	mul	r20, r19
    1344:	90 0d       	add	r25, r0
    1346:	11 24       	eor	r1, r1
    1348:	8b 5e       	subi	r24, 0xEB	; 235
    134a:	9c 4f       	sbci	r25, 0xFC	; 252
    134c:	22 e2       	ldi	r18, 0x22	; 34
    134e:	fc 01       	movw	r30, r24
    1350:	de 01       	movw	r26, r28
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	01 90       	ld	r0, Z+
    1356:	0d 92       	st	X+, r0
    1358:	2a 95       	dec	r18
    135a:	e1 f7       	brne	.-8      	; 0x1354 <ElementDirectButton_init+0x36>
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	08 2e       	mov	r0, r24
    1360:	00 0c       	add	r0, r0
    1362:	99 0b       	sbc	r25, r25
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 1b 2c 	call	0x5836	; 0x5836 <MorphGPIO_set_pin_direction>
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	08 2e       	mov	r0, r24
    1376:	00 0c       	add	r0, r0
    1378:	99 0b       	sbc	r25, r25
    137a:	b9 01       	movw	r22, r18
    137c:	0e 94 30 2c 	call	0x5860	; 0x5860 <MorphGPIO_set_pin_pull_state>
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	0e 94 30 0c 	call	0x1860	; 0x1860 <ElementDirectButton_get_count>
    138a:	98 2f       	mov	r25, r24
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	89 17       	cp	r24, r25
    1390:	90 f2       	brcs	.-92     	; 0x1336 <ElementDirectButton_init+0x18>
    1392:	00 00       	nop
    1394:	a3 96       	adiw	r28, 0x23	; 35
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <ElementDirectButton_update>:
    13a6:	2f 92       	push	r2
    13a8:	3f 92       	push	r3
    13aa:	4f 92       	push	r4
    13ac:	5f 92       	push	r5
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	65 97       	sbiw	r28, 0x15	; 21
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	19 82       	std	Y+1, r1	; 0x01
    13dc:	b8 c1       	rjmp	.+880    	; 0x174e <ElementDirectButton_update+0x3a8>
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	42 e2       	ldi	r20, 0x22	; 34
    13e6:	42 9f       	mul	r20, r18
    13e8:	c0 01       	movw	r24, r0
    13ea:	43 9f       	mul	r20, r19
    13ec:	90 0d       	add	r25, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	8c 5e       	subi	r24, 0xEC	; 236
    13f4:	9c 4f       	sbci	r25, 0xFC	; 252
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	fc 01       	movw	r30, r24
    1400:	80 81       	ld	r24, Z
    1402:	8c 83       	std	Y+4, r24	; 0x04
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	08 2e       	mov	r0, r24
    1408:	00 0c       	add	r0, r0
    140a:	99 0b       	sbc	r25, r25
    140c:	0e 94 0a 2c 	call	0x5814	; 0x5814 <MorphGPIO_get_pin_value>
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    1416:	a2 2e       	mov	r10, r18
    1418:	b3 2e       	mov	r11, r19
    141a:	c4 2e       	mov	r12, r20
    141c:	d5 2e       	mov	r13, r21
    141e:	e6 2e       	mov	r14, r22
    1420:	f7 2e       	mov	r15, r23
    1422:	08 2f       	mov	r16, r24
    1424:	19 2f       	mov	r17, r25
    1426:	ae 82       	std	Y+6, r10	; 0x06
    1428:	bf 82       	std	Y+7, r11	; 0x07
    142a:	c8 86       	std	Y+8, r12	; 0x08
    142c:	d9 86       	std	Y+9, r13	; 0x09
    142e:	ea 86       	std	Y+10, r14	; 0x0a
    1430:	fb 86       	std	Y+11, r15	; 0x0b
    1432:	0c 87       	std	Y+12, r16	; 0x0c
    1434:	1d 87       	std	Y+13, r17	; 0x0d
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	fc 01       	movw	r30, r24
    143c:	25 80       	ldd	r2, Z+5	; 0x05
    143e:	fc 01       	movw	r30, r24
    1440:	36 80       	ldd	r3, Z+6	; 0x06
    1442:	fc 01       	movw	r30, r24
    1444:	47 80       	ldd	r4, Z+7	; 0x07
    1446:	fc 01       	movw	r30, r24
    1448:	50 84       	ldd	r5, Z+8	; 0x08
    144a:	fc 01       	movw	r30, r24
    144c:	61 84       	ldd	r6, Z+9	; 0x09
    144e:	fc 01       	movw	r30, r24
    1450:	72 84       	ldd	r7, Z+10	; 0x0a
    1452:	fc 01       	movw	r30, r24
    1454:	83 84       	ldd	r8, Z+11	; 0x0b
    1456:	fc 01       	movw	r30, r24
    1458:	94 84       	ldd	r9, Z+12	; 0x0c
    145a:	2e 81       	ldd	r18, Y+6	; 0x06
    145c:	3f 81       	ldd	r19, Y+7	; 0x07
    145e:	48 85       	ldd	r20, Y+8	; 0x08
    1460:	59 85       	ldd	r21, Y+9	; 0x09
    1462:	6a 85       	ldd	r22, Y+10	; 0x0a
    1464:	7b 85       	ldd	r23, Y+11	; 0x0b
    1466:	8c 85       	ldd	r24, Y+12	; 0x0c
    1468:	9d 85       	ldd	r25, Y+13	; 0x0d
    146a:	a2 2c       	mov	r10, r2
    146c:	b3 2c       	mov	r11, r3
    146e:	c4 2c       	mov	r12, r4
    1470:	d5 2c       	mov	r13, r5
    1472:	e6 2c       	mov	r14, r6
    1474:	f7 2c       	mov	r15, r7
    1476:	08 2d       	mov	r16, r8
    1478:	19 2d       	mov	r17, r9
    147a:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
    147e:	a2 2e       	mov	r10, r18
    1480:	b3 2e       	mov	r11, r19
    1482:	c4 2e       	mov	r12, r20
    1484:	d5 2e       	mov	r13, r21
    1486:	e6 2e       	mov	r14, r22
    1488:	f7 2e       	mov	r15, r23
    148a:	08 2f       	mov	r16, r24
    148c:	19 2f       	mov	r17, r25
    148e:	ae 86       	std	Y+14, r10	; 0x0e
    1490:	bf 86       	std	Y+15, r11	; 0x0f
    1492:	c8 8a       	std	Y+16, r12	; 0x10
    1494:	d9 8a       	std	Y+17, r13	; 0x11
    1496:	ea 8a       	std	Y+18, r14	; 0x12
    1498:	fb 8a       	std	Y+19, r15	; 0x13
    149a:	0c 8b       	std	Y+20, r16	; 0x14
    149c:	1d 8b       	std	Y+21, r17	; 0x15
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	fc 01       	movw	r30, r24
    14a4:	84 81       	ldd	r24, Z+4	; 0x04
    14a6:	88 23       	and	r24, r24
    14a8:	09 f4       	brne	.+2      	; 0x14ac <ElementDirectButton_update+0x106>
    14aa:	a7 c0       	rjmp	.+334    	; 0x15fa <ElementDirectButton_update+0x254>
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	fc 01       	movw	r30, r24
    14b2:	92 81       	ldd	r25, Z+2	; 0x02
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	98 17       	cp	r25, r24
    14b8:	d1 f5       	brne	.+116    	; 0x152e <ElementDirectButton_update+0x188>
    14ba:	ae 84       	ldd	r10, Y+14	; 0x0e
    14bc:	bf 84       	ldd	r11, Y+15	; 0x0f
    14be:	c8 88       	ldd	r12, Y+16	; 0x10
    14c0:	d9 88       	ldd	r13, Y+17	; 0x11
    14c2:	ea 88       	ldd	r14, Y+18	; 0x12
    14c4:	fb 88       	ldd	r15, Y+19	; 0x13
    14c6:	0c 89       	ldd	r16, Y+20	; 0x14
    14c8:	1d 89       	ldd	r17, Y+21	; 0x15
    14ca:	2a 2d       	mov	r18, r10
    14cc:	3b 2d       	mov	r19, r11
    14ce:	4c 2d       	mov	r20, r12
    14d0:	5d 2d       	mov	r21, r13
    14d2:	6e 2d       	mov	r22, r14
    14d4:	7f 2d       	mov	r23, r15
    14d6:	80 2f       	mov	r24, r16
    14d8:	91 2f       	mov	r25, r17
    14da:	aa e0       	ldi	r26, 0x0A	; 10
    14dc:	0e 94 b3 30 	call	0x6166	; 0x6166 <__cmpdi2_s8>
    14e0:	09 f1       	breq	.+66     	; 0x1524 <ElementDirectButton_update+0x17e>
    14e2:	04 f1       	brlt	.+64     	; 0x1524 <ElementDirectButton_update+0x17e>
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	9b 81       	ldd	r25, Y+3	; 0x03
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	fc 01       	movw	r30, r24
    14ec:	25 87       	std	Z+13, r18	; 0x0d
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	fc 01       	movw	r30, r24
    14f4:	91 89       	ldd	r25, Z+17	; 0x11
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 27       	eor	r24, r25
    14fa:	88 23       	and	r24, r24
    14fc:	69 f0       	breq	.+26     	; 0x1518 <ElementDirectButton_update+0x172>
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	9b 81       	ldd	r25, Y+3	; 0x03
    1502:	fc 01       	movw	r30, r24
    1504:	80 89       	ldd	r24, Z+16	; 0x10
    1506:	88 23       	and	r24, r24
    1508:	39 f0       	breq	.+14     	; 0x1518 <ElementDirectButton_update+0x172>
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	fc 01       	movw	r30, r24
    1510:	86 85       	ldd	r24, Z+14	; 0x0e
    1512:	97 85       	ldd	r25, Z+15	; 0x0f
    1514:	fc 01       	movw	r30, r24
    1516:	09 95       	icall
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	fc 01       	movw	r30, r24
    1520:	21 8b       	std	Z+17, r18	; 0x11
    1522:	93 c0       	rjmp	.+294    	; 0x164a <ElementDirectButton_update+0x2a4>
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	fc 01       	movw	r30, r24
    152a:	15 86       	std	Z+13, r1	; 0x0d
    152c:	8e c0       	rjmp	.+284    	; 0x164a <ElementDirectButton_update+0x2a4>
    152e:	ae 84       	ldd	r10, Y+14	; 0x0e
    1530:	bf 84       	ldd	r11, Y+15	; 0x0f
    1532:	c8 88       	ldd	r12, Y+16	; 0x10
    1534:	d9 88       	ldd	r13, Y+17	; 0x11
    1536:	ea 88       	ldd	r14, Y+18	; 0x12
    1538:	fb 88       	ldd	r15, Y+19	; 0x13
    153a:	0c 89       	ldd	r16, Y+20	; 0x14
    153c:	1d 89       	ldd	r17, Y+21	; 0x15
    153e:	2a 2d       	mov	r18, r10
    1540:	3b 2d       	mov	r19, r11
    1542:	4c 2d       	mov	r20, r12
    1544:	5d 2d       	mov	r21, r13
    1546:	6e 2d       	mov	r22, r14
    1548:	7f 2d       	mov	r23, r15
    154a:	80 2f       	mov	r24, r16
    154c:	91 2f       	mov	r25, r17
    154e:	aa e0       	ldi	r26, 0x0A	; 10
    1550:	0e 94 b3 30 	call	0x6166	; 0x6166 <__cmpdi2_s8>
    1554:	a9 f1       	breq	.+106    	; 0x15c0 <ElementDirectButton_update+0x21a>
    1556:	a4 f1       	brlt	.+104    	; 0x15c0 <ElementDirectButton_update+0x21a>
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	fc 01       	movw	r30, r24
    155e:	84 89       	ldd	r24, Z+20	; 0x14
    1560:	88 23       	and	r24, r24
    1562:	39 f0       	breq	.+14     	; 0x1572 <ElementDirectButton_update+0x1cc>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	fc 01       	movw	r30, r24
    156a:	82 89       	ldd	r24, Z+18	; 0x12
    156c:	93 89       	ldd	r25, Z+19	; 0x13
    156e:	fc 01       	movw	r30, r24
    1570:	09 95       	icall
    1572:	ae 84       	ldd	r10, Y+14	; 0x0e
    1574:	bf 84       	ldd	r11, Y+15	; 0x0f
    1576:	c8 88       	ldd	r12, Y+16	; 0x10
    1578:	d9 88       	ldd	r13, Y+17	; 0x11
    157a:	ea 88       	ldd	r14, Y+18	; 0x12
    157c:	fb 88       	ldd	r15, Y+19	; 0x13
    157e:	0c 89       	ldd	r16, Y+20	; 0x14
    1580:	1d 89       	ldd	r17, Y+21	; 0x15
    1582:	2a 2d       	mov	r18, r10
    1584:	3b 2d       	mov	r19, r11
    1586:	4c 2d       	mov	r20, r12
    1588:	5d 2d       	mov	r21, r13
    158a:	6e 2d       	mov	r22, r14
    158c:	7f 2d       	mov	r23, r15
    158e:	80 2f       	mov	r24, r16
    1590:	91 2f       	mov	r25, r17
    1592:	2f 3c       	cpi	r18, 0xCF	; 207
    1594:	37 40       	sbci	r19, 0x07	; 7
    1596:	41 05       	cpc	r20, r1
    1598:	51 05       	cpc	r21, r1
    159a:	61 05       	cpc	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	81 05       	cpc	r24, r1
    15a0:	91 05       	cpc	r25, r1
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <ElementDirectButton_update+0x200>
    15a4:	6c f4       	brge	.+26     	; 0x15c0 <ElementDirectButton_update+0x21a>
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	fc 01       	movw	r30, r24
    15ac:	80 8d       	ldd	r24, Z+24	; 0x18
    15ae:	88 23       	and	r24, r24
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <ElementDirectButton_update+0x21a>
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	fc 01       	movw	r30, r24
    15b8:	86 89       	ldd	r24, Z+22	; 0x16
    15ba:	97 89       	ldd	r25, Z+23	; 0x17
    15bc:	fc 01       	movw	r30, r24
    15be:	09 95       	icall
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	fc 01       	movw	r30, r24
    15c6:	14 82       	std	Z+4, r1	; 0x04
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	fc 01       	movw	r30, r24
    15ce:	15 86       	std	Z+13, r1	; 0x0d
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	fc 01       	movw	r30, r24
    15d6:	11 8a       	std	Z+17, r1	; 0x11
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	9b 81       	ldd	r25, Y+3	; 0x03
    15dc:	fc 01       	movw	r30, r24
    15de:	15 8a       	std	Z+21, r1	; 0x15
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	fc 01       	movw	r30, r24
    15e6:	11 8e       	std	Z+25, r1	; 0x19
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	9b 81       	ldd	r25, Y+3	; 0x03
    15ec:	fc 01       	movw	r30, r24
    15ee:	15 8e       	std	Z+29, r1	; 0x1d
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	9b 81       	ldd	r25, Y+3	; 0x03
    15f4:	fc 01       	movw	r30, r24
    15f6:	11 a2       	std	Z+33, r1	; 0x21
    15f8:	28 c0       	rjmp	.+80     	; 0x164a <ElementDirectButton_update+0x2a4>
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	fc 01       	movw	r30, r24
    1600:	92 81       	ldd	r25, Z+2	; 0x02
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	98 17       	cp	r25, r24
    1606:	09 f5       	brne	.+66     	; 0x164a <ElementDirectButton_update+0x2a4>
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	21 e0       	ldi	r18, 0x01	; 1
    160e:	fc 01       	movw	r30, r24
    1610:	24 83       	std	Z+4, r18	; 0x04
    1612:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    1616:	a2 2e       	mov	r10, r18
    1618:	b3 2e       	mov	r11, r19
    161a:	c4 2e       	mov	r12, r20
    161c:	d5 2e       	mov	r13, r21
    161e:	e6 2e       	mov	r14, r22
    1620:	f7 2e       	mov	r15, r23
    1622:	08 2f       	mov	r16, r24
    1624:	19 2f       	mov	r17, r25
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	fc 01       	movw	r30, r24
    162c:	a5 82       	std	Z+5, r10	; 0x05
    162e:	fc 01       	movw	r30, r24
    1630:	b6 82       	std	Z+6, r11	; 0x06
    1632:	fc 01       	movw	r30, r24
    1634:	c7 82       	std	Z+7, r12	; 0x07
    1636:	fc 01       	movw	r30, r24
    1638:	d0 86       	std	Z+8, r13	; 0x08
    163a:	fc 01       	movw	r30, r24
    163c:	e1 86       	std	Z+9, r14	; 0x09
    163e:	fc 01       	movw	r30, r24
    1640:	f2 86       	std	Z+10, r15	; 0x0a
    1642:	fc 01       	movw	r30, r24
    1644:	03 87       	std	Z+11, r16	; 0x0b
    1646:	fc 01       	movw	r30, r24
    1648:	14 87       	std	Z+12, r17	; 0x0c
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	fc 01       	movw	r30, r24
    1650:	85 85       	ldd	r24, Z+13	; 0x0d
    1652:	88 23       	and	r24, r24
    1654:	09 f4       	brne	.+2      	; 0x1658 <ElementDirectButton_update+0x2b2>
    1656:	78 c0       	rjmp	.+240    	; 0x1748 <ElementDirectButton_update+0x3a2>
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	9b 81       	ldd	r25, Y+3	; 0x03
    165c:	fc 01       	movw	r30, r24
    165e:	95 8d       	ldd	r25, Z+29	; 0x1d
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 27       	eor	r24, r25
    1664:	88 23       	and	r24, r24
    1666:	a1 f1       	breq	.+104    	; 0x16d0 <ElementDirectButton_update+0x32a>
    1668:	ae 84       	ldd	r10, Y+14	; 0x0e
    166a:	bf 84       	ldd	r11, Y+15	; 0x0f
    166c:	c8 88       	ldd	r12, Y+16	; 0x10
    166e:	d9 88       	ldd	r13, Y+17	; 0x11
    1670:	ea 88       	ldd	r14, Y+18	; 0x12
    1672:	fb 88       	ldd	r15, Y+19	; 0x13
    1674:	0c 89       	ldd	r16, Y+20	; 0x14
    1676:	1d 89       	ldd	r17, Y+21	; 0x15
    1678:	2a 2d       	mov	r18, r10
    167a:	3b 2d       	mov	r19, r11
    167c:	4c 2d       	mov	r20, r12
    167e:	5d 2d       	mov	r21, r13
    1680:	6e 2d       	mov	r22, r14
    1682:	7f 2d       	mov	r23, r15
    1684:	80 2f       	mov	r24, r16
    1686:	91 2f       	mov	r25, r17
    1688:	20 3d       	cpi	r18, 0xD0	; 208
    168a:	37 40       	sbci	r19, 0x07	; 7
    168c:	41 05       	cpc	r20, r1
    168e:	51 05       	cpc	r21, r1
    1690:	61 05       	cpc	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	81 05       	cpc	r24, r1
    1696:	91 05       	cpc	r25, r1
    1698:	d9 f0       	breq	.+54     	; 0x16d0 <ElementDirectButton_update+0x32a>
    169a:	d4 f0       	brlt	.+52     	; 0x16d0 <ElementDirectButton_update+0x32a>
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	9b 81       	ldd	r25, Y+3	; 0x03
    16a0:	fc 01       	movw	r30, r24
    16a2:	95 8d       	ldd	r25, Z+29	; 0x1d
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	89 27       	eor	r24, r25
    16a8:	88 23       	and	r24, r24
    16aa:	69 f0       	breq	.+26     	; 0x16c6 <ElementDirectButton_update+0x320>
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	fc 01       	movw	r30, r24
    16b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    16b4:	88 23       	and	r24, r24
    16b6:	39 f0       	breq	.+14     	; 0x16c6 <ElementDirectButton_update+0x320>
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	fc 01       	movw	r30, r24
    16be:	82 8d       	ldd	r24, Z+26	; 0x1a
    16c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    16c2:	fc 01       	movw	r30, r24
    16c4:	09 95       	icall
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	fc 01       	movw	r30, r24
    16ce:	25 8f       	std	Z+29, r18	; 0x1d
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	fc 01       	movw	r30, r24
    16d6:	91 a1       	ldd	r25, Z+33	; 0x21
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	89 27       	eor	r24, r25
    16dc:	88 23       	and	r24, r24
    16de:	a1 f1       	breq	.+104    	; 0x1748 <ElementDirectButton_update+0x3a2>
    16e0:	ae 84       	ldd	r10, Y+14	; 0x0e
    16e2:	bf 84       	ldd	r11, Y+15	; 0x0f
    16e4:	c8 88       	ldd	r12, Y+16	; 0x10
    16e6:	d9 88       	ldd	r13, Y+17	; 0x11
    16e8:	ea 88       	ldd	r14, Y+18	; 0x12
    16ea:	fb 88       	ldd	r15, Y+19	; 0x13
    16ec:	0c 89       	ldd	r16, Y+20	; 0x14
    16ee:	1d 89       	ldd	r17, Y+21	; 0x15
    16f0:	2a 2d       	mov	r18, r10
    16f2:	3b 2d       	mov	r19, r11
    16f4:	4c 2d       	mov	r20, r12
    16f6:	5d 2d       	mov	r21, r13
    16f8:	6e 2d       	mov	r22, r14
    16fa:	7f 2d       	mov	r23, r15
    16fc:	80 2f       	mov	r24, r16
    16fe:	91 2f       	mov	r25, r17
    1700:	28 38       	cpi	r18, 0x88	; 136
    1702:	33 41       	sbci	r19, 0x13	; 19
    1704:	41 05       	cpc	r20, r1
    1706:	51 05       	cpc	r21, r1
    1708:	61 05       	cpc	r22, r1
    170a:	71 05       	cpc	r23, r1
    170c:	81 05       	cpc	r24, r1
    170e:	91 05       	cpc	r25, r1
    1710:	d9 f0       	breq	.+54     	; 0x1748 <ElementDirectButton_update+0x3a2>
    1712:	d4 f0       	brlt	.+52     	; 0x1748 <ElementDirectButton_update+0x3a2>
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	9b 81       	ldd	r25, Y+3	; 0x03
    1718:	fc 01       	movw	r30, r24
    171a:	91 a1       	ldd	r25, Z+33	; 0x21
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	89 27       	eor	r24, r25
    1720:	88 23       	and	r24, r24
    1722:	69 f0       	breq	.+26     	; 0x173e <ElementDirectButton_update+0x398>
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	fc 01       	movw	r30, r24
    172a:	80 a1       	ldd	r24, Z+32	; 0x20
    172c:	88 23       	and	r24, r24
    172e:	39 f0       	breq	.+14     	; 0x173e <ElementDirectButton_update+0x398>
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	fc 01       	movw	r30, r24
    1736:	86 8d       	ldd	r24, Z+30	; 0x1e
    1738:	97 8d       	ldd	r25, Z+31	; 0x1f
    173a:	fc 01       	movw	r30, r24
    173c:	09 95       	icall
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	fc 01       	movw	r30, r24
    1746:	21 a3       	std	Z+33, r18	; 0x21
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	0e 94 30 0c 	call	0x1860	; 0x1860 <ElementDirectButton_get_count>
    1752:	98 2f       	mov	r25, r24
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	89 17       	cp	r24, r25
    1758:	08 f4       	brcc	.+2      	; 0x175c <ElementDirectButton_update+0x3b6>
    175a:	41 ce       	rjmp	.-894    	; 0x13de <ElementDirectButton_update+0x38>
    175c:	00 00       	nop
    175e:	65 96       	adiw	r28, 0x15	; 21
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	3f 90       	pop	r3
    178c:	2f 90       	pop	r2
    178e:	08 95       	ret

00001790 <ElementDirectButton_register_button>:
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	27 97       	sbiw	r28, 0x07	; 7
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	8c 83       	std	Y+4, r24	; 0x04
    17a6:	6d 83       	std	Y+5, r22	; 0x05
    17a8:	4e 83       	std	Y+6, r20	; 0x06
    17aa:	2f 83       	std	Y+7, r18	; 0x07
    17ac:	0e 94 30 0c 	call	0x1860	; 0x1860 <ElementDirectButton_get_count>
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	0e 94 39 0c 	call	0x1872	; 0x1872 <ElementDirectButton_get_max_count>
    17b6:	98 2f       	mov	r25, r24
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	89 17       	cp	r24, r25
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <ElementDirectButton_register_button+0x30>
    17be:	46 c0       	rjmp	.+140    	; 0x184c <ElementDirectButton_register_button+0xbc>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	42 e2       	ldi	r20, 0x22	; 34
    17c8:	42 9f       	mul	r20, r18
    17ca:	c0 01       	movw	r24, r0
    17cc:	43 9f       	mul	r20, r19
    17ce:	90 0d       	add	r25, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	8c 5e       	subi	r24, 0xEC	; 236
    17d6:	9c 4f       	sbci	r25, 0xFC	; 252
    17d8:	9b 83       	std	Y+3, r25	; 0x03
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	0e 94 0c 09 	call	0x1218	; 0x1218 <clear_button_config>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ea:	fc 01       	movw	r30, r24
    17ec:	21 83       	std	Z+1, r18	; 0x01
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	2d 81       	ldd	r18, Y+5	; 0x05
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	2e 81       	ldd	r18, Y+6	; 0x06
    17fe:	fc 01       	movw	r30, r24
    1800:	22 83       	std	Z+2, r18	; 0x02
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	2f 81       	ldd	r18, Y+7	; 0x07
    1808:	fc 01       	movw	r30, r24
    180a:	23 83       	std	Z+3, r18	; 0x03
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	fc 01       	movw	r30, r24
    1812:	80 81       	ld	r24, Z
    1814:	08 2e       	mov	r0, r24
    1816:	00 0c       	add	r0, r0
    1818:	99 0b       	sbc	r25, r25
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0e 94 1b 2c 	call	0x5836	; 0x5836 <MorphGPIO_set_pin_direction>
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	fc 01       	movw	r30, r24
    1828:	83 81       	ldd	r24, Z+3	; 0x03
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
    1836:	08 2e       	mov	r0, r24
    1838:	00 0c       	add	r0, r0
    183a:	99 0b       	sbc	r25, r25
    183c:	b9 01       	movw	r22, r18
    183e:	0e 94 30 2c 	call	0x5860	; 0x5860 <MorphGPIO_set_pin_pull_state>
    1842:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end>
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__data_end>
    184c:	00 00       	nop
    184e:	27 96       	adiw	r28, 0x07	; 7
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <ElementDirectButton_get_count>:

uint8_t ElementDirectButton_get_count()
{
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	return element_master_direct_button_group.cur_num_buttons;
    1868:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end>
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <ElementDirectButton_get_max_count>:

uint8_t ElementDirectButton_get_max_count()
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	return ELEMENT_MAXIMUM_NUM_BUTTONS;	
    187a:	8a e0       	ldi	r24, 0x0A	; 10
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <ElementDirectButton_register_callback>:

void ElementDirectButton_register_callback(void (*button_callback)(void), int8_t button_id, enum ElementButtonEvent event)
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	27 97       	sbiw	r28, 0x07	; 7
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	9d 83       	std	Y+5, r25	; 0x05
    1898:	8c 83       	std	Y+4, r24	; 0x04
    189a:	6e 83       	std	Y+6, r22	; 0x06
    189c:	4f 83       	std	Y+7, r20	; 0x07
	
	int8_t index = find_button_id(button_id);
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <find_button_id>
    18a4:	89 83       	std	Y+1, r24	; 0x01
	
	if(index < 0)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	88 23       	and	r24, r24
    18aa:	0c f4       	brge	.+2      	; 0x18ae <ElementDirectButton_register_callback+0x2c>
    18ac:	65 c0       	rjmp	.+202    	; 0x1978 <ElementDirectButton_register_callback+0xf6>
		return;
	}
	
	
	ElementButtonConfigStruct * cur_button =
	&element_master_direct_button_group.element_button_config_array[index];
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	88 0f       	add	r24, r24
    18b4:	33 0b       	sbc	r19, r19
	{
		return;
	}
	
	
	ElementButtonConfigStruct * cur_button =
    18b6:	42 e2       	ldi	r20, 0x22	; 34
    18b8:	42 9f       	mul	r20, r18
    18ba:	c0 01       	movw	r24, r0
    18bc:	43 9f       	mul	r20, r19
    18be:	90 0d       	add	r25, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	8c 5e       	subi	r24, 0xEC	; 236
    18c6:	9c 4f       	sbci	r25, 0xFC	; 252
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02
	&element_master_direct_button_group.element_button_config_array[index];
	
	switch(event)
    18cc:	8f 81       	ldd	r24, Y+7	; 0x07
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	91 05       	cpc	r25, r1
    18d6:	41 f1       	breq	.+80     	; 0x1928 <ElementDirectButton_register_callback+0xa6>
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <ElementDirectButton_register_callback+0x66>
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	49 f0       	breq	.+18     	; 0x18f4 <ElementDirectButton_register_callback+0x72>
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	a1 f0       	breq	.+40     	; 0x190e <ElementDirectButton_register_callback+0x8c>
    18e6:	49 c0       	rjmp	.+146    	; 0x197a <ElementDirectButton_register_callback+0xf8>
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	51 f1       	breq	.+84     	; 0x1942 <ElementDirectButton_register_callback+0xc0>
    18ee:	04 97       	sbiw	r24, 0x04	; 4
    18f0:	a9 f1       	breq	.+106    	; 0x195c <ElementDirectButton_register_callback+0xda>
    18f2:	43 c0       	rjmp	.+134    	; 0x197a <ElementDirectButton_register_callback+0xf8>
	{
		
		case ElementButtonEventDown:
		
			cur_button->button_down_callback = button_callback;
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	fc 01       	movw	r30, r24
    18fe:	37 87       	std	Z+15, r19	; 0x0f
    1900:	26 87       	std	Z+14, r18	; 0x0e
			cur_button->button_down_callback_reg = true;
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	9b 81       	ldd	r25, Y+3	; 0x03
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	fc 01       	movw	r30, r24
    190a:	20 8b       	std	Z+16, r18	; 0x10
		
		break;
    190c:	36 c0       	rjmp	.+108    	; 0x197a <ElementDirectButton_register_callback+0xf8>
		
		case ElementButtonEventUp:

			cur_button->button_up_callback = button_callback;
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	2c 81       	ldd	r18, Y+4	; 0x04
    1914:	3d 81       	ldd	r19, Y+5	; 0x05
    1916:	fc 01       	movw	r30, r24
    1918:	33 8b       	std	Z+19, r19	; 0x13
    191a:	22 8b       	std	Z+18, r18	; 0x12
			cur_button->button_up_callback_reg = true;
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	fc 01       	movw	r30, r24
    1924:	24 8b       	std	Z+20, r18	; 0x14
		
		break;
    1926:	29 c0       	rjmp	.+82     	; 0x197a <ElementDirectButton_register_callback+0xf8>
		
		case ElementButtonEventPress:
		
			cur_button->button_press_callback = button_callback;
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	9b 81       	ldd	r25, Y+3	; 0x03
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	fc 01       	movw	r30, r24
    1932:	37 8b       	std	Z+23, r19	; 0x17
    1934:	26 8b       	std	Z+22, r18	; 0x16
			cur_button->button_press_callback_reg = true;
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	fc 01       	movw	r30, r24
    193e:	20 8f       	std	Z+24, r18	; 0x18
		
		break;
    1940:	1c c0       	rjmp	.+56     	; 0x197a <ElementDirectButton_register_callback+0xf8>
		
		case ElementButtonEventShort:

			cur_button->button_short_callback = button_callback;
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	fc 01       	movw	r30, r24
    194c:	33 8f       	std	Z+27, r19	; 0x1b
    194e:	22 8f       	std	Z+26, r18	; 0x1a
			cur_button->button_short_callback_reg = true;
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	21 e0       	ldi	r18, 0x01	; 1
    1956:	fc 01       	movw	r30, r24
    1958:	24 8f       	std	Z+28, r18	; 0x1c

		break;
    195a:	0f c0       	rjmp	.+30     	; 0x197a <ElementDirectButton_register_callback+0xf8>
		
		case ElementButtonEventLong:

			cur_button->button_long_callback = button_callback;
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	fc 01       	movw	r30, r24
    1966:	37 8f       	std	Z+31, r19	; 0x1f
    1968:	26 8f       	std	Z+30, r18	; 0x1e
			cur_button->button_long_callback_reg = true;
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	21 e0       	ldi	r18, 0x01	; 1
    1970:	fc 01       	movw	r30, r24
    1972:	20 a3       	std	Z+32, r18	; 0x20

		break;
    1974:	00 00       	nop
    1976:	01 c0       	rjmp	.+2      	; 0x197a <ElementDirectButton_register_callback+0xf8>
	
	int8_t index = find_button_id(button_id);
	
	if(index < 0)
	{
		return;
    1978:	00 00       	nop

		break;
		
	}
	
}
    197a:	27 96       	adiw	r28, 0x07	; 7
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <coffeeProgress>:
	return Animation_Engine_Success;
	
}

enum ElementAnimationEngineStatus coffeeProgress()
{
    198c:	2f 92       	push	r2
    198e:	3f 92       	push	r3
    1990:	4f 92       	push	r4
    1992:	5f 92       	push	r5
    1994:	6f 92       	push	r6
    1996:	7f 92       	push	r7
    1998:	8f 92       	push	r8
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	60 97       	sbiw	r28, 0x10	; 16
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t r = 0x00, g = 0x00, b = 0x00;
    19c0:	1a 82       	std	Y+2, r1	; 0x02
    19c2:	1b 82       	std	Y+3, r1	; 0x03
    19c4:	1c 82       	std	Y+4, r1	; 0x04
		
	MorphTimeValue cur_time = MorphTime_millis() - cm_state.brew_start_time;
    19c6:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    19ca:	a2 2e       	mov	r10, r18
    19cc:	b3 2e       	mov	r11, r19
    19ce:	c4 2e       	mov	r12, r20
    19d0:	d5 2e       	mov	r13, r21
    19d2:	e6 2e       	mov	r14, r22
    19d4:	f7 2e       	mov	r15, r23
    19d6:	08 2f       	mov	r16, r24
    19d8:	19 2f       	mov	r17, r25
    19da:	20 90 15 05 	lds	r2, 0x0515	; 0x800515 <cm_state+0x1>
    19de:	30 90 16 05 	lds	r3, 0x0516	; 0x800516 <cm_state+0x2>
    19e2:	40 90 17 05 	lds	r4, 0x0517	; 0x800517 <cm_state+0x3>
    19e6:	50 90 18 05 	lds	r5, 0x0518	; 0x800518 <cm_state+0x4>
    19ea:	60 90 19 05 	lds	r6, 0x0519	; 0x800519 <cm_state+0x5>
    19ee:	70 90 1a 05 	lds	r7, 0x051A	; 0x80051a <cm_state+0x6>
    19f2:	80 90 1b 05 	lds	r8, 0x051B	; 0x80051b <cm_state+0x7>
    19f6:	90 90 1c 05 	lds	r9, 0x051C	; 0x80051c <cm_state+0x8>
    19fa:	2a 2d       	mov	r18, r10
    19fc:	3b 2d       	mov	r19, r11
    19fe:	4c 2d       	mov	r20, r12
    1a00:	5d 2d       	mov	r21, r13
    1a02:	6e 2d       	mov	r22, r14
    1a04:	7f 2d       	mov	r23, r15
    1a06:	80 2f       	mov	r24, r16
    1a08:	91 2f       	mov	r25, r17
    1a0a:	a2 2c       	mov	r10, r2
    1a0c:	b3 2c       	mov	r11, r3
    1a0e:	c4 2c       	mov	r12, r4
    1a10:	d5 2c       	mov	r13, r5
    1a12:	e6 2c       	mov	r14, r6
    1a14:	f7 2c       	mov	r15, r7
    1a16:	08 2d       	mov	r16, r8
    1a18:	19 2d       	mov	r17, r9
    1a1a:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
    1a1e:	2d 83       	std	Y+5, r18	; 0x05
    1a20:	3e 83       	std	Y+6, r19	; 0x06
    1a22:	4f 83       	std	Y+7, r20	; 0x07
    1a24:	58 87       	std	Y+8, r21	; 0x08
    1a26:	69 87       	std	Y+9, r22	; 0x09
    1a28:	7a 87       	std	Y+10, r23	; 0x0a
    1a2a:	8b 87       	std	Y+11, r24	; 0x0b
    1a2c:	9c 87       	std	Y+12, r25	; 0x0c
	
	if(cur_time >= 0 && cm_state.is_brewing)
    1a2e:	ad 80       	ldd	r10, Y+5	; 0x05
    1a30:	be 80       	ldd	r11, Y+6	; 0x06
    1a32:	cf 80       	ldd	r12, Y+7	; 0x07
    1a34:	d8 84       	ldd	r13, Y+8	; 0x08
    1a36:	e9 84       	ldd	r14, Y+9	; 0x09
    1a38:	fa 84       	ldd	r15, Y+10	; 0x0a
    1a3a:	0b 85       	ldd	r16, Y+11	; 0x0b
    1a3c:	1c 85       	ldd	r17, Y+12	; 0x0c
    1a3e:	2a 2d       	mov	r18, r10
    1a40:	3b 2d       	mov	r19, r11
    1a42:	4c 2d       	mov	r20, r12
    1a44:	5d 2d       	mov	r21, r13
    1a46:	6e 2d       	mov	r22, r14
    1a48:	7f 2d       	mov	r23, r15
    1a4a:	80 2f       	mov	r24, r16
    1a4c:	91 2f       	mov	r25, r17
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	0e 94 b3 30 	call	0x6166	; 0x6166 <__cmpdi2_s8>
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <coffeeProgress+0xcc>
    1a56:	60 c0       	rjmp	.+192    	; 0x1b18 <coffeeProgress+0x18c>
    1a58:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <cm_state>
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <coffeeProgress+0xd6>
    1a60:	5b c0       	rjmp	.+182    	; 0x1b18 <coffeeProgress+0x18c>
	{
		
		float percent_done = ((double)cur_time/(float)(BREW_DURATION));
    1a62:	2d 81       	ldd	r18, Y+5	; 0x05
    1a64:	3e 81       	ldd	r19, Y+6	; 0x06
    1a66:	4f 81       	ldd	r20, Y+7	; 0x07
    1a68:	58 85       	ldd	r21, Y+8	; 0x08
    1a6a:	69 85       	ldd	r22, Y+9	; 0x09
    1a6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a72:	0e 94 08 28 	call	0x5010	; 0x5010 <__floatdisf>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e6       	ldi	r19, 0x60	; 96
    1a7e:	4a ee       	ldi	r20, 0xEA	; 234
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8d 87       	std	Y+13, r24	; 0x0d
    1a90:	9e 87       	std	Y+14, r25	; 0x0e
    1a92:	af 87       	std	Y+15, r26	; 0x0f
    1a94:	b8 8b       	std	Y+16, r27	; 0x10
		
		g = 0xFF * percent_done;
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1aa0:	7e 85       	ldd	r23, Y+14	; 0x0e
    1aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa4:	98 89       	ldd	r25, Y+16	; 0x10
    1aa6:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8b 83       	std	Y+3, r24	; 0x03
		r = 0xFF * (1.0f - percent_done);
    1abc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1abe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ac0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ac2:	58 89       	ldd	r21, Y+16	; 0x10
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	80 e8       	ldi	r24, 0x80	; 128
    1aca:	9f e3       	ldi	r25, 0x3F	; 63
    1acc:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	53 e4       	ldi	r21, 0x43	; 67
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8a 83       	std	Y+2, r24	; 0x02
				
		for(uint8_t i = 0; i < NUM_LEDS; i++){
    1af6:	19 82       	std	Y+1, r1	; 0x01
    1af8:	08 c0       	rjmp	.+16     	; 0x1b0a <coffeeProgress+0x17e>
			sendPixel(r, g, b);
    1afa:	4c 81       	ldd	r20, Y+4	; 0x04
    1afc:	6b 81       	ldd	r22, Y+3	; 0x03
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <sendPixel>
		float percent_done = ((double)cur_time/(float)(BREW_DURATION));
		
		g = 0xFF * percent_done;
		r = 0xFF * (1.0f - percent_done);
				
		for(uint8_t i = 0; i < NUM_LEDS; i++){
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	89 31       	cpi	r24, 0x19	; 25
    1b0e:	a8 f3       	brcs	.-22     	; 0x1afa <coffeeProgress+0x16e>
			sendPixel(r, g, b);
		}
		
		show();
    1b10:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <show>
	uint8_t r = 0x00, g = 0x00, b = 0x00;
		
	MorphTimeValue cur_time = MorphTime_millis() - cm_state.brew_start_time;
	
	if(cur_time >= 0 && cm_state.is_brewing)
	{
    1b14:	00 00       	nop
	//		show();
	//		_delay_ms(FLASH_DELAY);
	//	}
	//}
	//return Animation_Engine_Animation_Complete;
}
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <coffeeProgress+0x18e>
		
		show();
	}
	else
	{
		return Animation_Engine_Animation_Complete;
    1b18:	84 e0       	ldi	r24, 0x04	; 4
	//		show();
	//		_delay_ms(FLASH_DELAY);
	//	}
	//}
	//return Animation_Engine_Animation_Complete;
}
    1b1a:	60 96       	adiw	r28, 0x10	; 16
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	9f 90       	pop	r9
    1b3c:	8f 90       	pop	r8
    1b3e:	7f 90       	pop	r7
    1b40:	6f 90       	pop	r6
    1b42:	5f 90       	pop	r5
    1b44:	4f 90       	pop	r4
    1b46:	3f 90       	pop	r3
    1b48:	2f 90       	pop	r2
    1b4a:	08 95       	ret

00001b4c <softFlash>:

enum ElementAnimationEngineStatus softFlash()
{
    1b4c:	2f 92       	push	r2
    1b4e:	3f 92       	push	r3
    1b50:	4f 92       	push	r4
    1b52:	5f 92       	push	r5
    1b54:	6f 92       	push	r6
    1b56:	7f 92       	push	r7
    1b58:	8f 92       	push	r8
    1b5a:	9f 92       	push	r9
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	2e 97       	sbiw	r28, 0x0e	; 14
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61

	MorphTimeValue cur_time = MorphTime_millis() - cm_state.brew_end_time;
    1b80:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    1b84:	a2 2e       	mov	r10, r18
    1b86:	b3 2e       	mov	r11, r19
    1b88:	c4 2e       	mov	r12, r20
    1b8a:	d5 2e       	mov	r13, r21
    1b8c:	e6 2e       	mov	r14, r22
    1b8e:	f7 2e       	mov	r15, r23
    1b90:	08 2f       	mov	r16, r24
    1b92:	19 2f       	mov	r17, r25
    1b94:	20 90 1d 05 	lds	r2, 0x051D	; 0x80051d <cm_state+0x9>
    1b98:	30 90 1e 05 	lds	r3, 0x051E	; 0x80051e <cm_state+0xa>
    1b9c:	40 90 1f 05 	lds	r4, 0x051F	; 0x80051f <cm_state+0xb>
    1ba0:	50 90 20 05 	lds	r5, 0x0520	; 0x800520 <cm_state+0xc>
    1ba4:	60 90 21 05 	lds	r6, 0x0521	; 0x800521 <cm_state+0xd>
    1ba8:	70 90 22 05 	lds	r7, 0x0522	; 0x800522 <cm_state+0xe>
    1bac:	80 90 23 05 	lds	r8, 0x0523	; 0x800523 <cm_state+0xf>
    1bb0:	90 90 24 05 	lds	r9, 0x0524	; 0x800524 <cm_state+0x10>
    1bb4:	2a 2d       	mov	r18, r10
    1bb6:	3b 2d       	mov	r19, r11
    1bb8:	4c 2d       	mov	r20, r12
    1bba:	5d 2d       	mov	r21, r13
    1bbc:	6e 2d       	mov	r22, r14
    1bbe:	7f 2d       	mov	r23, r15
    1bc0:	80 2f       	mov	r24, r16
    1bc2:	91 2f       	mov	r25, r17
    1bc4:	a2 2c       	mov	r10, r2
    1bc6:	b3 2c       	mov	r11, r3
    1bc8:	c4 2c       	mov	r12, r4
    1bca:	d5 2c       	mov	r13, r5
    1bcc:	e6 2c       	mov	r14, r6
    1bce:	f7 2c       	mov	r15, r7
    1bd0:	08 2d       	mov	r16, r8
    1bd2:	19 2d       	mov	r17, r9
    1bd4:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
    1bd8:	2b 83       	std	Y+3, r18	; 0x03
    1bda:	3c 83       	std	Y+4, r19	; 0x04
    1bdc:	4d 83       	std	Y+5, r20	; 0x05
    1bde:	5e 83       	std	Y+6, r21	; 0x06
    1be0:	6f 83       	std	Y+7, r22	; 0x07
    1be2:	78 87       	std	Y+8, r23	; 0x08
    1be4:	89 87       	std	Y+9, r24	; 0x09
    1be6:	9a 87       	std	Y+10, r25	; 0x0a
	
	float flash_amount = ((cos(((cur_time)/1000.0f * M_PI)/1.0) + 1.0f) / 2.0f);
    1be8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bea:	3c 81       	ldd	r19, Y+4	; 0x04
    1bec:	4d 81       	ldd	r20, Y+5	; 0x05
    1bee:	5e 81       	ldd	r21, Y+6	; 0x06
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	0e 94 08 28 	call	0x5010	; 0x5010 <__floatdisf>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	2b ed       	ldi	r18, 0xDB	; 219
    1c16:	3f e0       	ldi	r19, 0x0F	; 15
    1c18:	49 e4       	ldi	r20, 0x49	; 73
    1c1a:	50 e4       	ldi	r21, 0x40	; 64
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <cos>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e8       	ldi	r20, 0x80	; 128
    1c3a:	5f e3       	ldi	r21, 0x3F	; 63
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__addsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e4       	ldi	r21, 0x40	; 64
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	8b 87       	std	Y+11, r24	; 0x0b
    1c5e:	9c 87       	std	Y+12, r25	; 0x0c
    1c60:	ad 87       	std	Y+13, r26	; 0x0d
    1c62:	be 87       	std	Y+14, r27	; 0x0e

	if(cur_time >= 5000)
    1c64:	ab 80       	ldd	r10, Y+3	; 0x03
    1c66:	bc 80       	ldd	r11, Y+4	; 0x04
    1c68:	cd 80       	ldd	r12, Y+5	; 0x05
    1c6a:	de 80       	ldd	r13, Y+6	; 0x06
    1c6c:	ef 80       	ldd	r14, Y+7	; 0x07
    1c6e:	f8 84       	ldd	r15, Y+8	; 0x08
    1c70:	09 85       	ldd	r16, Y+9	; 0x09
    1c72:	1a 85       	ldd	r17, Y+10	; 0x0a
    1c74:	2a 2d       	mov	r18, r10
    1c76:	3b 2d       	mov	r19, r11
    1c78:	4c 2d       	mov	r20, r12
    1c7a:	5d 2d       	mov	r21, r13
    1c7c:	6e 2d       	mov	r22, r14
    1c7e:	7f 2d       	mov	r23, r15
    1c80:	80 2f       	mov	r24, r16
    1c82:	91 2f       	mov	r25, r17
    1c84:	27 38       	cpi	r18, 0x87	; 135
    1c86:	33 41       	sbci	r19, 0x13	; 19
    1c88:	41 05       	cpc	r20, r1
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	71 05       	cpc	r23, r1
    1c90:	81 05       	cpc	r24, r1
    1c92:	91 05       	cpc	r25, r1
    1c94:	81 f0       	breq	.+32     	; 0x1cb6 <softFlash+0x16a>
    1c96:	7c f0       	brlt	.+30     	; 0x1cb6 <softFlash+0x16a>
	{
		
		for(uint8_t i = 0; i < NUM_LEDS; i++){
    1c98:	19 82       	std	Y+1, r1	; 0x01
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <softFlash+0x160>
			sendPixel(0, 0, 0);
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <sendPixel>
	float flash_amount = ((cos(((cur_time)/1000.0f * M_PI)/1.0) + 1.0f) / 2.0f);

	if(cur_time >= 5000)
	{
		
		for(uint8_t i = 0; i < NUM_LEDS; i++){
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	89 31       	cpi	r24, 0x19	; 25
    1cb0:	a8 f3       	brcs	.-22     	; 0x1c9c <softFlash+0x150>
			sendPixel(0, 0, 0);
		}
	
		return Animation_Engine_Animation_Complete;
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	2c c0       	rjmp	.+88     	; 0x1d0e <softFlash+0x1c2>
	}
	else
	{
		for(uint8_t i = 0; i < NUM_LEDS; i++){
    1cb6:	1a 82       	std	Y+2, r1	; 0x02
    1cb8:	24 c0       	rjmp	.+72     	; 0x1d02 <softFlash+0x1b6>
			sendPixel(0, 0x10 + (0xEF * flash_amount), 0);
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4f e6       	ldi	r20, 0x6F	; 111
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__addsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	68 2f       	mov	r22, r24
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <sendPixel>
	
		return Animation_Engine_Animation_Complete;
	}
	else
	{
		for(uint8_t i = 0; i < NUM_LEDS; i++){
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	8a 83       	std	Y+2, r24	; 0x02
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	89 31       	cpi	r24, 0x19	; 25
    1d06:	c8 f2       	brcs	.-78     	; 0x1cba <softFlash+0x16e>
			sendPixel(0, 0x10 + (0xEF * flash_amount), 0);
		}
			
	}
	
	show();
    1d08:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <show>
	
	return Animation_Engine_Success;
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
	
};
    1d0e:	2e 96       	adiw	r28, 0x0e	; 14
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	df 90       	pop	r13
    1d28:	cf 90       	pop	r12
    1d2a:	bf 90       	pop	r11
    1d2c:	af 90       	pop	r10
    1d2e:	9f 90       	pop	r9
    1d30:	8f 90       	pop	r8
    1d32:	7f 90       	pop	r7
    1d34:	6f 90       	pop	r6
    1d36:	5f 90       	pop	r5
    1d38:	4f 90       	pop	r4
    1d3a:	3f 90       	pop	r3
    1d3c:	2f 90       	pop	r2
    1d3e:	08 95       	ret

00001d40 <sneakCupTimer>:

enum ElementAnimationEngineStatus sneakCupTimer(){
    1d40:	2f 92       	push	r2
    1d42:	3f 92       	push	r3
    1d44:	4f 92       	push	r4
    1d46:	5f 92       	push	r5
    1d48:	6f 92       	push	r6
    1d4a:	7f 92       	push	r7
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	63 97       	sbiw	r28, 0x13	; 19
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t r = 0x00, g = 0xFF, b = 0x00, blank = 0x00;
    1d74:	1b 82       	std	Y+3, r1	; 0x03
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	8c 83       	std	Y+4, r24	; 0x04
    1d7a:	1d 82       	std	Y+5, r1	; 0x05
    1d7c:	1e 82       	std	Y+6, r1	; 0x06
	

	
	MorphTimeValue cur_time = MorphTime_millis() - cm_state.sneak_start_time;
    1d7e:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    1d82:	a2 2e       	mov	r10, r18
    1d84:	b3 2e       	mov	r11, r19
    1d86:	c4 2e       	mov	r12, r20
    1d88:	d5 2e       	mov	r13, r21
    1d8a:	e6 2e       	mov	r14, r22
    1d8c:	f7 2e       	mov	r15, r23
    1d8e:	08 2f       	mov	r16, r24
    1d90:	19 2f       	mov	r17, r25
    1d92:	20 90 26 05 	lds	r2, 0x0526	; 0x800526 <cm_state+0x12>
    1d96:	30 90 27 05 	lds	r3, 0x0527	; 0x800527 <cm_state+0x13>
    1d9a:	40 90 28 05 	lds	r4, 0x0528	; 0x800528 <cm_state+0x14>
    1d9e:	50 90 29 05 	lds	r5, 0x0529	; 0x800529 <cm_state+0x15>
    1da2:	60 90 2a 05 	lds	r6, 0x052A	; 0x80052a <cm_state+0x16>
    1da6:	70 90 2b 05 	lds	r7, 0x052B	; 0x80052b <cm_state+0x17>
    1daa:	80 90 2c 05 	lds	r8, 0x052C	; 0x80052c <cm_state+0x18>
    1dae:	90 90 2d 05 	lds	r9, 0x052D	; 0x80052d <cm_state+0x19>
    1db2:	2a 2d       	mov	r18, r10
    1db4:	3b 2d       	mov	r19, r11
    1db6:	4c 2d       	mov	r20, r12
    1db8:	5d 2d       	mov	r21, r13
    1dba:	6e 2d       	mov	r22, r14
    1dbc:	7f 2d       	mov	r23, r15
    1dbe:	80 2f       	mov	r24, r16
    1dc0:	91 2f       	mov	r25, r17
    1dc2:	a2 2c       	mov	r10, r2
    1dc4:	b3 2c       	mov	r11, r3
    1dc6:	c4 2c       	mov	r12, r4
    1dc8:	d5 2c       	mov	r13, r5
    1dca:	e6 2c       	mov	r14, r6
    1dcc:	f7 2c       	mov	r15, r7
    1dce:	08 2d       	mov	r16, r8
    1dd0:	19 2d       	mov	r17, r9
    1dd2:	0e 94 a1 30 	call	0x6142	; 0x6142 <__subdi3>
    1dd6:	2f 83       	std	Y+7, r18	; 0x07
    1dd8:	38 87       	std	Y+8, r19	; 0x08
    1dda:	49 87       	std	Y+9, r20	; 0x09
    1ddc:	5a 87       	std	Y+10, r21	; 0x0a
    1dde:	6b 87       	std	Y+11, r22	; 0x0b
    1de0:	7c 87       	std	Y+12, r23	; 0x0c
    1de2:	8d 87       	std	Y+13, r24	; 0x0d
    1de4:	9e 87       	std	Y+14, r25	; 0x0e
	
	if(cur_time >= 0 && cur_time < SNEAK_DURATION && cm_state.sneak_a_cup_active)
    1de6:	af 80       	ldd	r10, Y+7	; 0x07
    1de8:	b8 84       	ldd	r11, Y+8	; 0x08
    1dea:	c9 84       	ldd	r12, Y+9	; 0x09
    1dec:	da 84       	ldd	r13, Y+10	; 0x0a
    1dee:	eb 84       	ldd	r14, Y+11	; 0x0b
    1df0:	fc 84       	ldd	r15, Y+12	; 0x0c
    1df2:	0d 85       	ldd	r16, Y+13	; 0x0d
    1df4:	1e 85       	ldd	r17, Y+14	; 0x0e
    1df6:	2a 2d       	mov	r18, r10
    1df8:	3b 2d       	mov	r19, r11
    1dfa:	4c 2d       	mov	r20, r12
    1dfc:	5d 2d       	mov	r21, r13
    1dfe:	6e 2d       	mov	r22, r14
    1e00:	7f 2d       	mov	r23, r15
    1e02:	80 2f       	mov	r24, r16
    1e04:	91 2f       	mov	r25, r17
    1e06:	a0 e0       	ldi	r26, 0x00	; 0
    1e08:	0e 94 b3 30 	call	0x6166	; 0x6166 <__cmpdi2_s8>
    1e0c:	0c f4       	brge	.+2      	; 0x1e10 <sneakCupTimer+0xd0>
    1e0e:	b3 c0       	rjmp	.+358    	; 0x1f76 <sneakCupTimer+0x236>
    1e10:	af 80       	ldd	r10, Y+7	; 0x07
    1e12:	b8 84       	ldd	r11, Y+8	; 0x08
    1e14:	c9 84       	ldd	r12, Y+9	; 0x09
    1e16:	da 84       	ldd	r13, Y+10	; 0x0a
    1e18:	eb 84       	ldd	r14, Y+11	; 0x0b
    1e1a:	fc 84       	ldd	r15, Y+12	; 0x0c
    1e1c:	0d 85       	ldd	r16, Y+13	; 0x0d
    1e1e:	1e 85       	ldd	r17, Y+14	; 0x0e
    1e20:	2a 2d       	mov	r18, r10
    1e22:	3b 2d       	mov	r19, r11
    1e24:	4c 2d       	mov	r20, r12
    1e26:	5d 2d       	mov	r21, r13
    1e28:	6e 2d       	mov	r22, r14
    1e2a:	7f 2d       	mov	r23, r15
    1e2c:	80 2f       	mov	r24, r16
    1e2e:	91 2f       	mov	r25, r17
    1e30:	27 3a       	cpi	r18, 0xA7	; 167
    1e32:	31 46       	sbci	r19, 0x61	; 97
    1e34:	41 05       	cpc	r20, r1
    1e36:	51 05       	cpc	r21, r1
    1e38:	61 05       	cpc	r22, r1
    1e3a:	71 05       	cpc	r23, r1
    1e3c:	81 05       	cpc	r24, r1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <sneakCupTimer+0x106>
    1e42:	0c f0       	brlt	.+2      	; 0x1e46 <sneakCupTimer+0x106>
    1e44:	98 c0       	rjmp	.+304    	; 0x1f76 <sneakCupTimer+0x236>
    1e46:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <cm_state+0x11>
    1e4a:	88 23       	and	r24, r24
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <sneakCupTimer+0x110>
    1e4e:	93 c0       	rjmp	.+294    	; 0x1f76 <sneakCupTimer+0x236>
	{
		
		float percent_done = ((double)cur_time/(float)(SNEAK_DURATION));
    1e50:	2f 81       	ldd	r18, Y+7	; 0x07
    1e52:	38 85       	ldd	r19, Y+8	; 0x08
    1e54:	49 85       	ldd	r20, Y+9	; 0x09
    1e56:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e60:	0e 94 08 28 	call	0x5010	; 0x5010 <__floatdisf>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e5       	ldi	r19, 0x50	; 80
    1e6c:	43 ec       	ldi	r20, 0xC3	; 195
    1e6e:	56 e4       	ldi	r21, 0x46	; 70
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
    1e7e:	98 8b       	std	Y+16, r25	; 0x10
    1e80:	a9 8b       	std	Y+17, r26	; 0x11
    1e82:	ba 8b       	std	Y+18, r27	; 0x12
		
		r = 0xFF * percent_done;
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	53 e4       	ldi	r21, 0x43	; 67
    1e8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e8e:	78 89       	ldd	r23, Y+16	; 0x10
    1e90:	89 89       	ldd	r24, Y+17	; 0x11
    1e92:	9a 89       	ldd	r25, Y+18	; 0x12
    1e94:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
		g = 0xFF * (1.0f - percent_done);
    1eaa:	2f 85       	ldd	r18, Y+15	; 0x0f
    1eac:	38 89       	ldd	r19, Y+16	; 0x10
    1eae:	49 89       	ldd	r20, Y+17	; 0x11
    1eb0:	5a 89       	ldd	r21, Y+18	; 0x12
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	80 e8       	ldi	r24, 0x80	; 128
    1eb8:	9f e3       	ldi	r25, 0x3F	; 63
    1eba:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	53 e4       	ldi	r21, 0x43	; 67
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	8c 83       	std	Y+4, r24	; 0x04
		
		uint8_t led_count = (float)NUM_LEDS * (1.0f - percent_done);
    1ee4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ee6:	38 89       	ldd	r19, Y+16	; 0x10
    1ee8:	49 89       	ldd	r20, Y+17	; 0x11
    1eea:	5a 89       	ldd	r21, Y+18	; 0x12
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	80 e8       	ldi	r24, 0x80	; 128
    1ef2:	9f e3       	ldi	r25, 0x3F	; 63
    1ef4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	48 ec       	ldi	r20, 0xC8	; 200
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8b 8b       	std	Y+19, r24	; 0x13
		
		for(uint8_t i = 0; i < led_count; i++){
    1f1e:	19 82       	std	Y+1, r1	; 0x01
    1f20:	08 c0       	rjmp	.+16     	; 0x1f32 <sneakCupTimer+0x1f2>
			sendPixel(r, g, b);
    1f22:	4d 81       	ldd	r20, Y+5	; 0x05
    1f24:	6c 81       	ldd	r22, Y+4	; 0x04
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <sendPixel>
		r = 0xFF * percent_done;
		g = 0xFF * (1.0f - percent_done);
		
		uint8_t led_count = (float)NUM_LEDS * (1.0f - percent_done);
		
		for(uint8_t i = 0; i < led_count; i++){
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	99 81       	ldd	r25, Y+1	; 0x01
    1f34:	8b 89       	ldd	r24, Y+19	; 0x13
    1f36:	98 17       	cp	r25, r24
    1f38:	a0 f3       	brcs	.-24     	; 0x1f22 <sneakCupTimer+0x1e2>
			sendPixel(r, g, b);
		}
		for(uint8_t i = 0; i < NUM_LEDS - led_count; i++){
    1f3a:	1a 82       	std	Y+2, r1	; 0x02
    1f3c:	08 c0       	rjmp	.+16     	; 0x1f4e <sneakCupTimer+0x20e>
			sendPixel(0xFF, 0xFF, 0xFF);
    1f3e:	4f ef       	ldi	r20, 0xFF	; 255
    1f40:	6f ef       	ldi	r22, 0xFF	; 255
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <sendPixel>
		uint8_t led_count = (float)NUM_LEDS * (1.0f - percent_done);
		
		for(uint8_t i = 0; i < led_count; i++){
			sendPixel(r, g, b);
		}
		for(uint8_t i = 0; i < NUM_LEDS - led_count; i++){
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	49 e1       	ldi	r20, 0x19	; 25
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	ba 01       	movw	r22, r20
    1f60:	68 1b       	sub	r22, r24
    1f62:	79 0b       	sbc	r23, r25
    1f64:	cb 01       	movw	r24, r22
    1f66:	28 17       	cp	r18, r24
    1f68:	39 07       	cpc	r19, r25
    1f6a:	4c f3       	brlt	.-46     	; 0x1f3e <sneakCupTimer+0x1fe>
			sendPixel(0xFF, 0xFF, 0xFF);
		}		
		
		show();
    1f6c:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <show>

	
	MorphTimeValue cur_time = MorphTime_millis() - cm_state.sneak_start_time;
	
	if(cur_time >= 0 && cur_time < SNEAK_DURATION && cm_state.sneak_a_cup_active)
	{
    1f70:	00 00       	nop
	//}
	////turn off all the lights (because the time is up)
	//for(uint8_t i = 0; i < NUM_LEDS; i++){
		//sendPixel(blank, blank, blank);
	//}
	return Animation_Engine_Success;
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <sneakCupTimer+0x238>
		
		show();
	}
	else
	{
		return Animation_Engine_Animation_Complete;
    1f76:	84 e0       	ldi	r24, 0x04	; 4
	////turn off all the lights (because the time is up)
	//for(uint8_t i = 0; i < NUM_LEDS; i++){
		//sendPixel(blank, blank, blank);
	//}
	return Animation_Engine_Success;
}
    1f78:	63 96       	adiw	r28, 0x13	; 19
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	df 90       	pop	r13
    1f92:	cf 90       	pop	r12
    1f94:	bf 90       	pop	r11
    1f96:	af 90       	pop	r10
    1f98:	9f 90       	pop	r9
    1f9a:	8f 90       	pop	r8
    1f9c:	7f 90       	pop	r7
    1f9e:	6f 90       	pop	r6
    1fa0:	5f 90       	pop	r5
    1fa2:	4f 90       	pop	r4
    1fa4:	3f 90       	pop	r3
    1fa6:	2f 90       	pop	r2
    1fa8:	08 95       	ret

00001faa <nightLightBlue>:
enum ElementAnimationEngineStatus nightLightBlue()
{
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <nightLightBlue+0x6>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <nightLightBlue+0x8>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
					
	if(cm_state.light_level > 0.5)
    1fb6:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <cm_state+0x1c>
    1fba:	90 91 31 05 	lds	r25, 0x0531	; 0x800531 <cm_state+0x1d>
    1fbe:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <cm_state+0x1e>
    1fc2:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <cm_state+0x1f>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 8b 29 	call	0x5316	; 0x5316 <__gesf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	0c f0       	brlt	.+2      	; 0x1fdc <nightLightBlue+0x32>
    1fda:	f1 c0       	rjmp	.+482    	; 0x21be <nightLightBlue+0x214>
	{
	
		float pwm_intensity = (cm_state.light_level - 0.5f) / 0.5f;
    1fdc:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <cm_state+0x1c>
    1fe0:	90 91 31 05 	lds	r25, 0x0531	; 0x800531 <cm_state+0x1d>
    1fe4:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <cm_state+0x1e>
    1fe8:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <cm_state+0x1f>
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	ab 83       	std	Y+3, r26	; 0x03
    201a:	bc 83       	std	Y+4, r27	; 0x04
	
		switch(cm_state.underbody_demo_id)
    201c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <cm_state+0x1b>
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	91 05       	cpc	r25, r1
    2028:	09 f4       	brne	.+2      	; 0x202c <nightLightBlue+0x82>
    202a:	4a c0       	rjmp	.+148    	; 0x20c0 <nightLightBlue+0x116>
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	2c f4       	brge	.+10     	; 0x203c <nightLightBlue+0x92>
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	79 f0       	breq	.+30     	; 0x2054 <nightLightBlue+0xaa>
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	61 f1       	breq	.+88     	; 0x2092 <nightLightBlue+0xe8>
    203a:	a5 c0       	rjmp	.+330    	; 0x2186 <nightLightBlue+0x1dc>
    203c:	84 30       	cpi	r24, 0x04	; 4
    203e:	91 05       	cpc	r25, r1
    2040:	09 f4       	brne	.+2      	; 0x2044 <nightLightBlue+0x9a>
    2042:	6c c0       	rjmp	.+216    	; 0x211c <nightLightBlue+0x172>
    2044:	84 30       	cpi	r24, 0x04	; 4
    2046:	91 05       	cpc	r25, r1
    2048:	0c f4       	brge	.+2      	; 0x204c <nightLightBlue+0xa2>
    204a:	51 c0       	rjmp	.+162    	; 0x20ee <nightLightBlue+0x144>
    204c:	05 97       	sbiw	r24, 0x05	; 5
    204e:	09 f4       	brne	.+2      	; 0x2052 <nightLightBlue+0xa8>
    2050:	80 c0       	rjmp	.+256    	; 0x2152 <nightLightBlue+0x1a8>
    2052:	99 c0       	rjmp	.+306    	; 0x2186 <nightLightBlue+0x1dc>
			
			case 0:
				
				// White
				
				MorphPWM_set_pwm_duty_float(RED_PIN, pwm_intensity );
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	ab 81       	ldd	r26, Y+3	; 0x03
    205a:	bc 81       	ldd	r27, Y+4	; 0x04
    205c:	ac 01       	movw	r20, r24
    205e:	bd 01       	movw	r22, r26
    2060:	81 e1       	ldi	r24, 0x11	; 17
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, pwm_intensity );
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	ab 81       	ldd	r26, Y+3	; 0x03
    206e:	bc 81       	ldd	r27, Y+4	; 0x04
    2070:	ac 01       	movw	r20, r24
    2072:	bd 01       	movw	r22, r26
    2074:	8c e0       	ldi	r24, 0x0C	; 12
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, pwm_intensity );
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	ab 81       	ldd	r26, Y+3	; 0x03
    2082:	bc 81       	ldd	r27, Y+4	; 0x04
    2084:	ac 01       	movw	r20, r24
    2086:	bd 01       	movw	r22, r26
    2088:	8b e0       	ldi	r24, 0x0B	; 11
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>

			break;
    2090:	a8 c0       	rjmp	.+336    	; 0x21e2 <nightLightBlue+0x238>
	
			case 1:

				// Red

				MorphPWM_set_pwm_duty_float(RED_PIN, pwm_intensity );
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	ab 81       	ldd	r26, Y+3	; 0x03
    2098:	bc 81       	ldd	r27, Y+4	; 0x04
    209a:	ac 01       	movw	r20, r24
    209c:	bd 01       	movw	r22, r26
    209e:	81 e1       	ldi	r24, 0x11	; 17
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, 0);
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	8c e0       	ldi	r24, 0x0C	; 12
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, 0);
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	8b e0       	ldi	r24, 0x0B	; 11
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>

			break;
    20be:	91 c0       	rjmp	.+290    	; 0x21e2 <nightLightBlue+0x238>
			
			case 2:
					
				// Green					
					
				MorphPWM_set_pwm_duty_float(RED_PIN, 0 );
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	81 e1       	ldi	r24, 0x11	; 17
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, pwm_intensity );
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	ab 81       	ldd	r26, Y+3	; 0x03
    20d2:	bc 81       	ldd	r27, Y+4	; 0x04
    20d4:	ac 01       	movw	r20, r24
    20d6:	bd 01       	movw	r22, r26
    20d8:	8c e0       	ldi	r24, 0x0C	; 12
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, 0);
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	8b e0       	ldi	r24, 0x0B	; 11
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
					
			break;					
    20ec:	7a c0       	rjmp	.+244    	; 0x21e2 <nightLightBlue+0x238>
						
			case 3:

				// Blue

				MorphPWM_set_pwm_duty_float(RED_PIN, 0);
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	81 e1       	ldi	r24, 0x11	; 17
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, 0 );
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	8c e0       	ldi	r24, 0x0C	; 12
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, pwm_intensity );
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	ab 81       	ldd	r26, Y+3	; 0x03
    210c:	bc 81       	ldd	r27, Y+4	; 0x04
    210e:	ac 01       	movw	r20, r24
    2110:	bd 01       	movw	r22, r26
    2112:	8b e0       	ldi	r24, 0x0B	; 11
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>

					
			break;
    211a:	63 c0       	rjmp	.+198    	; 0x21e2 <nightLightBlue+0x238>
									
			case 4:

				// Yellow

				MorphPWM_set_pwm_duty_float(RED_PIN, pwm_intensity );
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	ab 81       	ldd	r26, Y+3	; 0x03
    2122:	bc 81       	ldd	r27, Y+4	; 0x04
    2124:	ac 01       	movw	r20, r24
    2126:	bd 01       	movw	r22, r26
    2128:	81 e1       	ldi	r24, 0x11	; 17
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, pwm_intensity );
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	ab 81       	ldd	r26, Y+3	; 0x03
    2136:	bc 81       	ldd	r27, Y+4	; 0x04
    2138:	ac 01       	movw	r20, r24
    213a:	bd 01       	movw	r22, r26
    213c:	8c e0       	ldi	r24, 0x0C	; 12
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, 0 );
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	8b e0       	ldi	r24, 0x0B	; 11
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>

			
			break;			
    2150:	48 c0       	rjmp	.+144    	; 0x21e2 <nightLightBlue+0x238>
												
			case 5:			
			
				// Cyan
			
				MorphPWM_set_pwm_duty_float(RED_PIN, 0);
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	81 e1       	ldi	r24, 0x11	; 17
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, pwm_intensity);
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	ab 81       	ldd	r26, Y+3	; 0x03
    2164:	bc 81       	ldd	r27, Y+4	; 0x04
    2166:	ac 01       	movw	r20, r24
    2168:	bd 01       	movw	r22, r26
    216a:	8c e0       	ldi	r24, 0x0C	; 12
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, pwm_intensity);			
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	ab 81       	ldd	r26, Y+3	; 0x03
    2178:	bc 81       	ldd	r27, Y+4	; 0x04
    217a:	ac 01       	movw	r20, r24
    217c:	bd 01       	movw	r22, r26
    217e:	8b e0       	ldi	r24, 0x0B	; 11
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
			case 6:
			default:
			
				// Magenta
				
				MorphPWM_set_pwm_duty_float(RED_PIN, pwm_intensity);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	ab 81       	ldd	r26, Y+3	; 0x03
    218c:	bc 81       	ldd	r27, Y+4	; 0x04
    218e:	ac 01       	movw	r20, r24
    2190:	bd 01       	movw	r22, r26
    2192:	81 e1       	ldi	r24, 0x11	; 17
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(GREEN_PIN, 0);
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	8c e0       	ldi	r24, 0x0C	; 12
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				MorphPWM_set_pwm_duty_float(BLUE_PIN, pwm_intensity);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	ab 81       	ldd	r26, Y+3	; 0x03
    21ac:	bc 81       	ldd	r27, Y+4	; 0x04
    21ae:	ac 01       	movw	r20, r24
    21b0:	bd 01       	movw	r22, r26
    21b2:	8b e0       	ldi	r24, 0x0B	; 11
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
				
			
			break;
    21ba:	00 00       	nop
    21bc:	12 c0       	rjmp	.+36     	; 0x21e2 <nightLightBlue+0x238>

	}
	else
	{
		
		MorphPWM_set_pwm_duty_float(RED_PIN, 0);
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	81 e1       	ldi	r24, 0x11	; 17
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
		MorphPWM_set_pwm_duty_float(GREEN_PIN, 0);
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	8c e0       	ldi	r24, 0x0C	; 12
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
		MorphPWM_set_pwm_duty_float(BLUE_PIN, 0);		
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	8b e0       	ldi	r24, 0x0B	; 11
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
	//MorphPWM_set_pwm_duty_float(GREEN_PIN, green_val);
	//MorphPWM_set_pwm_duty_float(BLUE_PIN, blue_val);



	return Animation_Engine_Success;
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	08 95       	ret

000021f2 <start_state>:
void test_state()
{
//	ElementAnimationEngine_remove_all_animations(&lights_buffer);
//	ElementAnimationEngine_push_animation(&lights_buffer, &nightLightBlueAnim);
//    ElementAnimationEngine_add_buffer(&lights_buffer);
}
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	8c e0       	ldi	r24, 0x0C	; 12
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	0e 94 47 07 	call	0xe8e	; 0xe8e <ElementAnimationEngine_add_buffer>
    2202:	8c e0       	ldi	r24, 0x0C	; 12
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	0e 94 23 08 	call	0x1046	; 0x1046 <ElementAnimationEngine_remove_all_animations>
    220a:	62 e4       	ldi	r22, 0x42	; 66
    220c:	71 e0       	ldi	r23, 0x01	; 1
    220e:	8c e0       	ldi	r24, 0x0C	; 12
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 89 07 	call	0xf12	; 0xf12 <ElementAnimationEngine_push_animation>
    2216:	0e 94 8f 09 	call	0x131e	; 0x131e <ElementDirectButton_init>
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	62 e0       	ldi	r22, 0x02	; 2
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <ElementDirectButton_register_button>
    222e:	21 e0       	ldi	r18, 0x01	; 1
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	63 e0       	ldi	r22, 0x03	; 3
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <ElementDirectButton_register_button>
    2242:	21 e0       	ldi	r18, 0x01	; 1
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	64 e0       	ldi	r22, 0x04	; 4
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 c8 0b 	call	0x1790	; 0x1790 <ElementDirectButton_register_button>
    2256:	21 e0       	ldi	r18, 0x01	; 1
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	65 e0       	ldi	r22, 0x05	; 5
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 c8 0b 	call	0x1790	; 0x1790 <ElementDirectButton_register_button>
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	ba 01       	movw	r22, r20
    2270:	81 e1       	ldi	r24, 0x11	; 17
    2272:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	ba 01       	movw	r22, r20
    227c:	8c e0       	ldi	r24, 0x0C	; 12
    227e:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	ba 01       	movw	r22, r20
    2288:	8b e0       	ldi	r24, 0x0B	; 11
    228a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <MorphPWM_set_pwm_duty_float>
    228e:	42 e0       	ldi	r20, 0x02	; 2
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	63 e0       	ldi	r22, 0x03	; 3
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	86 e7       	ldi	r24, 0x76	; 118
    2298:	91 e1       	ldi	r25, 0x11	; 17
    229a:	0e 94 41 0c 	call	0x1882	; 0x1882 <ElementDirectButton_register_callback>
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	8e e1       	ldi	r24, 0x1E	; 30
    22a8:	92 e1       	ldi	r25, 0x12	; 18
    22aa:	0e 94 41 0c 	call	0x1882	; 0x1882 <ElementDirectButton_register_callback>
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	88 e6       	ldi	r24, 0x68	; 104
    22b8:	92 e1       	ldi	r25, 0x12	; 18
    22ba:	0e 94 41 0c 	call	0x1882	; 0x1882 <ElementDirectButton_register_callback>
    22be:	0e 94 75 26 	call	0x4cea	; 0x4cea <ledsetup>
    22c2:	00 00       	nop
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <loop_state>:

uint8_t loop_count = 0;

void loop_state() //can't get it to run in real-time
{
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
	//{
	//	ElementAnimationEngine_remove_animation(&lights_buffer, 0x3);
	//	ElementAnimationEngine_push_animation(&lights_buffer, &second_anim);
	//	switched = true;
	//}
	loop_count++;
    22d2:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <loop_count>
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <loop_count>
	ElementAnimationEngine_update();
    22dc:	0e 94 34 08 	call	0x1068	; 0x1068 <ElementAnimationEngine_update>
	ElementDirectButton_update();
    22e0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <ElementDirectButton_update>
}
    22e4:	00 00       	nop
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <start_brew_demo>:

void start_brew_demo()
{
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	
	cm_state.is_brewing = true;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <cm_state>
	cm_state.brew_start_time = MorphTime_millis();
    230a:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    230e:	a2 2e       	mov	r10, r18
    2310:	b3 2e       	mov	r11, r19
    2312:	c4 2e       	mov	r12, r20
    2314:	d5 2e       	mov	r13, r21
    2316:	e6 2e       	mov	r14, r22
    2318:	f7 2e       	mov	r15, r23
    231a:	08 2f       	mov	r16, r24
    231c:	19 2f       	mov	r17, r25
    231e:	a0 92 15 05 	sts	0x0515, r10	; 0x800515 <cm_state+0x1>
    2322:	b0 92 16 05 	sts	0x0516, r11	; 0x800516 <cm_state+0x2>
    2326:	c0 92 17 05 	sts	0x0517, r12	; 0x800517 <cm_state+0x3>
    232a:	d0 92 18 05 	sts	0x0518, r13	; 0x800518 <cm_state+0x4>
    232e:	e0 92 19 05 	sts	0x0519, r14	; 0x800519 <cm_state+0x5>
    2332:	f0 92 1a 05 	sts	0x051A, r15	; 0x80051a <cm_state+0x6>
    2336:	00 93 1b 05 	sts	0x051B, r16	; 0x80051b <cm_state+0x7>
    233a:	10 93 1c 05 	sts	0x051C, r17	; 0x80051c <cm_state+0x8>

	ElementAnimationEngine_push_animation(&lights_buffer, &brewProgressAnim);
    233e:	6a e2       	ldi	r22, 0x2A	; 42
    2340:	71 e0       	ldi	r23, 0x01	; 1
    2342:	8c e0       	ldi	r24, 0x0C	; 12
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	0e 94 89 07 	call	0xf12	; 0xf12 <ElementAnimationEngine_push_animation>
	
	ElementDirectButton_register_callback(&end_brew_demo, DEMO_SWITCH_ID, ElementButtonEventPress);
    234a:	42 e0       	ldi	r20, 0x02	; 2
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	63 e0       	ldi	r22, 0x03	; 3
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	89 eb       	ldi	r24, 0xB9	; 185
    2354:	91 e1       	ldi	r25, 0x11	; 17
    2356:	0e 94 41 0c 	call	0x1882	; 0x1882 <ElementDirectButton_register_callback>
	
}
    235a:	00 00       	nop
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	ff 90       	pop	r15
    2366:	ef 90       	pop	r14
    2368:	df 90       	pop	r13
    236a:	cf 90       	pop	r12
    236c:	bf 90       	pop	r11
    236e:	af 90       	pop	r10
    2370:	08 95       	ret

00002372 <end_brew_demo>:

void end_brew_demo()
{
    2372:	af 92       	push	r10
    2374:	bf 92       	push	r11
    2376:	cf 92       	push	r12
    2378:	df 92       	push	r13
    237a:	ef 92       	push	r14
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62

	ElementAnimationEngine_remove_animation(&lights_buffer, brewProgressAnim.animation_id);
    238a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <brewProgressAnim>
    238e:	68 2f       	mov	r22, r24
    2390:	8c e0       	ldi	r24, 0x0C	; 12
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	0e 94 b9 07 	call	0xf72	; 0xf72 <ElementAnimationEngine_remove_animation>

	cm_state.is_brewing = false;
    2398:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <cm_state>

	cm_state.brew_end_time = MorphTime_millis();
    239c:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    23a0:	a2 2e       	mov	r10, r18
    23a2:	b3 2e       	mov	r11, r19
    23a4:	c4 2e       	mov	r12, r20
    23a6:	d5 2e       	mov	r13, r21
    23a8:	e6 2e       	mov	r14, r22
    23aa:	f7 2e       	mov	r15, r23
    23ac:	08 2f       	mov	r16, r24
    23ae:	19 2f       	mov	r17, r25
    23b0:	a0 92 1d 05 	sts	0x051D, r10	; 0x80051d <cm_state+0x9>
    23b4:	b0 92 1e 05 	sts	0x051E, r11	; 0x80051e <cm_state+0xa>
    23b8:	c0 92 1f 05 	sts	0x051F, r12	; 0x80051f <cm_state+0xb>
    23bc:	d0 92 20 05 	sts	0x0520, r13	; 0x800520 <cm_state+0xc>
    23c0:	e0 92 21 05 	sts	0x0521, r14	; 0x800521 <cm_state+0xd>
    23c4:	f0 92 22 05 	sts	0x0522, r15	; 0x800522 <cm_state+0xe>
    23c8:	00 93 23 05 	sts	0x0523, r16	; 0x800523 <cm_state+0xf>
    23cc:	10 93 24 05 	sts	0x0524, r17	; 0x800524 <cm_state+0x10>

	ElementAnimationEngine_push_animation(&lights_buffer, &softFlashAnim);
    23d0:	62 e3       	ldi	r22, 0x32	; 50
    23d2:	71 e0       	ldi	r23, 0x01	; 1
    23d4:	8c e0       	ldi	r24, 0x0C	; 12
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	0e 94 89 07 	call	0xf12	; 0xf12 <ElementAnimationEngine_push_animation>
	
	ElementDirectButton_register_callback(&underbody_demo_advance, DEMO_SWITCH_ID, ElementButtonEventPress);
    23dc:	42 e0       	ldi	r20, 0x02	; 2
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	63 e0       	ldi	r22, 0x03	; 3
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	92 e1       	ldi	r25, 0x12	; 18
    23e8:	0e 94 41 0c 	call	0x1882	; 0x1882 <ElementDirectButton_register_callback>
	
}
    23ec:	00 00       	nop
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	bf 90       	pop	r11
    2400:	af 90       	pop	r10
    2402:	08 95       	ret

00002404 <underbody_demo_advance>:

void underbody_demo_advance()
{
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
	
	if(cm_state.underbody_demo_id == 6)
    240c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <cm_state+0x1b>
    2410:	86 30       	cpi	r24, 0x06	; 6
    2412:	59 f4       	brne	.+22     	; 0x242a <underbody_demo_advance+0x26>
	{

		ElementDirectButton_register_callback(&start_brew_demo, DEMO_SWITCH_ID, ElementButtonEventPress);
    2414:	42 e0       	ldi	r20, 0x02	; 2
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	63 e0       	ldi	r22, 0x03	; 3
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	86 e7       	ldi	r24, 0x76	; 118
    241e:	91 e1       	ldi	r25, 0x11	; 17
    2420:	0e 94 41 0c 	call	0x1882	; 0x1882 <ElementDirectButton_register_callback>
		
		cm_state.underbody_demo_id = 0;
    2424:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <cm_state+0x1b>
		
		cm_state.underbody_demo_id ++;
		
	}
	
}
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <underbody_demo_advance+0x30>
		
	}	
	else
	{
		
		cm_state.underbody_demo_id ++;
    242a:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <cm_state+0x1b>
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <cm_state+0x1b>
		
	}
	
}
    2434:	00 00       	nop
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <sneak_a_cup_start>:

void sneak_a_cup_start()
{
    243c:	af 92       	push	r10
    243e:	bf 92       	push	r11
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62

	if(cm_state.is_brewing)
    2454:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <cm_state>
    2458:	88 23       	and	r24, r24
    245a:	71 f1       	breq	.+92     	; 0x24b8 <sneak_a_cup_start+0x7c>
	{

		cm_state.sneak_a_cup_active = true;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <cm_state+0x11>
		cm_state.sneak_start_time = MorphTime_millis();
    2462:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    2466:	a2 2e       	mov	r10, r18
    2468:	b3 2e       	mov	r11, r19
    246a:	c4 2e       	mov	r12, r20
    246c:	d5 2e       	mov	r13, r21
    246e:	e6 2e       	mov	r14, r22
    2470:	f7 2e       	mov	r15, r23
    2472:	08 2f       	mov	r16, r24
    2474:	19 2f       	mov	r17, r25
    2476:	a0 92 26 05 	sts	0x0526, r10	; 0x800526 <cm_state+0x12>
    247a:	b0 92 27 05 	sts	0x0527, r11	; 0x800527 <cm_state+0x13>
    247e:	c0 92 28 05 	sts	0x0528, r12	; 0x800528 <cm_state+0x14>
    2482:	d0 92 29 05 	sts	0x0529, r13	; 0x800529 <cm_state+0x15>
    2486:	e0 92 2a 05 	sts	0x052A, r14	; 0x80052a <cm_state+0x16>
    248a:	f0 92 2b 05 	sts	0x052B, r15	; 0x80052b <cm_state+0x17>
    248e:	00 93 2c 05 	sts	0x052C, r16	; 0x80052c <cm_state+0x18>
    2492:	10 93 2d 05 	sts	0x052D, r17	; 0x80052d <cm_state+0x19>

		ElementAnimationEngine_remove_animation(&lights_buffer, brewProgressAnim.animation_id);
    2496:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <brewProgressAnim>
    249a:	68 2f       	mov	r22, r24
    249c:	8c e0       	ldi	r24, 0x0C	; 12
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	0e 94 b9 07 	call	0xf72	; 0xf72 <ElementAnimationEngine_remove_animation>

		ElementAnimationEngine_push_animation(&lights_buffer, &sneakCupAnim);
    24a4:	6a e3       	ldi	r22, 0x3A	; 58
    24a6:	71 e0       	ldi	r23, 0x01	; 1
    24a8:	8c e0       	ldi	r24, 0x0C	; 12
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	0e 94 89 07 	call	0xf12	; 0xf12 <ElementAnimationEngine_push_animation>

		MorphGPIO_set_pin_value(19, High);
    24b0:	61 e0       	ldi	r22, 0x01	; 1
    24b2:	83 e1       	ldi	r24, 0x13	; 19
    24b4:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <MorphGPIO_set_pin_value>
		
		
	}
	
}
    24b8:	00 00       	nop
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	cf 90       	pop	r12
    24ca:	bf 90       	pop	r11
    24cc:	af 90       	pop	r10
    24ce:	08 95       	ret

000024d0 <sneak_a_cup_end>:

void sneak_a_cup_end()
{
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	
	cm_state.sneak_a_cup_active = false;
    24d8:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <cm_state+0x11>

	ElementAnimationEngine_remove_animation(&lights_buffer, sneakCupAnim.animation_id);
    24dc:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sneakCupAnim>
    24e0:	68 2f       	mov	r22, r24
    24e2:	8c e0       	ldi	r24, 0x0C	; 12
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	0e 94 b9 07 	call	0xf72	; 0xf72 <ElementAnimationEngine_remove_animation>

	ElementAnimationEngine_push_animation(&lights_buffer, &brewProgressAnim);
    24ea:	6a e2       	ldi	r22, 0x2A	; 42
    24ec:	71 e0       	ldi	r23, 0x01	; 1
    24ee:	8c e0       	ldi	r24, 0x0C	; 12
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	0e 94 89 07 	call	0xf12	; 0xf12 <ElementAnimationEngine_push_animation>

	MorphGPIO_set_pin_value(19, Low);
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	83 e1       	ldi	r24, 0x13	; 19
    24fa:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <MorphGPIO_set_pin_value>
	
	
}
    24fe:	00 00       	nop
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <MorphConfig_init>:
void morph_implementation_test(void);

// Does the configuration during run-time
// Configuration only involves setting function pointer values.
static void MorphConfig_init(void)
{
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62

	morph_config_init();
    250e:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <morph_config_init>

//#ifndef MORPH_IMPLICIT

	// GPIO Config

	MorphGPIO_register_set_pin_value_function(&morph_config_gpio_set_pin_value);
    2512:	8d e0       	ldi	r24, 0x0D	; 13
    2514:	95 e1       	ldi	r25, 0x15	; 21
    2516:	0e 94 83 2b 	call	0x5706	; 0x5706 <MorphGPIO_register_set_pin_value_function>

	MorphGPIO_register_get_pin_value_function(&morph_config_gpio_get_pin_value);
    251a:	8d e6       	ldi	r24, 0x6D	; 109
    251c:	95 e1       	ldi	r25, 0x15	; 21
    251e:	0e 94 96 2b 	call	0x572c	; 0x572c <MorphGPIO_register_get_pin_value_function>
	
	MorphGPIO_register_set_pin_direction_function(&morph_config_gpio_set_pin_direction);
    2522:	85 eb       	ldi	r24, 0xB5	; 181
    2524:	95 e1       	ldi	r25, 0x15	; 21
    2526:	0e 94 a9 2b 	call	0x5752	; 0x5752 <MorphGPIO_register_set_pin_direction_function>
	
	MorphGPIO_register_get_pin_direction_function(&morph_config_gpio_get_pin_direction);
    252a:	85 e1       	ldi	r24, 0x15	; 21
    252c:	96 e1       	ldi	r25, 0x16	; 22
    252e:	0e 94 bc 2b 	call	0x5778	; 0x5778 <MorphGPIO_register_get_pin_direction_function>

	MorphGPIO_register_set_pin_pull_state_function(&morph_config_gpio_set_pin_pull_state);
    2532:	8e e5       	ldi	r24, 0x5E	; 94
    2534:	96 e1       	ldi	r25, 0x16	; 22
    2536:	0e 94 cf 2b 	call	0x579e	; 0x579e <MorphGPIO_register_set_pin_pull_state_function>
	
	MorphGPIO_register_get_pin_pull_state_function(&morph_config_gpio_get_pin_pull_state);	
    253a:	87 ed       	ldi	r24, 0xD7	; 215
    253c:	96 e1       	ldi	r25, 0x16	; 22
    253e:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <MorphGPIO_register_get_pin_pull_state_function>
	
	// UART Config
	
	MorphUART_register_setup_channel_function(&morph_config_uart_setup_channel);
    2542:	82 ee       	ldi	r24, 0xE2	; 226
    2544:	96 e1       	ldi	r25, 0x16	; 22
    2546:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <MorphUART_register_setup_channel_function>
	
	//MorphUART_register_disable_channel_function
	
	MorphUART_register_send_data_function(&morph_config_uart_send_data);
    254a:	8a e2       	ldi	r24, 0x2A	; 42
    254c:	97 e1       	ldi	r25, 0x17	; 23
    254e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <MorphUART_register_send_data_function>

	MorphUART_register_read_data_function(&morph_config_uart_read_data);
    2552:	8a e3       	ldi	r24, 0x3A	; 58
    2554:	97 e1       	ldi	r25, 0x17	; 23
    2556:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <MorphUART_register_read_data_function>

	MorphUART_register_send_byte_function(&morph_config_uart_send_byte);
    255a:	85 e4       	ldi	r24, 0x45	; 69
    255c:	97 e1       	ldi	r25, 0x17	; 23
    255e:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <MorphUART_register_send_byte_function>
	
	MorphUART_register_read_byte_function(&morph_config_uart_read_byte);
    2562:	82 e6       	ldi	r24, 0x62	; 98
    2564:	97 e1       	ldi	r25, 0x17	; 23
    2566:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <MorphUART_register_read_byte_function>

	MorphUART_register_read_byte_buffer_function(&morph_config_uart_read_byte_buffer);
    256a:	83 ed       	ldi	r24, 0xD3	; 211
    256c:	97 e1       	ldi	r25, 0x17	; 23
    256e:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <MorphUART_register_read_byte_buffer_function>
	
	MorphUART_register_write_byte_buffer_function(&morph_config_uart_write_byte_buffer);
    2572:	82 e8       	ldi	r24, 0x82	; 130
    2574:	97 e1       	ldi	r25, 0x17	; 23
    2576:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <MorphUART_register_write_byte_buffer_function>
	
	MorphUART_register_write_data_buffer_function(&morph_config_uart_write_data_buffer);
    257a:	8d e6       	ldi	r24, 0x6D	; 109
    257c:	97 e1       	ldi	r25, 0x17	; 23
    257e:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <MorphUART_register_write_data_buffer_function>
	
	MorphUART_register_read_data_buffer_function(&morph_config_uart_read_data_buffer);
    2582:	82 eb       	ldi	r24, 0xB2	; 178
    2584:	97 e1       	ldi	r25, 0x17	; 23
    2586:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <MorphUART_register_read_data_buffer_function>
	
	MorphUART_register_data_ready_function(&morph_config_uart_data_ready);
    258a:	84 ef       	ldi	r24, 0xF4	; 244
    258c:	97 e1       	ldi	r25, 0x17	; 23
    258e:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <MorphUART_register_data_ready_function>
	//MorphI2C_register_write(&morph_config_i2c_write);
	//MorphI2C_register_set_scl_pin(&morph_config_i2c_set_scl_pin);
	//MorphI2C_register_set_sda_pin(&morph_config_i2c_set_sda_pin);

	// Time functions
	MorphTime_register_init_function(&morph_config_time_init);
    2592:	8a e4       	ldi	r24, 0x4A	; 74
    2594:	98 e1       	ldi	r25, 0x18	; 24
    2596:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <MorphTime_register_init_function>
	
	MorphTime_register_init_rtc_function(&morph_config_time_init_rtc);
    259a:	89 e8       	ldi	r24, 0x89	; 137
    259c:	98 e1       	ldi	r25, 0x18	; 24
    259e:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <MorphTime_register_init_rtc_function>
	
	MorphTime_register_millis_function(&morph_config_time_millis);
    25a2:	81 e9       	ldi	r24, 0x91	; 145
    25a4:	98 e1       	ldi	r25, 0x18	; 24
    25a6:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <MorphTime_register_millis_function>
	
	// Timer functions
	
	MorphTimer_register_acquire_timer_function(&morph_config_timer_acquire_timer);
    25aa:	8e e5       	ldi	r24, 0x5E	; 94
    25ac:	9f e1       	ldi	r25, 0x1F	; 31
    25ae:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <MorphTimer_register_acquire_timer_function>
//
	MorphTimer_register_set_rate_function(&morph_config_timer_set_rate);
    25b2:	83 ea       	ldi	r24, 0xA3	; 163
    25b4:	9f e1       	ldi	r25, 0x1F	; 31
    25b6:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <MorphTimer_register_set_rate_function>
//
	MorphTimer_register_release_timer_function(&morph_config_timer_release_timer);
    25ba:	86 e9       	ldi	r24, 0x96	; 150
    25bc:	9f e1       	ldi	r25, 0x1F	; 31
    25be:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <MorphTimer_register_release_timer_function>
	
	MorphTimer_register_set_timer_callback_function(&morph_config_timer_set_timer_callback);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	90 e2       	ldi	r25, 0x20	; 32
    25c6:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <MorphTimer_register_set_timer_callback_function>
		
	// PWM functions

	MorphPWM_register_start_pwm(&morph_config_pwm_start_pwm);
    25ca:	8e ee       	ldi	r24, 0xEE	; 238
    25cc:	90 e2       	ldi	r25, 0x20	; 32
    25ce:	0e 94 4d 2c 	call	0x589a	; 0x589a <MorphPWM_register_start_pwm>
	
	MorphPWM_register_stop_pwm(&morph_config_pwm_stop_pwm);
    25d2:	80 e4       	ldi	r24, 0x40	; 64
    25d4:	93 e2       	ldi	r25, 0x23	; 35
    25d6:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <MorphPWM_register_stop_pwm>
	
	MorphPWM_register_set_pwm_duty_float(&morph_config_pwm_set_pwm_duty_float);
    25da:	8b e4       	ldi	r24, 0x4B	; 75
    25dc:	93 e2       	ldi	r25, 0x23	; 35
    25de:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <MorphPWM_register_set_pwm_duty_float>
	
	MorphPWM_register_set_pwm_duty_64bit(&morph_config_pwm_set_pwm_duty_64bit);
    25e2:	88 ec       	ldi	r24, 0xC8	; 200
    25e4:	93 e2       	ldi	r25, 0x23	; 35
    25e6:	0e 94 86 2c 	call	0x590c	; 0x590c <MorphPWM_register_set_pwm_duty_64bit>
	
	MorphPWM_register_set_pwm_duty_32bit(&morph_config_pwm_set_pwm_duty_32bit);
    25ea:	89 ee       	ldi	r24, 0xE9	; 233
    25ec:	93 e2       	ldi	r25, 0x23	; 35
    25ee:	0e 94 99 2c 	call	0x5932	; 0x5932 <MorphPWM_register_set_pwm_duty_32bit>
	
	MorphPWM_register_set_pwm_duty_16bit(&morph_config_pwm_set_pwm_duty_16bit);
    25f2:	8e ef       	ldi	r24, 0xFE	; 254
    25f4:	93 e2       	ldi	r25, 0x23	; 35
    25f6:	0e 94 ac 2c 	call	0x5958	; 0x5958 <MorphPWM_register_set_pwm_duty_16bit>
	
	MorphPWM_register_set_pwm_duty_8bit(&morph_config_pwm_set_pwm_duty_8bit);
    25fa:	8e e0       	ldi	r24, 0x0E	; 14
    25fc:	94 e2       	ldi	r25, 0x24	; 36
    25fe:	0e 94 bf 2c 	call	0x597e	; 0x597e <MorphPWM_register_set_pwm_duty_8bit>

	// ADC functions
	MorphADC_register_get_adc_value_function(&morph_config_adc_get_adc_value);
    2602:	8b e1       	ldi	r24, 0x1B	; 27
    2604:	94 e2       	ldi	r25, 0x24	; 36
    2606:	0e 94 4e 2a 	call	0x549c	; 0x549c <MorphADC_register_get_adc_value_function>
	MorphADC_register_get_adc_pin_function(&morph_config_adc_get_adc_pin);
    260a:	8a e2       	ldi	r24, 0x2A	; 42
    260c:	94 e2       	ldi	r25, 0x24	; 36
    260e:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <MorphADC_register_get_adc_pin_function>
	MorphADC_register_init_adc_function(&morph_config_adc_init_adc);
    2612:	89 e3       	ldi	r24, 0x39	; 57
    2614:	94 e2       	ldi	r25, 0x24	; 36
    2616:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <MorphADC_register_init_adc_function>
	MorphADC_register_read_function(&morph_config_adc_read);
    261a:	8d e4       	ldi	r24, 0x4D	; 77
    261c:	94 e2       	ldi	r25, 0x24	; 36
    261e:	0e 94 8b 2a 	call	0x5516	; 0x5516 <MorphADC_register_read_function>
	MorphADC_register_set_resolution_function(&morph_config_adc_set_resolution);
    2622:	85 e2       	ldi	r24, 0x25	; 37
    2624:	95 e2       	ldi	r25, 0x25	; 37
    2626:	0e 94 9e 2a 	call	0x553c	; 0x553c <MorphADC_register_set_resolution_function>
	MorphADC_register_set_reference_function(&morph_config_adc_set_reference);
    262a:	82 e3       	ldi	r24, 0x32	; 50
    262c:	95 e2       	ldi	r25, 0x25	; 37
    262e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <MorphADC_register_set_reference_function>
	MorphADC_register_set_prescaler_function(&morph_config_adc_set_prescaler);
    2632:	81 e8       	ldi	r24, 0x81	; 129
    2634:	95 e2       	ldi	r25, 0x25	; 37
    2636:	0e 94 c4 2a 	call	0x5588	; 0x5588 <MorphADC_register_set_prescaler_function>
	
	MorphADC_register_get_maximum_value(&morph_config_adc_get_maximum_value);
    263a:	85 e1       	ldi	r24, 0x15	; 21
    263c:	96 e2       	ldi	r25, 0x26	; 38
    263e:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <MorphADC_register_get_maximum_value>
	//MorphSPI_register_set_data_in_pin(&morph_config_spi_set_data_in_pin);
	//MorphSPI_register_set_sck_pin(&morph_config_spi_set_sck_pin);

//#endif

}
    2642:	00 00       	nop
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <main>:
#define GREEN_TIME_OFFSET  PERIOD/3.0f * 1000
#define BLUE_TIME_OFFSET   (PERIOD/3.0f) * 2 * 1000


int main(void)
{
    264a:	af 92       	push	r10
    264c:	bf 92       	push	r11
    264e:	cf 92       	push	r12
    2650:	df 92       	push	r13
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	cc 54       	subi	r28, 0x4C	; 76
    2664:	d1 09       	sbc	r29, r1
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
	// Initialize Morph
	MorphConfig_init();
    2670:	0e 94 83 12 	call	0x2506	; 0x2506 <MorphConfig_init>
	
	// Setup a timer for our clock
	MorphTime_init(0, 16);
    2674:	60 e1       	ldi	r22, 0x10	; 16
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <MorphTime_init>
	
	MorphPWM_start_pwm(LED_PIN);
    267c:	87 e0       	ldi	r24, 0x07	; 7
    267e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <MorphPWM_start_pwm>
	
	MorphPWM_start_pwm(11);
    2682:	8b e0       	ldi	r24, 0x0B	; 11
    2684:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <MorphPWM_start_pwm>
	MorphPWM_start_pwm(12);
    2688:	8c e0       	ldi	r24, 0x0C	; 12
    268a:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <MorphPWM_start_pwm>
	MorphPWM_start_pwm(17);
    268e:	81 e1       	ldi	r24, 0x11	; 17
    2690:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <MorphPWM_start_pwm>

	ElementDirectButton_init();
    2694:	0e 94 8f 09 	call	0x131e	; 0x131e <ElementDirectButton_init>

	start_state();
    2698:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <start_state>

	
	MorphTimeValue time = MorphTime_millis();
    269c:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <MorphTime_millis>
    26a0:	a2 2e       	mov	r10, r18
    26a2:	b3 2e       	mov	r11, r19
    26a4:	c4 2e       	mov	r12, r20
    26a6:	d5 2e       	mov	r13, r21
    26a8:	e6 2e       	mov	r14, r22
    26aa:	f7 2e       	mov	r15, r23
    26ac:	08 2f       	mov	r16, r24
    26ae:	19 2f       	mov	r17, r25
    26b0:	af 82       	std	Y+7, r10	; 0x07
    26b2:	b8 86       	std	Y+8, r11	; 0x08
    26b4:	c9 86       	std	Y+9, r12	; 0x09
    26b6:	da 86       	std	Y+10, r13	; 0x0a
    26b8:	eb 86       	std	Y+11, r14	; 0x0b
    26ba:	fc 86       	std	Y+12, r15	; 0x0c
    26bc:	0d 87       	std	Y+13, r16	; 0x0d
    26be:	1e 87       	std	Y+14, r17	; 0x0e

	MorphGPIO_set_pin_direction(19, Output);
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	83 e1       	ldi	r24, 0x13	; 19
    26c4:	0e 94 1b 2c 	call	0x5836	; 0x5836 <MorphGPIO_set_pin_direction>
	
	MorphADC_init_adc(23);
    26c8:	87 e1       	ldi	r24, 0x17	; 23
    26ca:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <MorphADC_init_adc>
	MorphADC_set_reference(23, MorphADCExternalRef, 1);
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	87 e1       	ldi	r24, 0x17	; 23
    26d4:	0e 94 25 2b 	call	0x564a	; 0x564a <MorphADC_set_reference>
	MorphADC_set_prescaler(23, 64);
    26d8:	60 e4       	ldi	r22, 0x40	; 64
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	87 e1       	ldi	r24, 0x17	; 23
    26de:	0e 94 3e 2b 	call	0x567c	; 0x567c <MorphADC_set_prescaler>
	MorphADC_set_resolution(23, 10);
    26e2:	6a e0       	ldi	r22, 0x0A	; 10
    26e4:	87 e1       	ldi	r24, 0x17	; 23
    26e6:	0e 94 11 2b 	call	0x5622	; 0x5622 <MorphADC_set_resolution>
	
	MorphUART_setup_channel(0, 9600, 8, MorphNoParity, 1);
    26ea:	ee 24       	eor	r14, r14
    26ec:	e3 94       	inc	r14
    26ee:	02 e0       	ldi	r16, 0x02	; 2
    26f0:	28 e0       	ldi	r18, 0x08	; 8
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	55 e2       	ldi	r21, 0x25	; 37
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <MorphUART_setup_channel>

	float filtered_values[10] = {0};
    2700:	28 e2       	ldi	r18, 0x28	; 40
    2702:	ce 01       	movw	r24, r28
    2704:	49 96       	adiw	r24, 0x19	; 25
    2706:	fc 01       	movw	r30, r24
    2708:	32 2f       	mov	r19, r18
    270a:	11 92       	st	Z+, r1
    270c:	3a 95       	dec	r19
    270e:	e9 f7       	brne	.-6      	; 0x270a <main+0xc0>

	uint8_t current_filtered_light_index = 0;
    2710:	19 82       	std	Y+1, r1	; 0x01
    /* Replace with your application code */
    while (1) 
    {
		//time = MorphTime_millis();
		//
		loop_state();
    2712:	0e 94 65 11 	call	0x22ca	; 0x22ca <loop_state>
		
		uint16_t reading = MorphADC_read(23);	
    2716:	87 e1       	ldi	r24, 0x17	; 23
    2718:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <MorphADC_read>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	98 8b       	std	Y+16, r25	; 0x10
    2722:	8f 87       	std	Y+15, r24	; 0x0f
		uint16_t max_val = MorphADC_get_maximum_value(23);
    2724:	87 e1       	ldi	r24, 0x17	; 23
    2726:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <MorphADC_get_maximum_value>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9a 8b       	std	Y+18, r25	; 0x12
    2730:	89 8b       	std	Y+17, r24	; 0x11
		
		
		uint16_t light_reading = (int16_t)reading - 620 > 0 ? reading - 620 : 0;
    2732:	8f 85       	ldd	r24, Y+15	; 0x0f
    2734:	98 89       	ldd	r25, Y+16	; 0x10
    2736:	8c 56       	subi	r24, 0x6C	; 108
    2738:	92 40       	sbci	r25, 0x02	; 2
    273a:	18 16       	cp	r1, r24
    273c:	19 06       	cpc	r1, r25
    273e:	2c f4       	brge	.+10     	; 0x274a <main+0x100>
    2740:	8f 85       	ldd	r24, Y+15	; 0x0f
    2742:	98 89       	ldd	r25, Y+16	; 0x10
    2744:	8c 56       	subi	r24, 0x6C	; 108
    2746:	92 40       	sbci	r25, 0x02	; 2
    2748:	02 c0       	rjmp	.+4      	; 0x274e <main+0x104>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
		
		float volt_percent = light_reading/170.0f;
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	cc 01       	movw	r24, r24
    2758:	a0 e0       	ldi	r26, 0x00	; 0
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a e2       	ldi	r20, 0x2A	; 42
    276e:	53 e4       	ldi	r21, 0x43	; 67
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8d 8b       	std	Y+21, r24	; 0x15
    277e:	9e 8b       	std	Y+22, r25	; 0x16
    2780:	af 8b       	std	Y+23, r26	; 0x17
    2782:	b8 8f       	std	Y+24, r27	; 0x18

		filtered_values[current_filtered_light_index++] = volt_percent;
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	98 0f       	add	r25, r24
    278a:	99 83       	std	Y+1, r25	; 0x01
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	9e 01       	movw	r18, r28
    279a:	2f 5f       	subi	r18, 0xFF	; 255
    279c:	3f 4f       	sbci	r19, 0xFF	; 255
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	9c 01       	movw	r18, r24
    27a4:	28 5e       	subi	r18, 0xE8	; 232
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	8d 89       	ldd	r24, Y+21	; 0x15
    27aa:	9e 89       	ldd	r25, Y+22	; 0x16
    27ac:	af 89       	ldd	r26, Y+23	; 0x17
    27ae:	b8 8d       	ldd	r27, Y+24	; 0x18
    27b0:	f9 01       	movw	r30, r18
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03

		if(current_filtered_light_index >= 10)
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	8a 30       	cpi	r24, 0x0A	; 10
    27be:	08 f0       	brcs	.+2      	; 0x27c2 <main+0x178>
		{
			current_filtered_light_index = 0;
    27c0:	19 82       	std	Y+1, r1	; 0x01
		}
		
		float filtered_value = 0;
    27c2:	1a 82       	std	Y+2, r1	; 0x02
    27c4:	1b 82       	std	Y+3, r1	; 0x03
    27c6:	1c 82       	std	Y+4, r1	; 0x04
    27c8:	1d 82       	std	Y+5, r1	; 0x05
		
		for(uint8_t i = 0; i < 10; i++)
    27ca:	1e 82       	std	Y+6, r1	; 0x06
    27cc:	23 c0       	rjmp	.+70     	; 0x2814 <main+0x1ca>
		{
			
			filtered_value += filtered_values[i];
    27ce:	8e 81       	ldd	r24, Y+6	; 0x06
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	9e 01       	movw	r18, r28
    27de:	2f 5f       	subi	r18, 0xFF	; 255
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	82 0f       	add	r24, r18
    27e4:	93 1f       	adc	r25, r19
    27e6:	48 96       	adiw	r24, 0x18	; 24
    27e8:	fc 01       	movw	r30, r24
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	a2 81       	ldd	r26, Z+2	; 0x02
    27f0:	b3 81       	ldd	r27, Z+3	; 0x03
    27f2:	9c 01       	movw	r18, r24
    27f4:	ad 01       	movw	r20, r26
    27f6:	6a 81       	ldd	r22, Y+2	; 0x02
    27f8:	7b 81       	ldd	r23, Y+3	; 0x03
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	9d 81       	ldd	r25, Y+5	; 0x05
    27fe:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__addsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8a 83       	std	Y+2, r24	; 0x02
    2808:	9b 83       	std	Y+3, r25	; 0x03
    280a:	ac 83       	std	Y+4, r26	; 0x04
    280c:	bd 83       	std	Y+5, r27	; 0x05
			current_filtered_light_index = 0;
		}
		
		float filtered_value = 0;
		
		for(uint8_t i = 0; i < 10; i++)
    280e:	8e 81       	ldd	r24, Y+6	; 0x06
    2810:	8f 5f       	subi	r24, 0xFF	; 255
    2812:	8e 83       	std	Y+6, r24	; 0x06
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	8a 30       	cpi	r24, 0x0A	; 10
    2818:	d0 f2       	brcs	.-76     	; 0x27ce <main+0x184>
			
			filtered_value += filtered_values[i];
			
		}
		
		filtered_value /= 10.0f;
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	6a 81       	ldd	r22, Y+2	; 0x02
    2824:	7b 81       	ldd	r23, Y+3	; 0x03
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	9d 81       	ldd	r25, Y+5	; 0x05
    282a:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	8a 83       	std	Y+2, r24	; 0x02
    2834:	9b 83       	std	Y+3, r25	; 0x03
    2836:	ac 83       	std	Y+4, r26	; 0x04
    2838:	bd 83       	std	Y+5, r27	; 0x05
		
		cm_state.light_level = filtered_value;
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	ac 81       	ldd	r26, Y+4	; 0x04
    2840:	bd 81       	ldd	r27, Y+5	; 0x05
    2842:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <cm_state+0x1c>
    2846:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <cm_state+0x1d>
    284a:	a0 93 32 05 	sts	0x0532, r26	; 0x800532 <cm_state+0x1e>
    284e:	b0 93 33 05 	sts	0x0533, r27	; 0x800533 <cm_state+0x1f>

		char str[12];
		sprintf(str, "%d", (uint16_t)(cm_state.light_level * 100.0f)); // str now contains "3"
    2852:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <cm_state+0x1c>
    2856:	90 91 31 05 	lds	r25, 0x0531	; 0x800531 <cm_state+0x1d>
    285a:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <cm_state+0x1e>
    285e:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <cm_state+0x1f>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	48 ec       	ldi	r20, 0xC8	; 200
    2868:	52 e4       	ldi	r21, 0x42	; 66
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	29 2f       	mov	r18, r25
    2884:	2f 93       	push	r18
    2886:	8f 93       	push	r24
    2888:	81 e1       	ldi	r24, 0x11	; 17
    288a:	93 e0       	ldi	r25, 0x03	; 3
    288c:	89 2f       	mov	r24, r25
    288e:	8f 93       	push	r24
    2890:	81 e1       	ldi	r24, 0x11	; 17
    2892:	93 e0       	ldi	r25, 0x03	; 3
    2894:	8f 93       	push	r24
    2896:	ce 01       	movw	r24, r28
    2898:	8f 5b       	subi	r24, 0xBF	; 191
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	29 2f       	mov	r18, r25
    289e:	2f 93       	push	r18
    28a0:	8f 93       	push	r24
    28a2:	0e 94 c8 30 	call	0x6190	; 0x6190 <sprintf>
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
		
		MorphUART_write_byte_buffer(0, &str, strlen(str) + 1);
    28b2:	ce 01       	movw	r24, r28
    28b4:	8f 5b       	subi	r24, 0xBF	; 191
    28b6:	9f 4f       	sbci	r25, 0xFF	; 255
    28b8:	0e 94 bf 30 	call	0x617e	; 0x617e <strlen>
    28bc:	9c 01       	movw	r18, r24
    28be:	2f 5f       	subi	r18, 0xFF	; 255
    28c0:	3f 4f       	sbci	r19, 0xFF	; 255
    28c2:	ce 01       	movw	r24, r28
    28c4:	8f 5b       	subi	r24, 0xBF	; 191
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	a9 01       	movw	r20, r18
    28ca:	bc 01       	movw	r22, r24
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <MorphUART_write_byte_buffer>

		MorphUART_send_byte(0, '\n');
    28d2:	6a e0       	ldi	r22, 0x0A	; 10
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <MorphUART_send_byte>
		MorphUART_send_byte(0, '\r');
    28da:	6d e0       	ldi	r22, 0x0D	; 13
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <MorphUART_send_byte>
		////MorphPWM_set_pwm_duty_float(RED_PIN, red_val);
		////MorphPWM_set_pwm_duty_float(GREEN_PIN, green_val);
		////MorphPWM_set_pwm_duty_float(BLUE_PIN, blue_val);
		////

    }
    28e2:	17 cf       	rjmp	.-466    	; 0x2712 <main+0xc8>

000028e4 <MorphUtils_empty_callback>:
}

bool morph_config_timer_is_in_use(MorphTimerNumber tn, MorphTimerResolution res)
{
	
}
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	00 00       	nop
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	08 95       	ret

000028f4 <__vector_14>:
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	2f 93       	push	r18
    2902:	3f 93       	push	r19
    2904:	4f 93       	push	r20
    2906:	5f 93       	push	r21
    2908:	6f 93       	push	r22
    290a:	7f 93       	push	r23
    290c:	8f 93       	push	r24
    290e:	9f 93       	push	r25
    2910:	af 93       	push	r26
    2912:	bf 93       	push	r27
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <timer_configs_8_bit+0xc>
    2924:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <timer_configs_8_bit+0xd>
    2928:	fc 01       	movw	r30, r24
    292a:	09 95       	icall
    292c:	00 00       	nop
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	ff 91       	pop	r31
    2934:	ef 91       	pop	r30
    2936:	bf 91       	pop	r27
    2938:	af 91       	pop	r26
    293a:	9f 91       	pop	r25
    293c:	8f 91       	pop	r24
    293e:	7f 91       	pop	r23
    2940:	6f 91       	pop	r22
    2942:	5f 91       	pop	r21
    2944:	4f 91       	pop	r20
    2946:	3f 91       	pop	r19
    2948:	2f 91       	pop	r18
    294a:	0f 90       	pop	r0
    294c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2950:	0f 90       	pop	r0
    2952:	1f 90       	pop	r1
    2954:	18 95       	reti

00002956 <__vector_11>:
    2956:	1f 92       	push	r1
    2958:	0f 92       	push	r0
    295a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    295e:	0f 92       	push	r0
    2960:	11 24       	eor	r1, r1
    2962:	2f 93       	push	r18
    2964:	3f 93       	push	r19
    2966:	4f 93       	push	r20
    2968:	5f 93       	push	r21
    296a:	6f 93       	push	r22
    296c:	7f 93       	push	r23
    296e:	8f 93       	push	r24
    2970:	9f 93       	push	r25
    2972:	af 93       	push	r26
    2974:	bf 93       	push	r27
    2976:	ef 93       	push	r30
    2978:	ff 93       	push	r31
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <timer_configs_16_bit+0x12>
    2986:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <timer_configs_16_bit+0x13>
    298a:	fc 01       	movw	r30, r24
    298c:	09 95       	icall
    298e:	00 00       	nop
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	ff 91       	pop	r31
    2996:	ef 91       	pop	r30
    2998:	bf 91       	pop	r27
    299a:	af 91       	pop	r26
    299c:	9f 91       	pop	r25
    299e:	8f 91       	pop	r24
    29a0:	7f 91       	pop	r23
    29a2:	6f 91       	pop	r22
    29a4:	5f 91       	pop	r21
    29a6:	4f 91       	pop	r20
    29a8:	3f 91       	pop	r19
    29aa:	2f 91       	pop	r18
    29ac:	0f 90       	pop	r0
    29ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    29b2:	0f 90       	pop	r0
    29b4:	1f 90       	pop	r1
    29b6:	18 95       	reti

000029b8 <__vector_7>:
    29b8:	1f 92       	push	r1
    29ba:	0f 92       	push	r0
    29bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    29c0:	0f 92       	push	r0
    29c2:	11 24       	eor	r1, r1
    29c4:	2f 93       	push	r18
    29c6:	3f 93       	push	r19
    29c8:	4f 93       	push	r20
    29ca:	5f 93       	push	r21
    29cc:	6f 93       	push	r22
    29ce:	7f 93       	push	r23
    29d0:	8f 93       	push	r24
    29d2:	9f 93       	push	r25
    29d4:	af 93       	push	r26
    29d6:	bf 93       	push	r27
    29d8:	ef 93       	push	r30
    29da:	ff 93       	push	r31
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <timer_configs_8_bit+0x1a>
    29e8:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <timer_configs_8_bit+0x1b>
    29ec:	fc 01       	movw	r30, r24
    29ee:	09 95       	icall
    29f0:	00 00       	nop
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	ff 91       	pop	r31
    29f8:	ef 91       	pop	r30
    29fa:	bf 91       	pop	r27
    29fc:	af 91       	pop	r26
    29fe:	9f 91       	pop	r25
    2a00:	8f 91       	pop	r24
    2a02:	7f 91       	pop	r23
    2a04:	6f 91       	pop	r22
    2a06:	5f 91       	pop	r21
    2a08:	4f 91       	pop	r20
    2a0a:	3f 91       	pop	r19
    2a0c:	2f 91       	pop	r18
    2a0e:	0f 90       	pop	r0
    2a10:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2a14:	0f 90       	pop	r0
    2a16:	1f 90       	pop	r1
    2a18:	18 95       	reti

00002a1a <morph_config_gpio_set_pin_value>:
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	2f 97       	sbiw	r28, 0x0f	; 15
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	8e 87       	std	Y+14, r24	; 0x0e
    2a30:	6f 87       	std	Y+15, r22	; 0x0f
    2a32:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a34:	18 16       	cp	r1, r24
    2a36:	0c f0       	brlt	.+2      	; 0x2a3a <morph_config_gpio_set_pin_value+0x20>
    2a38:	46 c0       	rjmp	.+140    	; 0x2ac6 <morph_config_gpio_set_pin_value+0xac>
    2a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a3c:	8d 31       	cpi	r24, 0x1D	; 29
    2a3e:	0c f0       	brlt	.+2      	; 0x2a42 <morph_config_gpio_set_pin_value+0x28>
    2a40:	42 c0       	rjmp	.+132    	; 0x2ac6 <morph_config_gpio_set_pin_value+0xac>
    2a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a44:	08 2e       	mov	r0, r24
    2a46:	00 0c       	add	r0, r0
    2a48:	99 0b       	sbc	r25, r25
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	21 50       	subi	r18, 0x01	; 1
    2a4e:	31 09       	sbc	r19, r1
    2a50:	4b e0       	ldi	r20, 0x0B	; 11
    2a52:	42 9f       	mul	r20, r18
    2a54:	c0 01       	movw	r24, r0
    2a56:	43 9f       	mul	r20, r19
    2a58:	90 0d       	add	r25, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	88 5b       	subi	r24, 0xB8	; 184
    2a5e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a60:	2b e0       	ldi	r18, 0x0B	; 11
    2a62:	fc 01       	movw	r30, r24
    2a64:	de 01       	movw	r26, r28
    2a66:	13 96       	adiw	r26, 0x03	; 3
    2a68:	01 90       	ld	r0, Z+
    2a6a:	0d 92       	st	X+, r0
    2a6c:	2a 95       	dec	r18
    2a6e:	e1 f7       	brne	.-8      	; 0x2a68 <morph_config_gpio_set_pin_value+0x4e>
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a74:	91 30       	cpi	r25, 0x01	; 1
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <morph_config_gpio_set_pin_value+0x60>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a80:	fc 01       	movw	r30, r24
    2a82:	80 81       	ld	r24, Z
    2a84:	8a 83       	std	Y+2, r24	; 0x02
    2a86:	8c 81       	ldd	r24, Y+4	; 0x04
    2a88:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a8c:	42 2f       	mov	r20, r18
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	21 e0       	ldi	r18, 0x01	; 1
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <morph_config_gpio_set_pin_value+0x80>
    2a96:	22 0f       	add	r18, r18
    2a98:	33 1f       	adc	r19, r19
    2a9a:	4a 95       	dec	r20
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <morph_config_gpio_set_pin_value+0x7c>
    2a9e:	32 2f       	mov	r19, r18
    2aa0:	30 95       	com	r19
    2aa2:	2a 81       	ldd	r18, Y+2	; 0x02
    2aa4:	63 2f       	mov	r22, r19
    2aa6:	62 23       	and	r22, r18
    2aa8:	29 81       	ldd	r18, Y+1	; 0x01
    2aaa:	22 2f       	mov	r18, r18
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ab0:	44 2f       	mov	r20, r20
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <morph_config_gpio_set_pin_value+0xa0>
    2ab6:	22 0f       	add	r18, r18
    2ab8:	33 1f       	adc	r19, r19
    2aba:	4a 95       	dec	r20
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <morph_config_gpio_set_pin_value+0x9c>
    2abe:	26 2b       	or	r18, r22
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	20 83       	st	Z, r18
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <morph_config_gpio_set_pin_value+0xae>
    2ac6:	00 00       	nop
    2ac8:	2f 96       	adiw	r28, 0x0f	; 15
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <morph_config_gpio_get_pin_value>:
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	2d 97       	sbiw	r28, 0x0d	; 13
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	8d 87       	std	Y+13, r24	; 0x0d
    2af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af2:	18 16       	cp	r1, r24
    2af4:	1c f4       	brge	.+6      	; 0x2afc <morph_config_gpio_get_pin_value+0x22>
    2af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af8:	8d 31       	cpi	r24, 0x1D	; 29
    2afa:	14 f0       	brlt	.+4      	; 0x2b00 <morph_config_gpio_get_pin_value+0x26>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	2c c0       	rjmp	.+88     	; 0x2b58 <morph_config_gpio_get_pin_value+0x7e>
    2b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b02:	08 2e       	mov	r0, r24
    2b04:	00 0c       	add	r0, r0
    2b06:	99 0b       	sbc	r25, r25
    2b08:	9c 01       	movw	r18, r24
    2b0a:	21 50       	subi	r18, 0x01	; 1
    2b0c:	31 09       	sbc	r19, r1
    2b0e:	4b e0       	ldi	r20, 0x0B	; 11
    2b10:	42 9f       	mul	r20, r18
    2b12:	c0 01       	movw	r24, r0
    2b14:	43 9f       	mul	r20, r19
    2b16:	90 0d       	add	r25, r0
    2b18:	11 24       	eor	r1, r1
    2b1a:	88 5b       	subi	r24, 0xB8	; 184
    2b1c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b1e:	2b e0       	ldi	r18, 0x0B	; 11
    2b20:	fc 01       	movw	r30, r24
    2b22:	de 01       	movw	r26, r28
    2b24:	12 96       	adiw	r26, 0x02	; 2
    2b26:	01 90       	ld	r0, Z+
    2b28:	0d 92       	st	X+, r0
    2b2a:	2a 95       	dec	r18
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <morph_config_gpio_get_pin_value+0x4c>
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	fc 01       	movw	r30, r24
    2b34:	80 81       	ld	r24, Z
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	29 85       	ldd	r18, Y+9	; 0x09
    2b3c:	22 2f       	mov	r18, r18
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <morph_config_gpio_get_pin_value+0x6c>
    2b42:	95 95       	asr	r25
    2b44:	87 95       	ror	r24
    2b46:	2a 95       	dec	r18
    2b48:	e2 f7       	brpl	.-8      	; 0x2b42 <morph_config_gpio_get_pin_value+0x68>
    2b4a:	81 70       	andi	r24, 0x01	; 1
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	99 81       	ldd	r25, Y+1	; 0x01
    2b52:	91 30       	cpi	r25, 0x01	; 1
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <morph_config_gpio_get_pin_value+0x7e>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	2d 96       	adiw	r28, 0x0d	; 13
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	08 95       	ret

00002b6a <morph_config_gpio_set_pin_direction>:
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	2f 97       	sbiw	r28, 0x0f	; 15
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	8e 87       	std	Y+14, r24	; 0x0e
    2b80:	6f 87       	std	Y+15, r22	; 0x0f
    2b82:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b84:	18 16       	cp	r1, r24
    2b86:	0c f0       	brlt	.+2      	; 0x2b8a <morph_config_gpio_set_pin_direction+0x20>
    2b88:	46 c0       	rjmp	.+140    	; 0x2c16 <morph_config_gpio_set_pin_direction+0xac>
    2b8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b8c:	8d 31       	cpi	r24, 0x1D	; 29
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <morph_config_gpio_set_pin_direction+0x28>
    2b90:	42 c0       	rjmp	.+132    	; 0x2c16 <morph_config_gpio_set_pin_direction+0xac>
    2b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b94:	08 2e       	mov	r0, r24
    2b96:	00 0c       	add	r0, r0
    2b98:	99 0b       	sbc	r25, r25
    2b9a:	9c 01       	movw	r18, r24
    2b9c:	21 50       	subi	r18, 0x01	; 1
    2b9e:	31 09       	sbc	r19, r1
    2ba0:	4b e0       	ldi	r20, 0x0B	; 11
    2ba2:	42 9f       	mul	r20, r18
    2ba4:	c0 01       	movw	r24, r0
    2ba6:	43 9f       	mul	r20, r19
    2ba8:	90 0d       	add	r25, r0
    2baa:	11 24       	eor	r1, r1
    2bac:	88 5b       	subi	r24, 0xB8	; 184
    2bae:	9e 4f       	sbci	r25, 0xFE	; 254
    2bb0:	2b e0       	ldi	r18, 0x0B	; 11
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	de 01       	movw	r26, r28
    2bb6:	13 96       	adiw	r26, 0x03	; 3
    2bb8:	01 90       	ld	r0, Z+
    2bba:	0d 92       	st	X+, r0
    2bbc:	2a 95       	dec	r18
    2bbe:	e1 f7       	brne	.-8      	; 0x2bb8 <morph_config_gpio_set_pin_direction+0x4e>
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc4:	91 30       	cpi	r25, 0x01	; 1
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <morph_config_gpio_set_pin_direction+0x60>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	88 85       	ldd	r24, Y+8	; 0x08
    2bce:	99 85       	ldd	r25, Y+9	; 0x09
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	80 81       	ld	r24, Z
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
    2bd6:	88 85       	ldd	r24, Y+8	; 0x08
    2bd8:	99 85       	ldd	r25, Y+9	; 0x09
    2bda:	2a 85       	ldd	r18, Y+10	; 0x0a
    2bdc:	42 2f       	mov	r20, r18
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	21 e0       	ldi	r18, 0x01	; 1
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <morph_config_gpio_set_pin_direction+0x80>
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	4a 95       	dec	r20
    2bec:	e2 f7       	brpl	.-8      	; 0x2be6 <morph_config_gpio_set_pin_direction+0x7c>
    2bee:	32 2f       	mov	r19, r18
    2bf0:	30 95       	com	r19
    2bf2:	2a 81       	ldd	r18, Y+2	; 0x02
    2bf4:	63 2f       	mov	r22, r19
    2bf6:	62 23       	and	r22, r18
    2bf8:	29 81       	ldd	r18, Y+1	; 0x01
    2bfa:	22 2f       	mov	r18, r18
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c00:	44 2f       	mov	r20, r20
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <morph_config_gpio_set_pin_direction+0xa0>
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	4a 95       	dec	r20
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <morph_config_gpio_set_pin_direction+0x9c>
    2c0e:	26 2b       	or	r18, r22
    2c10:	fc 01       	movw	r30, r24
    2c12:	20 83       	st	Z, r18
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <morph_config_gpio_set_pin_direction+0xae>
    2c16:	00 00       	nop
    2c18:	2f 96       	adiw	r28, 0x0f	; 15
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret

00002c2a <morph_config_gpio_get_pin_direction>:
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	2d 97       	sbiw	r28, 0x0d	; 13
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	8d 87       	std	Y+13, r24	; 0x0d
    2c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c42:	18 16       	cp	r1, r24
    2c44:	84 f5       	brge	.+96     	; 0x2ca6 <morph_config_gpio_get_pin_direction+0x7c>
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	8d 31       	cpi	r24, 0x1D	; 29
    2c4a:	6c f5       	brge	.+90     	; 0x2ca6 <morph_config_gpio_get_pin_direction+0x7c>
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	08 2e       	mov	r0, r24
    2c50:	00 0c       	add	r0, r0
    2c52:	99 0b       	sbc	r25, r25
    2c54:	9c 01       	movw	r18, r24
    2c56:	21 50       	subi	r18, 0x01	; 1
    2c58:	31 09       	sbc	r19, r1
    2c5a:	4b e0       	ldi	r20, 0x0B	; 11
    2c5c:	42 9f       	mul	r20, r18
    2c5e:	c0 01       	movw	r24, r0
    2c60:	43 9f       	mul	r20, r19
    2c62:	90 0d       	add	r25, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	88 5b       	subi	r24, 0xB8	; 184
    2c68:	9e 4f       	sbci	r25, 0xFE	; 254
    2c6a:	2b e0       	ldi	r18, 0x0B	; 11
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	de 01       	movw	r26, r28
    2c70:	12 96       	adiw	r26, 0x02	; 2
    2c72:	01 90       	ld	r0, Z+
    2c74:	0d 92       	st	X+, r0
    2c76:	2a 95       	dec	r18
    2c78:	e1 f7       	brne	.-8      	; 0x2c72 <morph_config_gpio_get_pin_direction+0x48>
    2c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7c:	98 85       	ldd	r25, Y+8	; 0x08
    2c7e:	fc 01       	movw	r30, r24
    2c80:	80 81       	ld	r24, Z
    2c82:	88 2f       	mov	r24, r24
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	29 85       	ldd	r18, Y+9	; 0x09
    2c88:	22 2f       	mov	r18, r18
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <morph_config_gpio_get_pin_direction+0x68>
    2c8e:	95 95       	asr	r25
    2c90:	87 95       	ror	r24
    2c92:	2a 95       	dec	r18
    2c94:	e2 f7       	brpl	.-8      	; 0x2c8e <morph_config_gpio_get_pin_direction+0x64>
    2c96:	81 70       	andi	r24, 0x01	; 1
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	99 81       	ldd	r25, Y+1	; 0x01
    2c9e:	91 30       	cpi	r25, 0x01	; 1
    2ca0:	21 f0       	breq	.+8      	; 0x2caa <morph_config_gpio_get_pin_direction+0x80>
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <morph_config_gpio_get_pin_direction+0x80>
    2ca6:	00 00       	nop
    2ca8:	00 00       	nop
    2caa:	2d 96       	adiw	r28, 0x0d	; 13
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	08 95       	ret

00002cbc <morph_config_gpio_set_pin_pull_state>:
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	60 97       	sbiw	r28, 0x10	; 16
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	8f 87       	std	Y+15, r24	; 0x0f
    2cd2:	68 8b       	std	Y+16, r22	; 0x10
    2cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd6:	18 16       	cp	r1, r24
    2cd8:	0c f0       	brlt	.+2      	; 0x2cdc <morph_config_gpio_set_pin_pull_state+0x20>
    2cda:	5f c0       	rjmp	.+190    	; 0x2d9a <morph_config_gpio_set_pin_pull_state+0xde>
    2cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cde:	8d 31       	cpi	r24, 0x1D	; 29
    2ce0:	0c f0       	brlt	.+2      	; 0x2ce4 <morph_config_gpio_set_pin_pull_state+0x28>
    2ce2:	5b c0       	rjmp	.+182    	; 0x2d9a <morph_config_gpio_set_pin_pull_state+0xde>
    2ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce6:	08 2e       	mov	r0, r24
    2ce8:	00 0c       	add	r0, r0
    2cea:	99 0b       	sbc	r25, r25
    2cec:	9c 01       	movw	r18, r24
    2cee:	21 50       	subi	r18, 0x01	; 1
    2cf0:	31 09       	sbc	r19, r1
    2cf2:	4b e0       	ldi	r20, 0x0B	; 11
    2cf4:	42 9f       	mul	r20, r18
    2cf6:	c0 01       	movw	r24, r0
    2cf8:	43 9f       	mul	r20, r19
    2cfa:	90 0d       	add	r25, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	88 5b       	subi	r24, 0xB8	; 184
    2d00:	9e 4f       	sbci	r25, 0xFE	; 254
    2d02:	2b e0       	ldi	r18, 0x0B	; 11
    2d04:	fc 01       	movw	r30, r24
    2d06:	de 01       	movw	r26, r28
    2d08:	14 96       	adiw	r26, 0x04	; 4
    2d0a:	01 90       	ld	r0, Z+
    2d0c:	0d 92       	st	X+, r0
    2d0e:	2a 95       	dec	r18
    2d10:	e1 f7       	brne	.-8      	; 0x2d0a <morph_config_gpio_set_pin_pull_state+0x4e>
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	fc 01       	movw	r30, r24
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d20:	22 2f       	mov	r18, r18
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <morph_config_gpio_set_pin_pull_state+0x6e>
    2d26:	95 95       	asr	r25
    2d28:	87 95       	ror	r24
    2d2a:	2a 95       	dec	r18
    2d2c:	e2 f7       	brpl	.-8      	; 0x2d26 <morph_config_gpio_set_pin_pull_state+0x6a>
    2d2e:	81 70       	andi	r24, 0x01	; 1
    2d30:	89 83       	std	Y+1, r24	; 0x01
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	88 23       	and	r24, r24
    2d36:	91 f5       	brne	.+100    	; 0x2d9c <morph_config_gpio_set_pin_pull_state+0xe0>
    2d38:	88 89       	ldd	r24, Y+16	; 0x10
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	19 f0       	breq	.+6      	; 0x2d44 <morph_config_gpio_set_pin_pull_state+0x88>
    2d3e:	88 89       	ldd	r24, Y+16	; 0x10
    2d40:	88 23       	and	r24, r24
    2d42:	61 f5       	brne	.+88     	; 0x2d9c <morph_config_gpio_set_pin_pull_state+0xe0>
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	98 89       	ldd	r25, Y+16	; 0x10
    2d48:	91 30       	cpi	r25, 0x01	; 1
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <morph_config_gpio_set_pin_pull_state+0x92>
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	fc 01       	movw	r30, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	8b 83       	std	Y+3, r24	; 0x03
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d60:	42 2f       	mov	r20, r18
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	21 e0       	ldi	r18, 0x01	; 1
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <morph_config_gpio_set_pin_pull_state+0xb2>
    2d6a:	22 0f       	add	r18, r18
    2d6c:	33 1f       	adc	r19, r19
    2d6e:	4a 95       	dec	r20
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <morph_config_gpio_set_pin_pull_state+0xae>
    2d72:	32 2f       	mov	r19, r18
    2d74:	30 95       	com	r19
    2d76:	2b 81       	ldd	r18, Y+3	; 0x03
    2d78:	63 2f       	mov	r22, r19
    2d7a:	62 23       	and	r22, r18
    2d7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d7e:	22 2f       	mov	r18, r18
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d84:	44 2f       	mov	r20, r20
    2d86:	50 e0       	ldi	r21, 0x00	; 0
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <morph_config_gpio_set_pin_pull_state+0xd2>
    2d8a:	22 0f       	add	r18, r18
    2d8c:	33 1f       	adc	r19, r19
    2d8e:	4a 95       	dec	r20
    2d90:	e2 f7       	brpl	.-8      	; 0x2d8a <morph_config_gpio_set_pin_pull_state+0xce>
    2d92:	26 2b       	or	r18, r22
    2d94:	fc 01       	movw	r30, r24
    2d96:	20 83       	st	Z, r18
    2d98:	01 c0       	rjmp	.+2      	; 0x2d9c <morph_config_gpio_set_pin_pull_state+0xe0>
    2d9a:	00 00       	nop
    2d9c:	60 96       	adiw	r28, 0x10	; 16
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	08 95       	ret

00002dae <morph_config_gpio_get_pin_pull_state>:
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	1f 92       	push	r1
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	00 00       	nop
    2dbc:	0f 90       	pop	r0
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	08 95       	ret

00002dc4 <morph_config_uart_setup_channel>:
    2dc4:	ef 92       	push	r14
    2dc6:	0f 93       	push	r16
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	2a 97       	sbiw	r28, 0x0a	; 10
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
    2dde:	4c 83       	std	Y+4, r20	; 0x04
    2de0:	5d 83       	std	Y+5, r21	; 0x05
    2de2:	6e 83       	std	Y+6, r22	; 0x06
    2de4:	7f 83       	std	Y+7, r23	; 0x07
    2de6:	28 87       	std	Y+8, r18	; 0x08
    2de8:	09 87       	std	Y+9, r16	; 0x09
    2dea:	ea 86       	std	Y+10, r14	; 0x0a
    2dec:	80 e4       	ldi	r24, 0x40	; 64
    2dee:	92 e4       	ldi	r25, 0x42	; 66
    2df0:	af e0       	ldi	r26, 0x0F	; 15
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	2c 81       	ldd	r18, Y+4	; 0x04
    2df6:	3d 81       	ldd	r19, Y+5	; 0x05
    2df8:	4e 81       	ldd	r20, Y+6	; 0x06
    2dfa:	5f 81       	ldd	r21, Y+7	; 0x07
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <__udivmodsi4>
    2e04:	da 01       	movw	r26, r20
    2e06:	c9 01       	movw	r24, r18
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	85 ec       	ldi	r24, 0xC5	; 197
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	29 81       	ldd	r18, Y+1	; 0x01
    2e14:	3a 81       	ldd	r19, Y+2	; 0x02
    2e16:	23 2f       	mov	r18, r19
    2e18:	33 27       	eor	r19, r19
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	20 83       	st	Z, r18
    2e1e:	84 ec       	ldi	r24, 0xC4	; 196
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	29 81       	ldd	r18, Y+1	; 0x01
    2e24:	fc 01       	movw	r30, r24
    2e26:	20 83       	st	Z, r18
    2e28:	81 ec       	ldi	r24, 0xC1	; 193
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	28 e1       	ldi	r18, 0x18	; 24
    2e2e:	fc 01       	movw	r30, r24
    2e30:	20 83       	st	Z, r18
    2e32:	82 ec       	ldi	r24, 0xC2	; 194
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	2e e0       	ldi	r18, 0x0E	; 14
    2e38:	fc 01       	movw	r30, r24
    2e3a:	20 83       	st	Z, r18
    2e3c:	00 00       	nop
    2e3e:	2a 96       	adiw	r28, 0x0a	; 10
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	0f 91       	pop	r16
    2e50:	ef 90       	pop	r14
    2e52:	08 95       	ret

00002e54 <morph_config_uart_send_data>:
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <morph_config_uart_send_data+0x6>
    2e5a:	1f 92       	push	r1
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	89 83       	std	Y+1, r24	; 0x01
    2e62:	7b 83       	std	Y+3, r23	; 0x03
    2e64:	6a 83       	std	Y+2, r22	; 0x02
    2e66:	00 00       	nop
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	08 95       	ret

00002e74 <morph_config_uart_read_data>:
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	1f 92       	push	r1
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	00 00       	nop
    2e82:	0f 90       	pop	r0
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <morph_config_uart_send_byte>:
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <morph_config_uart_send_byte+0x6>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	6a 83       	std	Y+2, r22	; 0x02
    2e98:	00 00       	nop
    2e9a:	80 ec       	ldi	r24, 0xC0	; 192
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	80 72       	andi	r24, 0x20	; 32
    2ea8:	99 27       	eor	r25, r25
    2eaa:	89 2b       	or	r24, r25
    2eac:	b1 f3       	breq	.-20     	; 0x2e9a <morph_config_uart_send_byte+0x10>
    2eae:	86 ec       	ldi	r24, 0xC6	; 198
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	2a 81       	ldd	r18, Y+2	; 0x02
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	20 83       	st	Z, r18
    2eb8:	00 00       	nop
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <morph_config_uart_read_byte>:
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	1f 92       	push	r1
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	00 00       	nop
    2ed2:	0f 90       	pop	r0
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	08 95       	ret

00002eda <morph_config_uart_write_data_buffer>:
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <morph_config_uart_write_data_buffer+0x6>
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <morph_config_uart_write_data_buffer+0x8>
    2ee2:	1f 92       	push	r1
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	7b 83       	std	Y+3, r23	; 0x03
    2eec:	6a 83       	std	Y+2, r22	; 0x02
    2eee:	5d 83       	std	Y+5, r21	; 0x05
    2ef0:	4c 83       	std	Y+4, r20	; 0x04
    2ef2:	00 00       	nop
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret

00002f04 <morph_config_uart_write_byte_buffer>:
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <morph_config_uart_write_byte_buffer+0x6>
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <morph_config_uart_write_byte_buffer+0x8>
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <morph_config_uart_write_byte_buffer+0xa>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	8a 83       	std	Y+2, r24	; 0x02
    2f14:	7c 83       	std	Y+4, r23	; 0x04
    2f16:	6b 83       	std	Y+3, r22	; 0x03
    2f18:	5e 83       	std	Y+6, r21	; 0x06
    2f1a:	4d 83       	std	Y+5, r20	; 0x05
    2f1c:	19 82       	std	Y+1, r1	; 0x01
    2f1e:	10 c0       	rjmp	.+32     	; 0x2f40 <morph_config_uart_write_byte_buffer+0x3c>
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	2b 81       	ldd	r18, Y+3	; 0x03
    2f28:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2a:	82 0f       	add	r24, r18
    2f2c:	93 1f       	adc	r25, r19
    2f2e:	fc 01       	movw	r30, r24
    2f30:	80 81       	ld	r24, Z
    2f32:	68 2f       	mov	r22, r24
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <morph_config_uart_send_byte>
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	28 17       	cp	r18, r24
    2f4c:	39 07       	cpc	r19, r25
    2f4e:	40 f3       	brcs	.-48     	; 0x2f20 <morph_config_uart_write_byte_buffer+0x1c>
    2f50:	00 00       	nop
    2f52:	26 96       	adiw	r28, 0x06	; 6
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	08 95       	ret

00002f64 <morph_config_uart_read_data_buffer>:
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	29 97       	sbiw	r28, 0x09	; 9
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	7b 83       	std	Y+3, r23	; 0x03
    2f80:	6a 83       	std	Y+2, r22	; 0x02
    2f82:	5d 83       	std	Y+5, r21	; 0x05
    2f84:	4c 83       	std	Y+4, r20	; 0x04
    2f86:	0e 83       	std	Y+6, r16	; 0x06
    2f88:	1f 83       	std	Y+7, r17	; 0x07
    2f8a:	28 87       	std	Y+8, r18	; 0x08
    2f8c:	39 87       	std	Y+9, r19	; 0x09
    2f8e:	00 00       	nop
    2f90:	29 96       	adiw	r28, 0x09	; 9
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	08 95       	ret

00002fa6 <morph_config_uart_read_byte_buffer>:
    2fa6:	0f 93       	push	r16
    2fa8:	1f 93       	push	r17
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	29 97       	sbiw	r28, 0x09	; 9
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	7b 83       	std	Y+3, r23	; 0x03
    2fc2:	6a 83       	std	Y+2, r22	; 0x02
    2fc4:	5d 83       	std	Y+5, r21	; 0x05
    2fc6:	4c 83       	std	Y+4, r20	; 0x04
    2fc8:	0e 83       	std	Y+6, r16	; 0x06
    2fca:	1f 83       	std	Y+7, r17	; 0x07
    2fcc:	28 87       	std	Y+8, r18	; 0x08
    2fce:	39 87       	std	Y+9, r19	; 0x09
    2fd0:	00 00       	nop
    2fd2:	29 96       	adiw	r28, 0x09	; 9
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <morph_config_uart_data_ready>:
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	1f 92       	push	r1
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	00 00       	nop
    2ff6:	0f 90       	pop	r0
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	08 95       	ret

00002ffe <timer_update_millis>:
    2ffe:	af 92       	push	r10
    3000:	bf 92       	push	r11
    3002:	cf 92       	push	r12
    3004:	df 92       	push	r13
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	a0 90 35 05 	lds	r10, 0x0535	; 0x800535 <millis_ticks>
    301a:	b0 90 36 05 	lds	r11, 0x0536	; 0x800536 <millis_ticks+0x1>
    301e:	c0 90 37 05 	lds	r12, 0x0537	; 0x800537 <millis_ticks+0x2>
    3022:	d0 90 38 05 	lds	r13, 0x0538	; 0x800538 <millis_ticks+0x3>
    3026:	e0 90 39 05 	lds	r14, 0x0539	; 0x800539 <millis_ticks+0x4>
    302a:	f0 90 3a 05 	lds	r15, 0x053A	; 0x80053a <millis_ticks+0x5>
    302e:	00 91 3b 05 	lds	r16, 0x053B	; 0x80053b <millis_ticks+0x6>
    3032:	10 91 3c 05 	lds	r17, 0x053C	; 0x80053c <millis_ticks+0x7>
    3036:	2a 2d       	mov	r18, r10
    3038:	3b 2d       	mov	r19, r11
    303a:	4c 2d       	mov	r20, r12
    303c:	5d 2d       	mov	r21, r13
    303e:	6e 2d       	mov	r22, r14
    3040:	7f 2d       	mov	r23, r15
    3042:	80 2f       	mov	r24, r16
    3044:	91 2f       	mov	r25, r17
    3046:	a1 e0       	ldi	r26, 0x01	; 1
    3048:	0e 94 95 30 	call	0x612a	; 0x612a <__adddi3_s8>
    304c:	a2 2e       	mov	r10, r18
    304e:	b3 2e       	mov	r11, r19
    3050:	c4 2e       	mov	r12, r20
    3052:	d5 2e       	mov	r13, r21
    3054:	e6 2e       	mov	r14, r22
    3056:	f7 2e       	mov	r15, r23
    3058:	08 2f       	mov	r16, r24
    305a:	19 2f       	mov	r17, r25
    305c:	a0 92 35 05 	sts	0x0535, r10	; 0x800535 <millis_ticks>
    3060:	b0 92 36 05 	sts	0x0536, r11	; 0x800536 <millis_ticks+0x1>
    3064:	c0 92 37 05 	sts	0x0537, r12	; 0x800537 <millis_ticks+0x2>
    3068:	d0 92 38 05 	sts	0x0538, r13	; 0x800538 <millis_ticks+0x3>
    306c:	e0 92 39 05 	sts	0x0539, r14	; 0x800539 <millis_ticks+0x4>
    3070:	f0 92 3a 05 	sts	0x053A, r15	; 0x80053a <millis_ticks+0x5>
    3074:	00 93 3b 05 	sts	0x053B, r16	; 0x80053b <millis_ticks+0x6>
    3078:	10 93 3c 05 	sts	0x053C, r17	; 0x80053c <millis_ticks+0x7>
    307c:	00 00       	nop
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	df 90       	pop	r13
    308c:	cf 90       	pop	r12
    308e:	bf 90       	pop	r11
    3090:	af 90       	pop	r10
    3092:	08 95       	ret

00003094 <morph_config_time_init>:
    3094:	ef 92       	push	r14
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <morph_config_time_init+0xe>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	6a 83       	std	Y+2, r22	; 0x02
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	b9 01       	movw	r22, r18
    30b8:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <morph_config_timer_acquire_timer>
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	68 2f       	mov	r22, r24
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0f 2e       	mov	r0, r31
    30ca:	f8 ee       	ldi	r31, 0xE8	; 232
    30cc:	ef 2e       	mov	r14, r31
    30ce:	f0 2d       	mov	r31, r0
    30d0:	0f 2e       	mov	r0, r31
    30d2:	f3 e0       	ldi	r31, 0x03	; 3
    30d4:	ff 2e       	mov	r15, r31
    30d6:	f0 2d       	mov	r31, r0
    30d8:	00 e0       	ldi	r16, 0x00	; 0
    30da:	10 e0       	ldi	r17, 0x00	; 0
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e0       	ldi	r20, 0x00	; 0
    30e2:	50 e0       	ldi	r21, 0x00	; 0
    30e4:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <morph_config_timer_set_rate>
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	88 2f       	mov	r24, r24
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	4f ef       	ldi	r20, 0xFF	; 255
    30f6:	57 e1       	ldi	r21, 0x17	; 23
    30f8:	b9 01       	movw	r22, r18
    30fa:	0e 94 02 20 	call	0x4004	; 0x4004 <morph_config_timer_set_timer_callback>
    30fe:	00 00       	nop
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	1f 91       	pop	r17
    310a:	0f 91       	pop	r16
    310c:	ff 90       	pop	r15
    310e:	ef 90       	pop	r14
    3110:	08 95       	ret

00003112 <morph_config_time_init_rtc>:
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	00 00       	nop
    311c:	df 91       	pop	r29
    311e:	cf 91       	pop	r28
    3120:	08 95       	ret

00003122 <morph_config_time_millis>:
    3122:	af 92       	push	r10
    3124:	bf 92       	push	r11
    3126:	cf 92       	push	r12
    3128:	df 92       	push	r13
    312a:	ef 92       	push	r14
    312c:	ff 92       	push	r15
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <millis_ticks>
    313e:	30 91 36 05 	lds	r19, 0x0536	; 0x800536 <millis_ticks+0x1>
    3142:	40 91 37 05 	lds	r20, 0x0537	; 0x800537 <millis_ticks+0x2>
    3146:	50 91 38 05 	lds	r21, 0x0538	; 0x800538 <millis_ticks+0x3>
    314a:	60 91 39 05 	lds	r22, 0x0539	; 0x800539 <millis_ticks+0x4>
    314e:	70 91 3a 05 	lds	r23, 0x053A	; 0x80053a <millis_ticks+0x5>
    3152:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <millis_ticks+0x6>
    3156:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <millis_ticks+0x7>
    315a:	a2 2e       	mov	r10, r18
    315c:	b3 2e       	mov	r11, r19
    315e:	c4 2e       	mov	r12, r20
    3160:	d5 2e       	mov	r13, r21
    3162:	e6 2e       	mov	r14, r22
    3164:	f7 2e       	mov	r15, r23
    3166:	08 2f       	mov	r16, r24
    3168:	19 2f       	mov	r17, r25
    316a:	2a 2d       	mov	r18, r10
    316c:	3b 2d       	mov	r19, r11
    316e:	4c 2d       	mov	r20, r12
    3170:	5d 2d       	mov	r21, r13
    3172:	6e 2d       	mov	r22, r14
    3174:	7f 2d       	mov	r23, r15
    3176:	80 2f       	mov	r24, r16
    3178:	91 2f       	mov	r25, r17
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	bf 90       	pop	r11
    318c:	af 90       	pop	r10
    318e:	08 95       	ret

00003190 <set_rate_8_bit>:
    3190:	6f 92       	push	r6
    3192:	7f 92       	push	r7
    3194:	8f 92       	push	r8
    3196:	9f 92       	push	r9
    3198:	af 92       	push	r10
    319a:	bf 92       	push	r11
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	0f 93       	push	r16
    31a6:	1f 93       	push	r17
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	c7 55       	subi	r28, 0x57	; 87
    31b2:	d1 09       	sbc	r29, r1
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	fe 01       	movw	r30, r28
    31c0:	e1 5b       	subi	r30, 0xB1	; 177
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 83       	st	Z, r24
    31c6:	ce 01       	movw	r24, r28
    31c8:	80 5b       	subi	r24, 0xB0	; 176
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	fc 01       	movw	r30, r24
    31ce:	00 83       	st	Z, r16
    31d0:	fc 01       	movw	r30, r24
    31d2:	11 83       	std	Z+1, r17	; 0x01
    31d4:	fc 01       	movw	r30, r24
    31d6:	22 83       	std	Z+2, r18	; 0x02
    31d8:	fc 01       	movw	r30, r24
    31da:	33 83       	std	Z+3, r19	; 0x03
    31dc:	fc 01       	movw	r30, r24
    31de:	44 83       	std	Z+4, r20	; 0x04
    31e0:	fc 01       	movw	r30, r24
    31e2:	55 83       	std	Z+5, r21	; 0x05
    31e4:	fc 01       	movw	r30, r24
    31e6:	66 83       	std	Z+6, r22	; 0x06
    31e8:	fc 01       	movw	r30, r24
    31ea:	77 83       	std	Z+7, r23	; 0x07
    31ec:	ce 01       	movw	r24, r28
    31ee:	81 5b       	subi	r24, 0xB1	; 177
    31f0:	9f 4f       	sbci	r25, 0xFF	; 255
    31f2:	fc 01       	movw	r30, r24
    31f4:	80 81       	ld	r24, Z
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	08 f0       	brcs	.+2      	; 0x31fc <set_rate_8_bit+0x6c>
    31fa:	fc c2       	rjmp	.+1528   	; 0x37f4 <set_rate_8_bit+0x664>
    31fc:	ce 01       	movw	r24, r28
    31fe:	81 5b       	subi	r24, 0xB1	; 177
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	fc 01       	movw	r30, r24
    3204:	80 81       	ld	r24, Z
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9c 01       	movw	r18, r24
    320c:	c9 01       	movw	r24, r18
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	9c 01       	movw	r18, r24
    3214:	c9 01       	movw	r24, r18
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	82 1b       	sub	r24, r18
    3224:	93 0b       	sbc	r25, r19
    3226:	84 58       	subi	r24, 0x84	; 132
    3228:	9d 4f       	sbci	r25, 0xFD	; 253
    322a:	21 e0       	ldi	r18, 0x01	; 1
    322c:	fc 01       	movw	r30, r24
    322e:	20 83       	st	Z, r18
    3230:	28 e2       	ldi	r18, 0x28	; 40
    3232:	ce 01       	movw	r24, r28
    3234:	43 96       	adiw	r24, 0x13	; 19
    3236:	fc 01       	movw	r30, r24
    3238:	32 2f       	mov	r19, r18
    323a:	11 92       	st	Z+, r1
    323c:	3a 95       	dec	r19
    323e:	e9 f7       	brne	.-6      	; 0x323a <set_rate_8_bit+0xaa>
    3240:	24 e1       	ldi	r18, 0x14	; 20
    3242:	ce 01       	movw	r24, r28
    3244:	cb 96       	adiw	r24, 0x3b	; 59
    3246:	fc 01       	movw	r30, r24
    3248:	32 2f       	mov	r19, r18
    324a:	11 92       	st	Z+, r1
    324c:	3a 95       	dec	r19
    324e:	e9 f7       	brne	.-6      	; 0x324a <set_rate_8_bit+0xba>
    3250:	8f ef       	ldi	r24, 0xFF	; 255
    3252:	9f ef       	ldi	r25, 0xFF	; 255
    3254:	af e7       	ldi	r26, 0x7F	; 127
    3256:	bf e7       	ldi	r27, 0x7F	; 127
    3258:	8b af       	std	Y+59, r24	; 0x3b
    325a:	9c af       	std	Y+60, r25	; 0x3c
    325c:	ad af       	std	Y+61, r26	; 0x3d
    325e:	be af       	std	Y+62, r27	; 0x3e
    3260:	19 82       	std	Y+1, r1	; 0x01
    3262:	28 c1       	rjmp	.+592    	; 0x34b4 <set_rate_8_bit+0x324>
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	88 2e       	mov	r8, r24
    3268:	91 2c       	mov	r9, r1
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	84 55       	subi	r24, 0x54	; 84
    3276:	9d 4f       	sbci	r25, 0xFD	; 253
    3278:	fc 01       	movw	r30, r24
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	cc 01       	movw	r24, r24
    3280:	a0 e0       	ldi	r26, 0x00	; 0
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
    328c:	6b 01       	movw	r12, r22
    328e:	7c 01       	movw	r14, r24
    3290:	fe 01       	movw	r30, r28
    3292:	e0 5b       	subi	r30, 0xB0	; 176
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	20 81       	ld	r18, Z
    3298:	31 81       	ldd	r19, Z+1	; 0x01
    329a:	42 81       	ldd	r20, Z+2	; 0x02
    329c:	53 81       	ldd	r21, Z+3	; 0x03
    329e:	64 81       	ldd	r22, Z+4	; 0x04
    32a0:	75 81       	ldd	r23, Z+5	; 0x05
    32a2:	86 81       	ldd	r24, Z+6	; 0x06
    32a4:	97 81       	ldd	r25, Z+7	; 0x07
    32a6:	0e 94 4b 28 	call	0x5096	; 0x5096 <__floatundisf>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	9c 01       	movw	r18, r24
    32b0:	ad 01       	movw	r20, r26
    32b2:	c7 01       	movw	r24, r14
    32b4:	b6 01       	movw	r22, r12
    32b6:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9c 01       	movw	r18, r24
    32c0:	ad 01       	movw	r20, r26
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	74 e2       	ldi	r23, 0x24	; 36
    32c6:	84 e7       	ldi	r24, 0x74	; 116
    32c8:	9b e4       	ldi	r25, 0x4B	; 75
    32ca:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	51 e4       	ldi	r21, 0x41	; 65
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	bc 01       	movw	r22, r24
    32f0:	cd 01       	movw	r24, r26
    32f2:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__fixunssfdi>
    3302:	a2 2e       	mov	r10, r18
    3304:	b3 2e       	mov	r11, r19
    3306:	c4 2e       	mov	r12, r20
    3308:	d5 2e       	mov	r13, r21
    330a:	e6 2e       	mov	r14, r22
    330c:	f7 2e       	mov	r15, r23
    330e:	08 2f       	mov	r16, r24
    3310:	19 2f       	mov	r17, r25
    3312:	c4 01       	movw	r24, r8
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	9e 01       	movw	r18, r28
    3322:	2f 5f       	subi	r18, 0xFF	; 255
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	82 0f       	add	r24, r18
    3328:	93 1f       	adc	r25, r19
    332a:	42 96       	adiw	r24, 0x12	; 18
    332c:	fc 01       	movw	r30, r24
    332e:	a0 82       	st	Z, r10
    3330:	fc 01       	movw	r30, r24
    3332:	b1 82       	std	Z+1, r11	; 0x01
    3334:	fc 01       	movw	r30, r24
    3336:	c2 82       	std	Z+2, r12	; 0x02
    3338:	fc 01       	movw	r30, r24
    333a:	d3 82       	std	Z+3, r13	; 0x03
    333c:	fc 01       	movw	r30, r24
    333e:	e4 82       	std	Z+4, r14	; 0x04
    3340:	fc 01       	movw	r30, r24
    3342:	f5 82       	std	Z+5, r15	; 0x05
    3344:	fc 01       	movw	r30, r24
    3346:	06 83       	std	Z+6, r16	; 0x06
    3348:	fc 01       	movw	r30, r24
    334a:	17 83       	std	Z+7, r17	; 0x07
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	88 2f       	mov	r24, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	84 55       	subi	r24, 0x54	; 84
    3358:	9d 4f       	sbci	r25, 0xFD	; 253
    335a:	fc 01       	movw	r30, r24
    335c:	80 81       	ld	r24, Z
    335e:	91 81       	ldd	r25, Z+1	; 0x01
    3360:	cc 01       	movw	r24, r24
    3362:	a0 e0       	ldi	r26, 0x00	; 0
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
    336e:	3b 01       	movw	r6, r22
    3370:	4c 01       	movw	r8, r24
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	9e 01       	movw	r18, r28
    3386:	2f 5f       	subi	r18, 0xFF	; 255
    3388:	3f 4f       	sbci	r19, 0xFF	; 255
    338a:	82 0f       	add	r24, r18
    338c:	93 1f       	adc	r25, r19
    338e:	42 96       	adiw	r24, 0x12	; 18
    3390:	fc 01       	movw	r30, r24
    3392:	a0 80       	ld	r10, Z
    3394:	fc 01       	movw	r30, r24
    3396:	b1 80       	ldd	r11, Z+1	; 0x01
    3398:	fc 01       	movw	r30, r24
    339a:	c2 80       	ldd	r12, Z+2	; 0x02
    339c:	fc 01       	movw	r30, r24
    339e:	d3 80       	ldd	r13, Z+3	; 0x03
    33a0:	fc 01       	movw	r30, r24
    33a2:	e4 80       	ldd	r14, Z+4	; 0x04
    33a4:	fc 01       	movw	r30, r24
    33a6:	f5 80       	ldd	r15, Z+5	; 0x05
    33a8:	fc 01       	movw	r30, r24
    33aa:	06 81       	ldd	r16, Z+6	; 0x06
    33ac:	fc 01       	movw	r30, r24
    33ae:	17 81       	ldd	r17, Z+7	; 0x07
    33b0:	2a 2d       	mov	r18, r10
    33b2:	3b 2d       	mov	r19, r11
    33b4:	4c 2d       	mov	r20, r12
    33b6:	5d 2d       	mov	r21, r13
    33b8:	6e 2d       	mov	r22, r14
    33ba:	7f 2d       	mov	r23, r15
    33bc:	80 2f       	mov	r24, r16
    33be:	91 2f       	mov	r25, r17
    33c0:	0e 94 4b 28 	call	0x5096	; 0x5096 <__floatundisf>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e8       	ldi	r20, 0x80	; 128
    33ce:	5f e3       	ldi	r21, 0x3F	; 63
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__addsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9c 01       	movw	r18, r24
    33de:	ad 01       	movw	r20, r26
    33e0:	c4 01       	movw	r24, r8
    33e2:	b3 01       	movw	r22, r6
    33e4:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9c 01       	movw	r18, r24
    33ee:	ad 01       	movw	r20, r26
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	74 e2       	ldi	r23, 0x24	; 36
    33f4:	84 e7       	ldi	r24, 0x74	; 116
    33f6:	9b e4       	ldi	r25, 0x4B	; 75
    33f8:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	8d 87       	std	Y+13, r24	; 0x0d
    3416:	9e 87       	std	Y+14, r25	; 0x0e
    3418:	af 87       	std	Y+15, r26	; 0x0f
    341a:	b8 8b       	std	Y+16, r27	; 0x10
    341c:	fe 01       	movw	r30, r28
    341e:	e0 5b       	subi	r30, 0xB0	; 176
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	20 81       	ld	r18, Z
    3424:	31 81       	ldd	r19, Z+1	; 0x01
    3426:	42 81       	ldd	r20, Z+2	; 0x02
    3428:	53 81       	ldd	r21, Z+3	; 0x03
    342a:	64 81       	ldd	r22, Z+4	; 0x04
    342c:	75 81       	ldd	r23, Z+5	; 0x05
    342e:	86 81       	ldd	r24, Z+6	; 0x06
    3430:	97 81       	ldd	r25, Z+7	; 0x07
    3432:	0e 94 4b 28 	call	0x5096	; 0x5096 <__floatundisf>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9c 01       	movw	r18, r24
    343c:	ad 01       	movw	r20, r26
    343e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3440:	7e 85       	ldd	r23, Y+14	; 0x0e
    3442:	8f 85       	ldd	r24, Y+15	; 0x0f
    3444:	98 89       	ldd	r25, Y+16	; 0x10
    3446:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	8a 83       	std	Y+2, r24	; 0x02
    3450:	9b 83       	std	Y+3, r25	; 0x03
    3452:	ac 83       	std	Y+4, r26	; 0x04
    3454:	bd 83       	std	Y+5, r27	; 0x05
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	a9 01       	movw	r20, r18
    345c:	6a 81       	ldd	r22, Y+2	; 0x02
    345e:	7b 81       	ldd	r23, Y+3	; 0x03
    3460:	8c 81       	ldd	r24, Y+4	; 0x04
    3462:	9d 81       	ldd	r25, Y+5	; 0x05
    3464:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__cmpsf2>
    3468:	88 23       	and	r24, r24
    346a:	4c f4       	brge	.+18     	; 0x347e <set_rate_8_bit+0x2ee>
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	ac 81       	ldd	r26, Y+4	; 0x04
    3472:	bd 81       	ldd	r27, Y+5	; 0x05
    3474:	b0 58       	subi	r27, 0x80	; 128
    3476:	8a 83       	std	Y+2, r24	; 0x02
    3478:	9b 83       	std	Y+3, r25	; 0x03
    347a:	ac 83       	std	Y+4, r26	; 0x04
    347c:	bd 83       	std	Y+5, r27	; 0x05
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	88 2f       	mov	r24, r24
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	9e 01       	movw	r18, r28
    348e:	2f 5f       	subi	r18, 0xFF	; 255
    3490:	3f 4f       	sbci	r19, 0xFF	; 255
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	9c 01       	movw	r18, r24
    3498:	26 5c       	subi	r18, 0xC6	; 198
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	9b 81       	ldd	r25, Y+3	; 0x03
    34a0:	ac 81       	ldd	r26, Y+4	; 0x04
    34a2:	bd 81       	ldd	r27, Y+5	; 0x05
    34a4:	f9 01       	movw	r30, r18
    34a6:	80 83       	st	Z, r24
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	a2 83       	std	Z+2, r26	; 0x02
    34ac:	b3 83       	std	Z+3, r27	; 0x03
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	85 30       	cpi	r24, 0x05	; 5
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <set_rate_8_bit+0x32c>
    34ba:	d4 ce       	rjmp	.-600    	; 0x3264 <set_rate_8_bit+0xd4>
    34bc:	84 e0       	ldi	r24, 0x04	; 4
    34be:	8e 83       	std	Y+6, r24	; 0x06
    34c0:	8e 81       	ldd	r24, Y+6	; 0x06
    34c2:	88 2f       	mov	r24, r24
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	9e 01       	movw	r18, r28
    34d0:	2f 5f       	subi	r18, 0xFF	; 255
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	82 0f       	add	r24, r18
    34d6:	93 1f       	adc	r25, r19
    34d8:	ca 96       	adiw	r24, 0x3a	; 58
    34da:	fc 01       	movw	r30, r24
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	a2 81       	ldd	r26, Z+2	; 0x02
    34e2:	b3 81       	ldd	r27, Z+3	; 0x03
    34e4:	8f 83       	std	Y+7, r24	; 0x07
    34e6:	98 87       	std	Y+8, r25	; 0x08
    34e8:	a9 87       	std	Y+9, r26	; 0x09
    34ea:	ba 87       	std	Y+10, r27	; 0x0a
    34ec:	1b 86       	std	Y+11, r1	; 0x0b
    34ee:	68 c0       	rjmp	.+208    	; 0x35c0 <set_rate_8_bit+0x430>
    34f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	9e 01       	movw	r18, r28
    3504:	2f 5f       	subi	r18, 0xFF	; 255
    3506:	3f 4f       	sbci	r19, 0xFF	; 255
    3508:	82 0f       	add	r24, r18
    350a:	93 1f       	adc	r25, r19
    350c:	42 96       	adiw	r24, 0x12	; 18
    350e:	fc 01       	movw	r30, r24
    3510:	a0 80       	ld	r10, Z
    3512:	fc 01       	movw	r30, r24
    3514:	b1 80       	ldd	r11, Z+1	; 0x01
    3516:	fc 01       	movw	r30, r24
    3518:	c2 80       	ldd	r12, Z+2	; 0x02
    351a:	fc 01       	movw	r30, r24
    351c:	d3 80       	ldd	r13, Z+3	; 0x03
    351e:	fc 01       	movw	r30, r24
    3520:	e4 80       	ldd	r14, Z+4	; 0x04
    3522:	fc 01       	movw	r30, r24
    3524:	f5 80       	ldd	r15, Z+5	; 0x05
    3526:	fc 01       	movw	r30, r24
    3528:	06 81       	ldd	r16, Z+6	; 0x06
    352a:	fc 01       	movw	r30, r24
    352c:	17 81       	ldd	r17, Z+7	; 0x07
    352e:	2a 2d       	mov	r18, r10
    3530:	3b 2d       	mov	r19, r11
    3532:	4c 2d       	mov	r20, r12
    3534:	5d 2d       	mov	r21, r13
    3536:	6e 2d       	mov	r22, r14
    3538:	7f 2d       	mov	r23, r15
    353a:	80 2f       	mov	r24, r16
    353c:	91 2f       	mov	r25, r17
    353e:	2e 3f       	cpi	r18, 0xFE	; 254
    3540:	31 05       	cpc	r19, r1
    3542:	41 05       	cpc	r20, r1
    3544:	51 05       	cpc	r21, r1
    3546:	61 05       	cpc	r22, r1
    3548:	71 05       	cpc	r23, r1
    354a:	81 05       	cpc	r24, r1
    354c:	91 05       	cpc	r25, r1
    354e:	09 f0       	breq	.+2      	; 0x3552 <set_rate_8_bit+0x3c2>
    3550:	a0 f5       	brcc	.+104    	; 0x35ba <set_rate_8_bit+0x42a>
    3552:	8b 85       	ldd	r24, Y+11	; 0x0b
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	88 0f       	add	r24, r24
    355e:	99 1f       	adc	r25, r25
    3560:	9e 01       	movw	r18, r28
    3562:	2f 5f       	subi	r18, 0xFF	; 255
    3564:	3f 4f       	sbci	r19, 0xFF	; 255
    3566:	82 0f       	add	r24, r18
    3568:	93 1f       	adc	r25, r19
    356a:	ca 96       	adiw	r24, 0x3a	; 58
    356c:	fc 01       	movw	r30, r24
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	a2 81       	ldd	r26, Z+2	; 0x02
    3574:	b3 81       	ldd	r27, Z+3	; 0x03
    3576:	2f 81       	ldd	r18, Y+7	; 0x07
    3578:	38 85       	ldd	r19, Y+8	; 0x08
    357a:	49 85       	ldd	r20, Y+9	; 0x09
    357c:	5a 85       	ldd	r21, Y+10	; 0x0a
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__cmpsf2>
    3586:	18 16       	cp	r1, r24
    3588:	c4 f0       	brlt	.+48     	; 0x35ba <set_rate_8_bit+0x42a>
    358a:	8b 85       	ldd	r24, Y+11	; 0x0b
    358c:	88 2f       	mov	r24, r24
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	9e 01       	movw	r18, r28
    359a:	2f 5f       	subi	r18, 0xFF	; 255
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	82 0f       	add	r24, r18
    35a0:	93 1f       	adc	r25, r19
    35a2:	ca 96       	adiw	r24, 0x3a	; 58
    35a4:	fc 01       	movw	r30, r24
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	a2 81       	ldd	r26, Z+2	; 0x02
    35ac:	b3 81       	ldd	r27, Z+3	; 0x03
    35ae:	8f 83       	std	Y+7, r24	; 0x07
    35b0:	98 87       	std	Y+8, r25	; 0x08
    35b2:	a9 87       	std	Y+9, r26	; 0x09
    35b4:	ba 87       	std	Y+10, r27	; 0x0a
    35b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    35b8:	8e 83       	std	Y+6, r24	; 0x06
    35ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	8b 87       	std	Y+11, r24	; 0x0b
    35c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    35c2:	85 30       	cpi	r24, 0x05	; 5
    35c4:	08 f4       	brcc	.+2      	; 0x35c8 <set_rate_8_bit+0x438>
    35c6:	94 cf       	rjmp	.-216    	; 0x34f0 <set_rate_8_bit+0x360>
    35c8:	ce 01       	movw	r24, r28
    35ca:	81 5b       	subi	r24, 0xB1	; 177
    35cc:	9f 4f       	sbci	r25, 0xFF	; 255
    35ce:	fc 01       	movw	r30, r24
    35d0:	80 81       	ld	r24, Z
    35d2:	88 2f       	mov	r24, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	9c 01       	movw	r18, r24
    35d8:	c9 01       	movw	r24, r18
    35da:	88 0f       	add	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	9c 01       	movw	r18, r24
    35e0:	c9 01       	movw	r24, r18
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	82 1b       	sub	r24, r18
    35f0:	93 0b       	sbc	r25, r19
    35f2:	80 58       	subi	r24, 0x80	; 128
    35f4:	9d 4f       	sbci	r25, 0xFD	; 253
    35f6:	fc 01       	movw	r30, r24
    35f8:	40 81       	ld	r20, Z
    35fa:	51 81       	ldd	r21, Z+1	; 0x01
    35fc:	ce 01       	movw	r24, r28
    35fe:	81 5b       	subi	r24, 0xB1	; 177
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	fc 01       	movw	r30, r24
    3604:	80 81       	ld	r24, Z
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9c 01       	movw	r18, r24
    360c:	c9 01       	movw	r24, r18
    360e:	88 0f       	add	r24, r24
    3610:	99 1f       	adc	r25, r25
    3612:	9c 01       	movw	r18, r24
    3614:	c9 01       	movw	r24, r18
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	88 0f       	add	r24, r24
    361c:	99 1f       	adc	r25, r25
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	82 1b       	sub	r24, r18
    3624:	93 0b       	sbc	r25, r19
    3626:	80 58       	subi	r24, 0x80	; 128
    3628:	9d 4f       	sbci	r25, 0xFD	; 253
    362a:	fc 01       	movw	r30, r24
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	fc 01       	movw	r30, r24
    3632:	80 81       	ld	r24, Z
    3634:	87 7f       	andi	r24, 0xF7	; 247
    3636:	fa 01       	movw	r30, r20
    3638:	80 83       	st	Z, r24
    363a:	ce 01       	movw	r24, r28
    363c:	81 5b       	subi	r24, 0xB1	; 177
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	fc 01       	movw	r30, r24
    3642:	80 81       	ld	r24, Z
    3644:	88 2f       	mov	r24, r24
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	9c 01       	movw	r18, r24
    364a:	c9 01       	movw	r24, r18
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	9c 01       	movw	r18, r24
    3652:	c9 01       	movw	r24, r18
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	88 0f       	add	r24, r24
    365e:	99 1f       	adc	r25, r25
    3660:	82 1b       	sub	r24, r18
    3662:	93 0b       	sbc	r25, r19
    3664:	82 58       	subi	r24, 0x82	; 130
    3666:	9d 4f       	sbci	r25, 0xFD	; 253
    3668:	fc 01       	movw	r30, r24
    366a:	80 81       	ld	r24, Z
    366c:	91 81       	ldd	r25, Z+1	; 0x01
    366e:	fc 01       	movw	r30, r24
    3670:	80 81       	ld	r24, Z
    3672:	89 8b       	std	Y+17, r24	; 0x11
    3674:	ce 01       	movw	r24, r28
    3676:	81 5b       	subi	r24, 0xB1	; 177
    3678:	9f 4f       	sbci	r25, 0xFF	; 255
    367a:	fc 01       	movw	r30, r24
    367c:	80 81       	ld	r24, Z
    367e:	88 2f       	mov	r24, r24
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	9c 01       	movw	r18, r24
    3684:	c9 01       	movw	r24, r18
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	9c 01       	movw	r18, r24
    368c:	c9 01       	movw	r24, r18
    368e:	88 0f       	add	r24, r24
    3690:	99 1f       	adc	r25, r25
    3692:	88 0f       	add	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	88 0f       	add	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	82 1b       	sub	r24, r18
    369c:	93 0b       	sbc	r25, r19
    369e:	82 58       	subi	r24, 0x82	; 130
    36a0:	9d 4f       	sbci	r25, 0xFD	; 253
    36a2:	fc 01       	movw	r30, r24
    36a4:	80 81       	ld	r24, Z
    36a6:	91 81       	ldd	r25, Z+1	; 0x01
    36a8:	29 89       	ldd	r18, Y+17	; 0x11
    36aa:	22 60       	ori	r18, 0x02	; 2
    36ac:	2e 7f       	andi	r18, 0xFE	; 254
    36ae:	fc 01       	movw	r30, r24
    36b0:	20 83       	st	Z, r18
    36b2:	ce 01       	movw	r24, r28
    36b4:	81 5b       	subi	r24, 0xB1	; 177
    36b6:	9f 4f       	sbci	r25, 0xFF	; 255
    36b8:	fc 01       	movw	r30, r24
    36ba:	80 81       	ld	r24, Z
    36bc:	88 2f       	mov	r24, r24
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9c 01       	movw	r18, r24
    36c2:	c9 01       	movw	r24, r18
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	9c 01       	movw	r18, r24
    36ca:	c9 01       	movw	r24, r18
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	82 1b       	sub	r24, r18
    36da:	93 0b       	sbc	r25, r19
    36dc:	8c 57       	subi	r24, 0x7C	; 124
    36de:	9d 4f       	sbci	r25, 0xFD	; 253
    36e0:	fc 01       	movw	r30, r24
    36e2:	a0 81       	ld	r26, Z
    36e4:	b1 81       	ldd	r27, Z+1	; 0x01
    36e6:	8e 81       	ldd	r24, Y+6	; 0x06
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	88 0f       	add	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	9e 01       	movw	r18, r28
    36fa:	2f 5f       	subi	r18, 0xFF	; 255
    36fc:	3f 4f       	sbci	r19, 0xFF	; 255
    36fe:	82 0f       	add	r24, r18
    3700:	93 1f       	adc	r25, r19
    3702:	fc 01       	movw	r30, r24
    3704:	72 96       	adiw	r30, 0x12	; 18
    3706:	20 81       	ld	r18, Z
    3708:	31 81       	ldd	r19, Z+1	; 0x01
    370a:	42 81       	ldd	r20, Z+2	; 0x02
    370c:	53 81       	ldd	r21, Z+3	; 0x03
    370e:	64 81       	ldd	r22, Z+4	; 0x04
    3710:	75 81       	ldd	r23, Z+5	; 0x05
    3712:	86 81       	ldd	r24, Z+6	; 0x06
    3714:	97 81       	ldd	r25, Z+7	; 0x07
    3716:	82 2f       	mov	r24, r18
    3718:	8c 93       	st	X, r24
    371a:	1c 86       	std	Y+12, r1	; 0x0c
    371c:	8e 81       	ldd	r24, Y+6	; 0x06
    371e:	88 2f       	mov	r24, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	88 0f       	add	r24, r24
    3724:	99 1f       	adc	r25, r25
    3726:	84 55       	subi	r24, 0x54	; 84
    3728:	9d 4f       	sbci	r25, 0xFD	; 253
    372a:	fc 01       	movw	r30, r24
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	80 34       	cpi	r24, 0x40	; 64
    3732:	91 05       	cpc	r25, r1
    3734:	b9 f0       	breq	.+46     	; 0x3764 <set_rate_8_bit+0x5d4>
    3736:	81 34       	cpi	r24, 0x41	; 65
    3738:	91 05       	cpc	r25, r1
    373a:	30 f4       	brcc	.+12     	; 0x3748 <set_rate_8_bit+0x5b8>
    373c:	81 30       	cpi	r24, 0x01	; 1
    373e:	91 05       	cpc	r25, r1
    3740:	59 f0       	breq	.+22     	; 0x3758 <set_rate_8_bit+0x5c8>
    3742:	08 97       	sbiw	r24, 0x08	; 8
    3744:	61 f0       	breq	.+24     	; 0x375e <set_rate_8_bit+0x5ce>
    3746:	17 c0       	rjmp	.+46     	; 0x3776 <set_rate_8_bit+0x5e6>
    3748:	81 15       	cp	r24, r1
    374a:	f1 e0       	ldi	r31, 0x01	; 1
    374c:	9f 07       	cpc	r25, r31
    374e:	69 f0       	breq	.+26     	; 0x376a <set_rate_8_bit+0x5da>
    3750:	81 15       	cp	r24, r1
    3752:	94 40       	sbci	r25, 0x04	; 4
    3754:	69 f0       	breq	.+26     	; 0x3770 <set_rate_8_bit+0x5e0>
    3756:	0f c0       	rjmp	.+30     	; 0x3776 <set_rate_8_bit+0x5e6>
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	8c 87       	std	Y+12, r24	; 0x0c
    375c:	0c c0       	rjmp	.+24     	; 0x3776 <set_rate_8_bit+0x5e6>
    375e:	82 e0       	ldi	r24, 0x02	; 2
    3760:	8c 87       	std	Y+12, r24	; 0x0c
    3762:	09 c0       	rjmp	.+18     	; 0x3776 <set_rate_8_bit+0x5e6>
    3764:	83 e0       	ldi	r24, 0x03	; 3
    3766:	8c 87       	std	Y+12, r24	; 0x0c
    3768:	06 c0       	rjmp	.+12     	; 0x3776 <set_rate_8_bit+0x5e6>
    376a:	84 e0       	ldi	r24, 0x04	; 4
    376c:	8c 87       	std	Y+12, r24	; 0x0c
    376e:	03 c0       	rjmp	.+6      	; 0x3776 <set_rate_8_bit+0x5e6>
    3770:	85 e0       	ldi	r24, 0x05	; 5
    3772:	8c 87       	std	Y+12, r24	; 0x0c
    3774:	00 00       	nop
    3776:	ce 01       	movw	r24, r28
    3778:	81 5b       	subi	r24, 0xB1	; 177
    377a:	9f 4f       	sbci	r25, 0xFF	; 255
    377c:	fc 01       	movw	r30, r24
    377e:	80 81       	ld	r24, Z
    3780:	88 2f       	mov	r24, r24
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9c 01       	movw	r18, r24
    3786:	c9 01       	movw	r24, r18
    3788:	88 0f       	add	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	9c 01       	movw	r18, r24
    378e:	c9 01       	movw	r24, r18
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	88 0f       	add	r24, r24
    379a:	99 1f       	adc	r25, r25
    379c:	82 1b       	sub	r24, r18
    379e:	93 0b       	sbc	r25, r19
    37a0:	80 58       	subi	r24, 0x80	; 128
    37a2:	9d 4f       	sbci	r25, 0xFD	; 253
    37a4:	fc 01       	movw	r30, r24
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	fc 01       	movw	r30, r24
    37ac:	80 81       	ld	r24, Z
    37ae:	8a 8b       	std	Y+18, r24	; 0x12
    37b0:	ce 01       	movw	r24, r28
    37b2:	81 5b       	subi	r24, 0xB1	; 177
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	fc 01       	movw	r30, r24
    37b8:	80 81       	ld	r24, Z
    37ba:	88 2f       	mov	r24, r24
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	9c 01       	movw	r18, r24
    37c0:	c9 01       	movw	r24, r18
    37c2:	88 0f       	add	r24, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	9c 01       	movw	r18, r24
    37c8:	c9 01       	movw	r24, r18
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	82 1b       	sub	r24, r18
    37d8:	93 0b       	sbc	r25, r19
    37da:	80 58       	subi	r24, 0x80	; 128
    37dc:	9d 4f       	sbci	r25, 0xFD	; 253
    37de:	fc 01       	movw	r30, r24
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	2a 89       	ldd	r18, Y+18	; 0x12
    37e6:	32 2f       	mov	r19, r18
    37e8:	38 7f       	andi	r19, 0xF8	; 248
    37ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    37ec:	23 2b       	or	r18, r19
    37ee:	fc 01       	movw	r30, r24
    37f0:	20 83       	st	Z, r18
    37f2:	01 c0       	rjmp	.+2      	; 0x37f6 <set_rate_8_bit+0x666>
    37f4:	00 00       	nop
    37f6:	c9 5a       	subi	r28, 0xA9	; 169
    37f8:	df 4f       	sbci	r29, 0xFF	; 255
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	ff 90       	pop	r15
    380e:	ef 90       	pop	r14
    3810:	df 90       	pop	r13
    3812:	cf 90       	pop	r12
    3814:	bf 90       	pop	r11
    3816:	af 90       	pop	r10
    3818:	9f 90       	pop	r9
    381a:	8f 90       	pop	r8
    381c:	7f 90       	pop	r7
    381e:	6f 90       	pop	r6
    3820:	08 95       	ret

00003822 <set_rate_16_bit>:
    3822:	6f 92       	push	r6
    3824:	7f 92       	push	r7
    3826:	8f 92       	push	r8
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	c6 55       	subi	r28, 0x56	; 86
    3844:	d1 09       	sbc	r29, r1
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	fe 01       	movw	r30, r28
    3852:	e2 5b       	subi	r30, 0xB2	; 178
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 83       	st	Z, r24
    3858:	ce 01       	movw	r24, r28
    385a:	81 5b       	subi	r24, 0xB1	; 177
    385c:	9f 4f       	sbci	r25, 0xFF	; 255
    385e:	dc 01       	movw	r26, r24
    3860:	0c 93       	st	X, r16
    3862:	fc 01       	movw	r30, r24
    3864:	11 83       	std	Z+1, r17	; 0x01
    3866:	dc 01       	movw	r26, r24
    3868:	12 96       	adiw	r26, 0x02	; 2
    386a:	2c 93       	st	X, r18
    386c:	fc 01       	movw	r30, r24
    386e:	33 83       	std	Z+3, r19	; 0x03
    3870:	dc 01       	movw	r26, r24
    3872:	14 96       	adiw	r26, 0x04	; 4
    3874:	4c 93       	st	X, r20
    3876:	fc 01       	movw	r30, r24
    3878:	55 83       	std	Z+5, r21	; 0x05
    387a:	dc 01       	movw	r26, r24
    387c:	16 96       	adiw	r26, 0x06	; 6
    387e:	6c 93       	st	X, r22
    3880:	fc 01       	movw	r30, r24
    3882:	77 83       	std	Z+7, r23	; 0x07
    3884:	ce 01       	movw	r24, r28
    3886:	82 5b       	subi	r24, 0xB2	; 178
    3888:	9f 4f       	sbci	r25, 0xFF	; 255
    388a:	dc 01       	movw	r26, r24
    388c:	8c 91       	ld	r24, X
    388e:	82 30       	cpi	r24, 0x02	; 2
    3890:	08 f0       	brcs	.+2      	; 0x3894 <set_rate_16_bit+0x72>
    3892:	fd c2       	rjmp	.+1530   	; 0x3e8e <set_rate_16_bit+0x66c>
    3894:	ce 01       	movw	r24, r28
    3896:	82 5b       	subi	r24, 0xB2	; 178
    3898:	9f 4f       	sbci	r25, 0xFF	; 255
    389a:	fc 01       	movw	r30, r24
    389c:	80 81       	ld	r24, Z
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	44 e1       	ldi	r20, 0x14	; 20
    38a4:	42 9f       	mul	r20, r18
    38a6:	c0 01       	movw	r24, r0
    38a8:	43 9f       	mul	r20, r19
    38aa:	90 0d       	add	r25, r0
    38ac:	11 24       	eor	r1, r1
    38ae:	88 56       	subi	r24, 0x68	; 104
    38b0:	9d 4f       	sbci	r25, 0xFD	; 253
    38b2:	21 e0       	ldi	r18, 0x01	; 1
    38b4:	dc 01       	movw	r26, r24
    38b6:	2c 93       	st	X, r18
    38b8:	28 e2       	ldi	r18, 0x28	; 40
    38ba:	ce 01       	movw	r24, r28
    38bc:	42 96       	adiw	r24, 0x12	; 18
    38be:	fc 01       	movw	r30, r24
    38c0:	32 2f       	mov	r19, r18
    38c2:	11 92       	st	Z+, r1
    38c4:	3a 95       	dec	r19
    38c6:	e9 f7       	brne	.-6      	; 0x38c2 <set_rate_16_bit+0xa0>
    38c8:	24 e1       	ldi	r18, 0x14	; 20
    38ca:	ce 01       	movw	r24, r28
    38cc:	ca 96       	adiw	r24, 0x3a	; 58
    38ce:	dc 01       	movw	r26, r24
    38d0:	e2 2f       	mov	r30, r18
    38d2:	1d 92       	st	X+, r1
    38d4:	ea 95       	dec	r30
    38d6:	e9 f7       	brne	.-6      	; 0x38d2 <set_rate_16_bit+0xb0>
    38d8:	8f ef       	ldi	r24, 0xFF	; 255
    38da:	9f ef       	ldi	r25, 0xFF	; 255
    38dc:	af e7       	ldi	r26, 0x7F	; 127
    38de:	bf e7       	ldi	r27, 0x7F	; 127
    38e0:	8a af       	std	Y+58, r24	; 0x3a
    38e2:	9b af       	std	Y+59, r25	; 0x3b
    38e4:	ac af       	std	Y+60, r26	; 0x3c
    38e6:	bd af       	std	Y+61, r27	; 0x3d
    38e8:	19 82       	std	Y+1, r1	; 0x01
    38ea:	1b c1       	rjmp	.+566    	; 0x3b22 <set_rate_16_bit+0x300>
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	88 2e       	mov	r8, r24
    38f0:	91 2c       	mov	r9, r1
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	88 2f       	mov	r24, r24
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	88 0f       	add	r24, r24
    38fa:	99 1f       	adc	r25, r25
    38fc:	84 55       	subi	r24, 0x54	; 84
    38fe:	9d 4f       	sbci	r25, 0xFD	; 253
    3900:	dc 01       	movw	r26, r24
    3902:	8d 91       	ld	r24, X+
    3904:	9c 91       	ld	r25, X
    3906:	cc 01       	movw	r24, r24
    3908:	a0 e0       	ldi	r26, 0x00	; 0
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
    3914:	6b 01       	movw	r12, r22
    3916:	7c 01       	movw	r14, r24
    3918:	fe 01       	movw	r30, r28
    391a:	e1 5b       	subi	r30, 0xB1	; 177
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	20 81       	ld	r18, Z
    3920:	31 81       	ldd	r19, Z+1	; 0x01
    3922:	42 81       	ldd	r20, Z+2	; 0x02
    3924:	53 81       	ldd	r21, Z+3	; 0x03
    3926:	64 81       	ldd	r22, Z+4	; 0x04
    3928:	75 81       	ldd	r23, Z+5	; 0x05
    392a:	86 81       	ldd	r24, Z+6	; 0x06
    392c:	97 81       	ldd	r25, Z+7	; 0x07
    392e:	0e 94 4b 28 	call	0x5096	; 0x5096 <__floatundisf>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9c 01       	movw	r18, r24
    3938:	ad 01       	movw	r20, r26
    393a:	c7 01       	movw	r24, r14
    393c:	b6 01       	movw	r22, r12
    393e:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	9c 01       	movw	r18, r24
    3948:	ad 01       	movw	r20, r26
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	74 e2       	ldi	r23, 0x24	; 36
    394e:	84 e7       	ldi	r24, 0x74	; 116
    3950:	9b e4       	ldi	r25, 0x4B	; 75
    3952:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	bc 01       	movw	r22, r24
    3964:	cd 01       	movw	r24, r26
    3966:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__fixunssfdi>
    3976:	a2 2e       	mov	r10, r18
    3978:	b3 2e       	mov	r11, r19
    397a:	c4 2e       	mov	r12, r20
    397c:	d5 2e       	mov	r13, r21
    397e:	e6 2e       	mov	r14, r22
    3980:	f7 2e       	mov	r15, r23
    3982:	08 2f       	mov	r16, r24
    3984:	19 2f       	mov	r17, r25
    3986:	c4 01       	movw	r24, r8
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	9e 01       	movw	r18, r28
    3996:	2f 5f       	subi	r18, 0xFF	; 255
    3998:	3f 4f       	sbci	r19, 0xFF	; 255
    399a:	82 0f       	add	r24, r18
    399c:	93 1f       	adc	r25, r19
    399e:	41 96       	adiw	r24, 0x11	; 17
    39a0:	fc 01       	movw	r30, r24
    39a2:	a0 82       	st	Z, r10
    39a4:	dc 01       	movw	r26, r24
    39a6:	11 96       	adiw	r26, 0x01	; 1
    39a8:	bc 92       	st	X, r11
    39aa:	fc 01       	movw	r30, r24
    39ac:	c2 82       	std	Z+2, r12	; 0x02
    39ae:	dc 01       	movw	r26, r24
    39b0:	13 96       	adiw	r26, 0x03	; 3
    39b2:	dc 92       	st	X, r13
    39b4:	fc 01       	movw	r30, r24
    39b6:	e4 82       	std	Z+4, r14	; 0x04
    39b8:	dc 01       	movw	r26, r24
    39ba:	15 96       	adiw	r26, 0x05	; 5
    39bc:	fc 92       	st	X, r15
    39be:	fc 01       	movw	r30, r24
    39c0:	06 83       	std	Z+6, r16	; 0x06
    39c2:	dc 01       	movw	r26, r24
    39c4:	17 96       	adiw	r26, 0x07	; 7
    39c6:	1c 93       	st	X, r17
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	88 2f       	mov	r24, r24
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	84 55       	subi	r24, 0x54	; 84
    39d4:	9d 4f       	sbci	r25, 0xFD	; 253
    39d6:	fc 01       	movw	r30, r24
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	cc 01       	movw	r24, r24
    39de:	a0 e0       	ldi	r26, 0x00	; 0
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 0e 28 	call	0x501c	; 0x501c <__floatunsisf>
    39ea:	3b 01       	movw	r6, r22
    39ec:	4c 01       	movw	r8, r24
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	88 2f       	mov	r24, r24
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	9e 01       	movw	r18, r28
    3a02:	2f 5f       	subi	r18, 0xFF	; 255
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
    3a06:	82 0f       	add	r24, r18
    3a08:	93 1f       	adc	r25, r19
    3a0a:	41 96       	adiw	r24, 0x11	; 17
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	ac 90       	ld	r10, X
    3a10:	fc 01       	movw	r30, r24
    3a12:	b1 80       	ldd	r11, Z+1	; 0x01
    3a14:	dc 01       	movw	r26, r24
    3a16:	12 96       	adiw	r26, 0x02	; 2
    3a18:	cc 90       	ld	r12, X
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	d3 80       	ldd	r13, Z+3	; 0x03
    3a1e:	dc 01       	movw	r26, r24
    3a20:	14 96       	adiw	r26, 0x04	; 4
    3a22:	ec 90       	ld	r14, X
    3a24:	fc 01       	movw	r30, r24
    3a26:	f5 80       	ldd	r15, Z+5	; 0x05
    3a28:	dc 01       	movw	r26, r24
    3a2a:	16 96       	adiw	r26, 0x06	; 6
    3a2c:	0c 91       	ld	r16, X
    3a2e:	fc 01       	movw	r30, r24
    3a30:	17 81       	ldd	r17, Z+7	; 0x07
    3a32:	2a 2d       	mov	r18, r10
    3a34:	3b 2d       	mov	r19, r11
    3a36:	4c 2d       	mov	r20, r12
    3a38:	5d 2d       	mov	r21, r13
    3a3a:	6e 2d       	mov	r22, r14
    3a3c:	7f 2d       	mov	r23, r15
    3a3e:	80 2f       	mov	r24, r16
    3a40:	91 2f       	mov	r25, r17
    3a42:	0e 94 4b 28 	call	0x5096	; 0x5096 <__floatundisf>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e8       	ldi	r20, 0x80	; 128
    3a50:	5f e3       	ldi	r21, 0x3F	; 63
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <__addsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9c 01       	movw	r18, r24
    3a60:	ad 01       	movw	r20, r26
    3a62:	c4 01       	movw	r24, r8
    3a64:	b3 01       	movw	r22, r6
    3a66:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9c 01       	movw	r18, r24
    3a70:	ad 01       	movw	r20, r26
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	74 e2       	ldi	r23, 0x24	; 36
    3a76:	84 e7       	ldi	r24, 0x74	; 116
    3a78:	9b e4       	ldi	r25, 0x4B	; 75
    3a7a:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__divsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	8d 87       	std	Y+13, r24	; 0x0d
    3a84:	9e 87       	std	Y+14, r25	; 0x0e
    3a86:	af 87       	std	Y+15, r26	; 0x0f
    3a88:	b8 8b       	std	Y+16, r27	; 0x10
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e1 5b       	subi	r30, 0xB1	; 177
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	20 81       	ld	r18, Z
    3a92:	31 81       	ldd	r19, Z+1	; 0x01
    3a94:	42 81       	ldd	r20, Z+2	; 0x02
    3a96:	53 81       	ldd	r21, Z+3	; 0x03
    3a98:	64 81       	ldd	r22, Z+4	; 0x04
    3a9a:	75 81       	ldd	r23, Z+5	; 0x05
    3a9c:	86 81       	ldd	r24, Z+6	; 0x06
    3a9e:	97 81       	ldd	r25, Z+7	; 0x07
    3aa0:	0e 94 4b 28 	call	0x5096	; 0x5096 <__floatundisf>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9c 01       	movw	r18, r24
    3aaa:	ad 01       	movw	r20, r26
    3aac:	6d 85       	ldd	r22, Y+13	; 0x0d
    3aae:	7e 85       	ldd	r23, Y+14	; 0x0e
    3ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab2:	98 89       	ldd	r25, Y+16	; 0x10
    3ab4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__subsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	8a 83       	std	Y+2, r24	; 0x02
    3abe:	9b 83       	std	Y+3, r25	; 0x03
    3ac0:	ac 83       	std	Y+4, r26	; 0x04
    3ac2:	bd 83       	std	Y+5, r27	; 0x05
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	a9 01       	movw	r20, r18
    3aca:	6a 81       	ldd	r22, Y+2	; 0x02
    3acc:	7b 81       	ldd	r23, Y+3	; 0x03
    3ace:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad2:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__cmpsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	4c f4       	brge	.+18     	; 0x3aec <set_rate_16_bit+0x2ca>
    3ada:	8a 81       	ldd	r24, Y+2	; 0x02
    3adc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ade:	ac 81       	ldd	r26, Y+4	; 0x04
    3ae0:	bd 81       	ldd	r27, Y+5	; 0x05
    3ae2:	b0 58       	subi	r27, 0x80	; 128
    3ae4:	8a 83       	std	Y+2, r24	; 0x02
    3ae6:	9b 83       	std	Y+3, r25	; 0x03
    3ae8:	ac 83       	std	Y+4, r26	; 0x04
    3aea:	bd 83       	std	Y+5, r27	; 0x05
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	88 2f       	mov	r24, r24
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	88 0f       	add	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	9e 01       	movw	r18, r28
    3afc:	2f 5f       	subi	r18, 0xFF	; 255
    3afe:	3f 4f       	sbci	r19, 0xFF	; 255
    3b00:	82 0f       	add	r24, r18
    3b02:	93 1f       	adc	r25, r19
    3b04:	9c 01       	movw	r18, r24
    3b06:	27 5c       	subi	r18, 0xC7	; 199
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b0e:	ac 81       	ldd	r26, Y+4	; 0x04
    3b10:	bd 81       	ldd	r27, Y+5	; 0x05
    3b12:	f9 01       	movw	r30, r18
    3b14:	80 83       	st	Z, r24
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	a2 83       	std	Z+2, r26	; 0x02
    3b1a:	b3 83       	std	Z+3, r27	; 0x03
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	8f 5f       	subi	r24, 0xFF	; 255
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	85 30       	cpi	r24, 0x05	; 5
    3b26:	08 f4       	brcc	.+2      	; 0x3b2a <set_rate_16_bit+0x308>
    3b28:	e1 ce       	rjmp	.-574    	; 0x38ec <set_rate_16_bit+0xca>
    3b2a:	84 e0       	ldi	r24, 0x04	; 4
    3b2c:	8e 83       	std	Y+6, r24	; 0x06
    3b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b30:	88 2f       	mov	r24, r24
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	88 0f       	add	r24, r24
    3b36:	99 1f       	adc	r25, r25
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	9e 01       	movw	r18, r28
    3b3e:	2f 5f       	subi	r18, 0xFF	; 255
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	82 0f       	add	r24, r18
    3b44:	93 1f       	adc	r25, r19
    3b46:	c9 96       	adiw	r24, 0x39	; 57
    3b48:	fc 01       	movw	r30, r24
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3b50:	b3 81       	ldd	r27, Z+3	; 0x03
    3b52:	8f 83       	std	Y+7, r24	; 0x07
    3b54:	98 87       	std	Y+8, r25	; 0x08
    3b56:	a9 87       	std	Y+9, r26	; 0x09
    3b58:	ba 87       	std	Y+10, r27	; 0x0a
    3b5a:	1b 86       	std	Y+11, r1	; 0x0b
    3b5c:	6b c0       	rjmp	.+214    	; 0x3c34 <set_rate_16_bit+0x412>
    3b5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b60:	88 2f       	mov	r24, r24
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	88 0f       	add	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	9e 01       	movw	r18, r28
    3b72:	2f 5f       	subi	r18, 0xFF	; 255
    3b74:	3f 4f       	sbci	r19, 0xFF	; 255
    3b76:	82 0f       	add	r24, r18
    3b78:	93 1f       	adc	r25, r19
    3b7a:	41 96       	adiw	r24, 0x11	; 17
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	ac 90       	ld	r10, X
    3b80:	fc 01       	movw	r30, r24
    3b82:	b1 80       	ldd	r11, Z+1	; 0x01
    3b84:	dc 01       	movw	r26, r24
    3b86:	12 96       	adiw	r26, 0x02	; 2
    3b88:	cc 90       	ld	r12, X
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	d3 80       	ldd	r13, Z+3	; 0x03
    3b8e:	dc 01       	movw	r26, r24
    3b90:	14 96       	adiw	r26, 0x04	; 4
    3b92:	ec 90       	ld	r14, X
    3b94:	fc 01       	movw	r30, r24
    3b96:	f5 80       	ldd	r15, Z+5	; 0x05
    3b98:	dc 01       	movw	r26, r24
    3b9a:	16 96       	adiw	r26, 0x06	; 6
    3b9c:	0c 91       	ld	r16, X
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	17 81       	ldd	r17, Z+7	; 0x07
    3ba2:	2a 2d       	mov	r18, r10
    3ba4:	3b 2d       	mov	r19, r11
    3ba6:	4c 2d       	mov	r20, r12
    3ba8:	5d 2d       	mov	r21, r13
    3baa:	6e 2d       	mov	r22, r14
    3bac:	7f 2d       	mov	r23, r15
    3bae:	80 2f       	mov	r24, r16
    3bb0:	91 2f       	mov	r25, r17
    3bb2:	2e 3f       	cpi	r18, 0xFE	; 254
    3bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb6:	41 05       	cpc	r20, r1
    3bb8:	51 05       	cpc	r21, r1
    3bba:	61 05       	cpc	r22, r1
    3bbc:	71 05       	cpc	r23, r1
    3bbe:	81 05       	cpc	r24, r1
    3bc0:	91 05       	cpc	r25, r1
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <set_rate_16_bit+0x3a4>
    3bc4:	a0 f5       	brcc	.+104    	; 0x3c2e <set_rate_16_bit+0x40c>
    3bc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bc8:	88 2f       	mov	r24, r24
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	88 0f       	add	r24, r24
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	9e 01       	movw	r18, r28
    3bd6:	2f 5f       	subi	r18, 0xFF	; 255
    3bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bda:	82 0f       	add	r24, r18
    3bdc:	93 1f       	adc	r25, r19
    3bde:	c9 96       	adiw	r24, 0x39	; 57
    3be0:	fc 01       	movw	r30, r24
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	a2 81       	ldd	r26, Z+2	; 0x02
    3be8:	b3 81       	ldd	r27, Z+3	; 0x03
    3bea:	2f 81       	ldd	r18, Y+7	; 0x07
    3bec:	38 85       	ldd	r19, Y+8	; 0x08
    3bee:	49 85       	ldd	r20, Y+9	; 0x09
    3bf0:	5a 85       	ldd	r21, Y+10	; 0x0a
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__cmpsf2>
    3bfa:	18 16       	cp	r1, r24
    3bfc:	c4 f0       	brlt	.+48     	; 0x3c2e <set_rate_16_bit+0x40c>
    3bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c00:	88 2f       	mov	r24, r24
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	9e 01       	movw	r18, r28
    3c0e:	2f 5f       	subi	r18, 0xFF	; 255
    3c10:	3f 4f       	sbci	r19, 0xFF	; 255
    3c12:	82 0f       	add	r24, r18
    3c14:	93 1f       	adc	r25, r19
    3c16:	c9 96       	adiw	r24, 0x39	; 57
    3c18:	fc 01       	movw	r30, r24
    3c1a:	80 81       	ld	r24, Z
    3c1c:	91 81       	ldd	r25, Z+1	; 0x01
    3c1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3c20:	b3 81       	ldd	r27, Z+3	; 0x03
    3c22:	8f 83       	std	Y+7, r24	; 0x07
    3c24:	98 87       	std	Y+8, r25	; 0x08
    3c26:	a9 87       	std	Y+9, r26	; 0x09
    3c28:	ba 87       	std	Y+10, r27	; 0x0a
    3c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c2c:	8e 83       	std	Y+6, r24	; 0x06
    3c2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c30:	8f 5f       	subi	r24, 0xFF	; 255
    3c32:	8b 87       	std	Y+11, r24	; 0x0b
    3c34:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c36:	85 30       	cpi	r24, 0x05	; 5
    3c38:	08 f4       	brcc	.+2      	; 0x3c3c <set_rate_16_bit+0x41a>
    3c3a:	91 cf       	rjmp	.-222    	; 0x3b5e <set_rate_16_bit+0x33c>
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	82 5b       	subi	r24, 0xB2	; 178
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	dc 01       	movw	r26, r24
    3c44:	8c 91       	ld	r24, X
    3c46:	28 2f       	mov	r18, r24
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	44 e1       	ldi	r20, 0x14	; 20
    3c4c:	42 9f       	mul	r20, r18
    3c4e:	c0 01       	movw	r24, r0
    3c50:	43 9f       	mul	r20, r19
    3c52:	90 0d       	add	r25, r0
    3c54:	11 24       	eor	r1, r1
    3c56:	84 56       	subi	r24, 0x64	; 100
    3c58:	9d 4f       	sbci	r25, 0xFD	; 253
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	80 81       	ld	r24, Z
    3c5e:	91 81       	ldd	r25, Z+1	; 0x01
    3c60:	9e 01       	movw	r18, r28
    3c62:	22 5b       	subi	r18, 0xB2	; 178
    3c64:	3f 4f       	sbci	r19, 0xFF	; 255
    3c66:	d9 01       	movw	r26, r18
    3c68:	2c 91       	ld	r18, X
    3c6a:	42 2f       	mov	r20, r18
    3c6c:	50 e0       	ldi	r21, 0x00	; 0
    3c6e:	64 e1       	ldi	r22, 0x14	; 20
    3c70:	64 9f       	mul	r22, r20
    3c72:	90 01       	movw	r18, r0
    3c74:	65 9f       	mul	r22, r21
    3c76:	30 0d       	add	r19, r0
    3c78:	11 24       	eor	r1, r1
    3c7a:	24 56       	subi	r18, 0x64	; 100
    3c7c:	3d 4f       	sbci	r19, 0xFD	; 253
    3c7e:	f9 01       	movw	r30, r18
    3c80:	20 81       	ld	r18, Z
    3c82:	31 81       	ldd	r19, Z+1	; 0x01
    3c84:	d9 01       	movw	r26, r18
    3c86:	2c 91       	ld	r18, X
    3c88:	27 7e       	andi	r18, 0xE7	; 231
    3c8a:	28 60       	ori	r18, 0x08	; 8
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	20 83       	st	Z, r18
    3c90:	ce 01       	movw	r24, r28
    3c92:	82 5b       	subi	r24, 0xB2	; 178
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	dc 01       	movw	r26, r24
    3c98:	8c 91       	ld	r24, X
    3c9a:	28 2f       	mov	r18, r24
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	44 e1       	ldi	r20, 0x14	; 20
    3ca0:	42 9f       	mul	r20, r18
    3ca2:	c0 01       	movw	r24, r0
    3ca4:	43 9f       	mul	r20, r19
    3ca6:	90 0d       	add	r25, r0
    3ca8:	11 24       	eor	r1, r1
    3caa:	86 56       	subi	r24, 0x66	; 102
    3cac:	9d 4f       	sbci	r25, 0xFD	; 253
    3cae:	fc 01       	movw	r30, r24
    3cb0:	80 81       	ld	r24, Z
    3cb2:	91 81       	ldd	r25, Z+1	; 0x01
    3cb4:	9e 01       	movw	r18, r28
    3cb6:	22 5b       	subi	r18, 0xB2	; 178
    3cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cba:	d9 01       	movw	r26, r18
    3cbc:	2c 91       	ld	r18, X
    3cbe:	42 2f       	mov	r20, r18
    3cc0:	50 e0       	ldi	r21, 0x00	; 0
    3cc2:	64 e1       	ldi	r22, 0x14	; 20
    3cc4:	64 9f       	mul	r22, r20
    3cc6:	90 01       	movw	r18, r0
    3cc8:	65 9f       	mul	r22, r21
    3cca:	30 0d       	add	r19, r0
    3ccc:	11 24       	eor	r1, r1
    3cce:	26 56       	subi	r18, 0x66	; 102
    3cd0:	3d 4f       	sbci	r19, 0xFD	; 253
    3cd2:	f9 01       	movw	r30, r18
    3cd4:	20 81       	ld	r18, Z
    3cd6:	31 81       	ldd	r19, Z+1	; 0x01
    3cd8:	d9 01       	movw	r26, r18
    3cda:	2c 91       	ld	r18, X
    3cdc:	2c 7f       	andi	r18, 0xFC	; 252
    3cde:	fc 01       	movw	r30, r24
    3ce0:	20 83       	st	Z, r18
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	82 5b       	subi	r24, 0xB2	; 178
    3ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce8:	dc 01       	movw	r26, r24
    3cea:	8c 91       	ld	r24, X
    3cec:	28 2f       	mov	r18, r24
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	44 e1       	ldi	r20, 0x14	; 20
    3cf2:	42 9f       	mul	r20, r18
    3cf4:	c0 01       	movw	r24, r0
    3cf6:	43 9f       	mul	r20, r19
    3cf8:	90 0d       	add	r25, r0
    3cfa:	11 24       	eor	r1, r1
    3cfc:	8c 55       	subi	r24, 0x5C	; 92
    3cfe:	9d 4f       	sbci	r25, 0xFD	; 253
    3d00:	dc 01       	movw	r26, r24
    3d02:	ed 91       	ld	r30, X+
    3d04:	fc 91       	ld	r31, X
    3d06:	8e 81       	ldd	r24, Y+6	; 0x06
    3d08:	88 2f       	mov	r24, r24
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	9e 01       	movw	r18, r28
    3d1a:	2f 5f       	subi	r18, 0xFF	; 255
    3d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1e:	82 0f       	add	r24, r18
    3d20:	93 1f       	adc	r25, r19
    3d22:	41 96       	adiw	r24, 0x11	; 17
    3d24:	dc 01       	movw	r26, r24
    3d26:	ac 90       	ld	r10, X
    3d28:	dc 01       	movw	r26, r24
    3d2a:	11 96       	adiw	r26, 0x01	; 1
    3d2c:	bc 90       	ld	r11, X
    3d2e:	dc 01       	movw	r26, r24
    3d30:	12 96       	adiw	r26, 0x02	; 2
    3d32:	cc 90       	ld	r12, X
    3d34:	dc 01       	movw	r26, r24
    3d36:	13 96       	adiw	r26, 0x03	; 3
    3d38:	dc 90       	ld	r13, X
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	14 96       	adiw	r26, 0x04	; 4
    3d3e:	ec 90       	ld	r14, X
    3d40:	dc 01       	movw	r26, r24
    3d42:	15 96       	adiw	r26, 0x05	; 5
    3d44:	fc 90       	ld	r15, X
    3d46:	dc 01       	movw	r26, r24
    3d48:	16 96       	adiw	r26, 0x06	; 6
    3d4a:	0c 91       	ld	r16, X
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	17 96       	adiw	r26, 0x07	; 7
    3d50:	1c 91       	ld	r17, X
    3d52:	2a 2d       	mov	r18, r10
    3d54:	3b 2d       	mov	r19, r11
    3d56:	4c 2d       	mov	r20, r12
    3d58:	5d 2d       	mov	r21, r13
    3d5a:	6e 2d       	mov	r22, r14
    3d5c:	7f 2d       	mov	r23, r15
    3d5e:	80 2f       	mov	r24, r16
    3d60:	91 2f       	mov	r25, r17
    3d62:	08 e0       	ldi	r16, 0x08	; 8
    3d64:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__lshrdi3>
    3d68:	a2 2e       	mov	r10, r18
    3d6a:	b3 2e       	mov	r11, r19
    3d6c:	c4 2e       	mov	r12, r20
    3d6e:	d5 2e       	mov	r13, r21
    3d70:	e6 2e       	mov	r14, r22
    3d72:	f7 2e       	mov	r15, r23
    3d74:	08 2f       	mov	r16, r24
    3d76:	19 2f       	mov	r17, r25
    3d78:	8a 2d       	mov	r24, r10
    3d7a:	80 83       	st	Z, r24
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	82 5b       	subi	r24, 0xB2	; 178
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	fc 01       	movw	r30, r24
    3d84:	80 81       	ld	r24, Z
    3d86:	28 2f       	mov	r18, r24
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	44 e1       	ldi	r20, 0x14	; 20
    3d8c:	42 9f       	mul	r20, r18
    3d8e:	c0 01       	movw	r24, r0
    3d90:	43 9f       	mul	r20, r19
    3d92:	90 0d       	add	r25, r0
    3d94:	11 24       	eor	r1, r1
    3d96:	8e 55       	subi	r24, 0x5E	; 94
    3d98:	9d 4f       	sbci	r25, 0xFD	; 253
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	a0 81       	ld	r26, Z
    3d9e:	b1 81       	ldd	r27, Z+1	; 0x01
    3da0:	8e 81       	ldd	r24, Y+6	; 0x06
    3da2:	88 2f       	mov	r24, r24
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	88 0f       	add	r24, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	88 0f       	add	r24, r24
    3dac:	99 1f       	adc	r25, r25
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	9e 01       	movw	r18, r28
    3db4:	2f 5f       	subi	r18, 0xFF	; 255
    3db6:	3f 4f       	sbci	r19, 0xFF	; 255
    3db8:	82 0f       	add	r24, r18
    3dba:	93 1f       	adc	r25, r19
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	71 96       	adiw	r30, 0x11	; 17
    3dc0:	20 81       	ld	r18, Z
    3dc2:	31 81       	ldd	r19, Z+1	; 0x01
    3dc4:	42 81       	ldd	r20, Z+2	; 0x02
    3dc6:	53 81       	ldd	r21, Z+3	; 0x03
    3dc8:	64 81       	ldd	r22, Z+4	; 0x04
    3dca:	75 81       	ldd	r23, Z+5	; 0x05
    3dcc:	86 81       	ldd	r24, Z+6	; 0x06
    3dce:	97 81       	ldd	r25, Z+7	; 0x07
    3dd0:	82 2f       	mov	r24, r18
    3dd2:	8c 93       	st	X, r24
    3dd4:	1c 86       	std	Y+12, r1	; 0x0c
    3dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd8:	88 2f       	mov	r24, r24
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	84 55       	subi	r24, 0x54	; 84
    3de2:	9d 4f       	sbci	r25, 0xFD	; 253
    3de4:	dc 01       	movw	r26, r24
    3de6:	8d 91       	ld	r24, X+
    3de8:	9c 91       	ld	r25, X
    3dea:	80 34       	cpi	r24, 0x40	; 64
    3dec:	91 05       	cpc	r25, r1
    3dee:	b9 f0       	breq	.+46     	; 0x3e1e <set_rate_16_bit+0x5fc>
    3df0:	81 34       	cpi	r24, 0x41	; 65
    3df2:	91 05       	cpc	r25, r1
    3df4:	30 f4       	brcc	.+12     	; 0x3e02 <set_rate_16_bit+0x5e0>
    3df6:	81 30       	cpi	r24, 0x01	; 1
    3df8:	91 05       	cpc	r25, r1
    3dfa:	59 f0       	breq	.+22     	; 0x3e12 <set_rate_16_bit+0x5f0>
    3dfc:	08 97       	sbiw	r24, 0x08	; 8
    3dfe:	61 f0       	breq	.+24     	; 0x3e18 <set_rate_16_bit+0x5f6>
    3e00:	17 c0       	rjmp	.+46     	; 0x3e30 <set_rate_16_bit+0x60e>
    3e02:	81 15       	cp	r24, r1
    3e04:	b1 e0       	ldi	r27, 0x01	; 1
    3e06:	9b 07       	cpc	r25, r27
    3e08:	69 f0       	breq	.+26     	; 0x3e24 <set_rate_16_bit+0x602>
    3e0a:	81 15       	cp	r24, r1
    3e0c:	94 40       	sbci	r25, 0x04	; 4
    3e0e:	69 f0       	breq	.+26     	; 0x3e2a <set_rate_16_bit+0x608>
    3e10:	0f c0       	rjmp	.+30     	; 0x3e30 <set_rate_16_bit+0x60e>
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	8c 87       	std	Y+12, r24	; 0x0c
    3e16:	0c c0       	rjmp	.+24     	; 0x3e30 <set_rate_16_bit+0x60e>
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	8c 87       	std	Y+12, r24	; 0x0c
    3e1c:	09 c0       	rjmp	.+18     	; 0x3e30 <set_rate_16_bit+0x60e>
    3e1e:	83 e0       	ldi	r24, 0x03	; 3
    3e20:	8c 87       	std	Y+12, r24	; 0x0c
    3e22:	06 c0       	rjmp	.+12     	; 0x3e30 <set_rate_16_bit+0x60e>
    3e24:	84 e0       	ldi	r24, 0x04	; 4
    3e26:	8c 87       	std	Y+12, r24	; 0x0c
    3e28:	03 c0       	rjmp	.+6      	; 0x3e30 <set_rate_16_bit+0x60e>
    3e2a:	85 e0       	ldi	r24, 0x05	; 5
    3e2c:	8c 87       	std	Y+12, r24	; 0x0c
    3e2e:	00 00       	nop
    3e30:	ce 01       	movw	r24, r28
    3e32:	82 5b       	subi	r24, 0xB2	; 178
    3e34:	9f 4f       	sbci	r25, 0xFF	; 255
    3e36:	dc 01       	movw	r26, r24
    3e38:	8c 91       	ld	r24, X
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	44 e1       	ldi	r20, 0x14	; 20
    3e40:	42 9f       	mul	r20, r18
    3e42:	c0 01       	movw	r24, r0
    3e44:	43 9f       	mul	r20, r19
    3e46:	90 0d       	add	r25, r0
    3e48:	11 24       	eor	r1, r1
    3e4a:	84 56       	subi	r24, 0x64	; 100
    3e4c:	9d 4f       	sbci	r25, 0xFD	; 253
    3e4e:	fc 01       	movw	r30, r24
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	dc 01       	movw	r26, r24
    3e56:	8c 91       	ld	r24, X
    3e58:	89 8b       	std	Y+17, r24	; 0x11
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	82 5b       	subi	r24, 0xB2	; 178
    3e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e60:	fc 01       	movw	r30, r24
    3e62:	80 81       	ld	r24, Z
    3e64:	28 2f       	mov	r18, r24
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	44 e1       	ldi	r20, 0x14	; 20
    3e6a:	42 9f       	mul	r20, r18
    3e6c:	c0 01       	movw	r24, r0
    3e6e:	43 9f       	mul	r20, r19
    3e70:	90 0d       	add	r25, r0
    3e72:	11 24       	eor	r1, r1
    3e74:	84 56       	subi	r24, 0x64	; 100
    3e76:	9d 4f       	sbci	r25, 0xFD	; 253
    3e78:	dc 01       	movw	r26, r24
    3e7a:	8d 91       	ld	r24, X+
    3e7c:	9c 91       	ld	r25, X
    3e7e:	29 89       	ldd	r18, Y+17	; 0x11
    3e80:	32 2f       	mov	r19, r18
    3e82:	38 7f       	andi	r19, 0xF8	; 248
    3e84:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e86:	23 2b       	or	r18, r19
    3e88:	fc 01       	movw	r30, r24
    3e8a:	20 83       	st	Z, r18
    3e8c:	01 c0       	rjmp	.+2      	; 0x3e90 <set_rate_16_bit+0x66e>
    3e8e:	00 00       	nop
    3e90:	ca 5a       	subi	r28, 0xAA	; 170
    3e92:	df 4f       	sbci	r29, 0xFF	; 255
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	df 90       	pop	r13
    3eac:	cf 90       	pop	r12
    3eae:	bf 90       	pop	r11
    3eb0:	af 90       	pop	r10
    3eb2:	9f 90       	pop	r9
    3eb4:	8f 90       	pop	r8
    3eb6:	7f 90       	pop	r7
    3eb8:	6f 90       	pop	r6
    3eba:	08 95       	ret

00003ebc <morph_config_timer_acquire_timer>:
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	00 d0       	rcall	.+0      	; 0x3ec2 <morph_config_timer_acquire_timer+0x6>
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	89 83       	std	Y+1, r24	; 0x01
    3ec8:	6a 83       	std	Y+2, r22	; 0x02
    3eca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ecc:	89 30       	cpi	r24, 0x09	; 9
    3ece:	b8 f4       	brcc	.+46     	; 0x3efe <morph_config_timer_acquire_timer+0x42>
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	88 2f       	mov	r24, r24
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	9c 01       	movw	r18, r24
    3ed8:	c9 01       	movw	r24, r18
    3eda:	88 0f       	add	r24, r24
    3edc:	99 1f       	adc	r25, r25
    3ede:	9c 01       	movw	r18, r24
    3ee0:	c9 01       	movw	r24, r18
    3ee2:	88 0f       	add	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	88 0f       	add	r24, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	82 1b       	sub	r24, r18
    3ef0:	93 0b       	sbc	r25, r19
    3ef2:	84 58       	subi	r24, 0x84	; 132
    3ef4:	9d 4f       	sbci	r25, 0xFD	; 253
    3ef6:	21 e0       	ldi	r18, 0x01	; 1
    3ef8:	fc 01       	movw	r30, r24
    3efa:	20 83       	st	Z, r18
    3efc:	11 c0       	rjmp	.+34     	; 0x3f20 <morph_config_timer_acquire_timer+0x64>
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	81 31       	cpi	r24, 0x11	; 17
    3f02:	70 f4       	brcc	.+28     	; 0x3f20 <morph_config_timer_acquire_timer+0x64>
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	28 2f       	mov	r18, r24
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	44 e1       	ldi	r20, 0x14	; 20
    3f0c:	42 9f       	mul	r20, r18
    3f0e:	c0 01       	movw	r24, r0
    3f10:	43 9f       	mul	r20, r19
    3f12:	90 0d       	add	r25, r0
    3f14:	11 24       	eor	r1, r1
    3f16:	88 56       	subi	r24, 0x68	; 104
    3f18:	9d 4f       	sbci	r25, 0xFD	; 253
    3f1a:	21 e0       	ldi	r18, 0x01	; 1
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	20 83       	st	Z, r18
    3f20:	00 00       	nop
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	08 95       	ret

00003f2c <morph_config_timer_release_timer>:
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	00 d0       	rcall	.+0      	; 0x3f32 <morph_config_timer_release_timer+0x6>
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
    3f36:	89 83       	std	Y+1, r24	; 0x01
    3f38:	6a 83       	std	Y+2, r22	; 0x02
    3f3a:	00 00       	nop
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	08 95       	ret

00003f46 <morph_config_timer_set_rate>:
    3f46:	8f 92       	push	r8
    3f48:	9f 92       	push	r9
    3f4a:	af 92       	push	r10
    3f4c:	bf 92       	push	r11
    3f4e:	cf 92       	push	r12
    3f50:	df 92       	push	r13
    3f52:	ef 92       	push	r14
    3f54:	ff 92       	push	r15
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
    3f5e:	cd b7       	in	r28, 0x3d	; 61
    3f60:	de b7       	in	r29, 0x3e	; 62
    3f62:	2a 97       	sbiw	r28, 0x0a	; 10
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	89 83       	std	Y+1, r24	; 0x01
    3f70:	6a 83       	std	Y+2, r22	; 0x02
    3f72:	eb 82       	std	Y+3, r14	; 0x03
    3f74:	fc 82       	std	Y+4, r15	; 0x04
    3f76:	0d 83       	std	Y+5, r16	; 0x05
    3f78:	1e 83       	std	Y+6, r17	; 0x06
    3f7a:	2f 83       	std	Y+7, r18	; 0x07
    3f7c:	38 87       	std	Y+8, r19	; 0x08
    3f7e:	49 87       	std	Y+9, r20	; 0x09
    3f80:	5a 87       	std	Y+10, r21	; 0x0a
    3f82:	8a 81       	ldd	r24, Y+2	; 0x02
    3f84:	89 30       	cpi	r24, 0x09	; 9
    3f86:	a0 f4       	brcc	.+40     	; 0x3fb0 <morph_config_timer_set_rate+0x6a>
    3f88:	8b 80       	ldd	r8, Y+3	; 0x03
    3f8a:	9c 80       	ldd	r9, Y+4	; 0x04
    3f8c:	ad 80       	ldd	r10, Y+5	; 0x05
    3f8e:	be 80       	ldd	r11, Y+6	; 0x06
    3f90:	cf 80       	ldd	r12, Y+7	; 0x07
    3f92:	d8 84       	ldd	r13, Y+8	; 0x08
    3f94:	e9 84       	ldd	r14, Y+9	; 0x09
    3f96:	fa 84       	ldd	r15, Y+10	; 0x0a
    3f98:	08 2d       	mov	r16, r8
    3f9a:	19 2d       	mov	r17, r9
    3f9c:	2a 2d       	mov	r18, r10
    3f9e:	3b 2d       	mov	r19, r11
    3fa0:	4c 2d       	mov	r20, r12
    3fa2:	5d 2d       	mov	r21, r13
    3fa4:	6e 2d       	mov	r22, r14
    3fa6:	7f 2d       	mov	r23, r15
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	0e 94 c8 18 	call	0x3190	; 0x3190 <set_rate_8_bit>
    3fae:	16 c0       	rjmp	.+44     	; 0x3fdc <morph_config_timer_set_rate+0x96>
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	81 31       	cpi	r24, 0x11	; 17
    3fb4:	98 f4       	brcc	.+38     	; 0x3fdc <morph_config_timer_set_rate+0x96>
    3fb6:	8b 80       	ldd	r8, Y+3	; 0x03
    3fb8:	9c 80       	ldd	r9, Y+4	; 0x04
    3fba:	ad 80       	ldd	r10, Y+5	; 0x05
    3fbc:	be 80       	ldd	r11, Y+6	; 0x06
    3fbe:	cf 80       	ldd	r12, Y+7	; 0x07
    3fc0:	d8 84       	ldd	r13, Y+8	; 0x08
    3fc2:	e9 84       	ldd	r14, Y+9	; 0x09
    3fc4:	fa 84       	ldd	r15, Y+10	; 0x0a
    3fc6:	08 2d       	mov	r16, r8
    3fc8:	19 2d       	mov	r17, r9
    3fca:	2a 2d       	mov	r18, r10
    3fcc:	3b 2d       	mov	r19, r11
    3fce:	4c 2d       	mov	r20, r12
    3fd0:	5d 2d       	mov	r21, r13
    3fd2:	6e 2d       	mov	r22, r14
    3fd4:	7f 2d       	mov	r23, r15
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	0e 94 11 1c 	call	0x3822	; 0x3822 <set_rate_16_bit>
    3fdc:	00 00       	nop
    3fde:	2a 96       	adiw	r28, 0x0a	; 10
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	f8 94       	cli
    3fe4:	de bf       	out	0x3e, r29	; 62
    3fe6:	0f be       	out	0x3f, r0	; 63
    3fe8:	cd bf       	out	0x3d, r28	; 61
    3fea:	df 91       	pop	r29
    3fec:	cf 91       	pop	r28
    3fee:	1f 91       	pop	r17
    3ff0:	0f 91       	pop	r16
    3ff2:	ff 90       	pop	r15
    3ff4:	ef 90       	pop	r14
    3ff6:	df 90       	pop	r13
    3ff8:	cf 90       	pop	r12
    3ffa:	bf 90       	pop	r11
    3ffc:	af 90       	pop	r10
    3ffe:	9f 90       	pop	r9
    4000:	8f 90       	pop	r8
    4002:	08 95       	ret

00004004 <morph_config_timer_set_timer_callback>:
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	00 d0       	rcall	.+0      	; 0x400a <morph_config_timer_set_timer_callback+0x6>
    400a:	00 d0       	rcall	.+0      	; 0x400c <morph_config_timer_set_timer_callback+0x8>
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
    4010:	89 83       	std	Y+1, r24	; 0x01
    4012:	6a 83       	std	Y+2, r22	; 0x02
    4014:	5c 83       	std	Y+4, r21	; 0x04
    4016:	4b 83       	std	Y+3, r20	; 0x03
    4018:	8a 81       	ldd	r24, Y+2	; 0x02
    401a:	89 30       	cpi	r24, 0x09	; 9
    401c:	08 f0       	brcs	.+2      	; 0x4020 <morph_config_timer_set_timer_callback+0x1c>
    401e:	4b c0       	rjmp	.+150    	; 0x40b6 <morph_config_timer_set_timer_callback+0xb2>
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	88 2f       	mov	r24, r24
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	9c 01       	movw	r18, r24
    4028:	c9 01       	movw	r24, r18
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	9c 01       	movw	r18, r24
    4030:	c9 01       	movw	r24, r18
    4032:	88 0f       	add	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	88 0f       	add	r24, r24
    4038:	99 1f       	adc	r25, r25
    403a:	88 0f       	add	r24, r24
    403c:	99 1f       	adc	r25, r25
    403e:	82 1b       	sub	r24, r18
    4040:	93 0b       	sbc	r25, r19
    4042:	88 57       	subi	r24, 0x78	; 120
    4044:	9d 4f       	sbci	r25, 0xFD	; 253
    4046:	2b 81       	ldd	r18, Y+3	; 0x03
    4048:	3c 81       	ldd	r19, Y+4	; 0x04
    404a:	fc 01       	movw	r30, r24
    404c:	31 83       	std	Z+1, r19	; 0x01
    404e:	20 83       	st	Z, r18
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	9c 01       	movw	r18, r24
    4058:	c9 01       	movw	r24, r18
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	9c 01       	movw	r18, r24
    4060:	c9 01       	movw	r24, r18
    4062:	88 0f       	add	r24, r24
    4064:	99 1f       	adc	r25, r25
    4066:	88 0f       	add	r24, r24
    4068:	99 1f       	adc	r25, r25
    406a:	88 0f       	add	r24, r24
    406c:	99 1f       	adc	r25, r25
    406e:	82 1b       	sub	r24, r18
    4070:	93 0b       	sbc	r25, r19
    4072:	8e 57       	subi	r24, 0x7E	; 126
    4074:	9d 4f       	sbci	r25, 0xFD	; 253
    4076:	fc 01       	movw	r30, r24
    4078:	40 81       	ld	r20, Z
    407a:	51 81       	ldd	r21, Z+1	; 0x01
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	88 2f       	mov	r24, r24
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	9c 01       	movw	r18, r24
    4084:	c9 01       	movw	r24, r18
    4086:	88 0f       	add	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	9c 01       	movw	r18, r24
    408c:	c9 01       	movw	r24, r18
    408e:	88 0f       	add	r24, r24
    4090:	99 1f       	adc	r25, r25
    4092:	88 0f       	add	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	88 0f       	add	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	82 1b       	sub	r24, r18
    409c:	93 0b       	sbc	r25, r19
    409e:	8e 57       	subi	r24, 0x7E	; 126
    40a0:	9d 4f       	sbci	r25, 0xFD	; 253
    40a2:	fc 01       	movw	r30, r24
    40a4:	80 81       	ld	r24, Z
    40a6:	91 81       	ldd	r25, Z+1	; 0x01
    40a8:	fc 01       	movw	r30, r24
    40aa:	80 81       	ld	r24, Z
    40ac:	82 60       	ori	r24, 0x02	; 2
    40ae:	fa 01       	movw	r30, r20
    40b0:	80 83       	st	Z, r24
    40b2:	78 94       	sei
    40b4:	35 c0       	rjmp	.+106    	; 0x4120 <morph_config_timer_set_timer_callback+0x11c>
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	81 31       	cpi	r24, 0x11	; 17
    40ba:	90 f5       	brcc	.+100    	; 0x4120 <morph_config_timer_set_timer_callback+0x11c>
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	28 2f       	mov	r18, r24
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	44 e1       	ldi	r20, 0x14	; 20
    40c4:	42 9f       	mul	r20, r18
    40c6:	c0 01       	movw	r24, r0
    40c8:	43 9f       	mul	r20, r19
    40ca:	90 0d       	add	r25, r0
    40cc:	11 24       	eor	r1, r1
    40ce:	86 55       	subi	r24, 0x56	; 86
    40d0:	9d 4f       	sbci	r25, 0xFD	; 253
    40d2:	2b 81       	ldd	r18, Y+3	; 0x03
    40d4:	3c 81       	ldd	r19, Y+4	; 0x04
    40d6:	fc 01       	movw	r30, r24
    40d8:	31 83       	std	Z+1, r19	; 0x01
    40da:	20 83       	st	Z, r18
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	44 e1       	ldi	r20, 0x14	; 20
    40e4:	42 9f       	mul	r20, r18
    40e6:	c0 01       	movw	r24, r0
    40e8:	43 9f       	mul	r20, r19
    40ea:	90 0d       	add	r25, r0
    40ec:	11 24       	eor	r1, r1
    40ee:	80 56       	subi	r24, 0x60	; 96
    40f0:	9d 4f       	sbci	r25, 0xFD	; 253
    40f2:	fc 01       	movw	r30, r24
    40f4:	80 81       	ld	r24, Z
    40f6:	91 81       	ldd	r25, Z+1	; 0x01
    40f8:	29 81       	ldd	r18, Y+1	; 0x01
    40fa:	42 2f       	mov	r20, r18
    40fc:	50 e0       	ldi	r21, 0x00	; 0
    40fe:	64 e1       	ldi	r22, 0x14	; 20
    4100:	64 9f       	mul	r22, r20
    4102:	90 01       	movw	r18, r0
    4104:	65 9f       	mul	r22, r21
    4106:	30 0d       	add	r19, r0
    4108:	11 24       	eor	r1, r1
    410a:	20 56       	subi	r18, 0x60	; 96
    410c:	3d 4f       	sbci	r19, 0xFD	; 253
    410e:	f9 01       	movw	r30, r18
    4110:	20 81       	ld	r18, Z
    4112:	31 81       	ldd	r19, Z+1	; 0x01
    4114:	f9 01       	movw	r30, r18
    4116:	20 81       	ld	r18, Z
    4118:	22 60       	ori	r18, 0x02	; 2
    411a:	fc 01       	movw	r30, r24
    411c:	20 83       	st	Z, r18
    411e:	78 94       	sei
    4120:	00 00       	nop
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <set_pwm_raw_8_bit>:
// ---- TIMER END ----

// ---- PWM BEGIN ----

void set_pwm_raw_8_bit(uint8_t timer_num, uint8_t timer_channel, uint8_t count_val)
{
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	00 d0       	rcall	.+0      	; 0x4136 <set_pwm_raw_8_bit+0x6>
    4136:	00 d0       	rcall	.+0      	; 0x4138 <set_pwm_raw_8_bit+0x8>
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	8a 83       	std	Y+2, r24	; 0x02
    413e:	6b 83       	std	Y+3, r22	; 0x03
    4140:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t type_index = 0;
    4142:	19 82       	std	Y+1, r1	; 0x01
	
	//These are both 8 bit timers.
	if(timer_num == 0)
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	88 23       	and	r24, r24
    4148:	11 f4       	brne	.+4      	; 0x414e <set_pwm_raw_8_bit+0x1e>
	{
		type_index = 0;
    414a:	19 82       	std	Y+1, r1	; 0x01
    414c:	05 c0       	rjmp	.+10     	; 0x4158 <set_pwm_raw_8_bit+0x28>
	}
	else if(timer_num == 2)
    414e:	8a 81       	ldd	r24, Y+2	; 0x02
    4150:	82 30       	cpi	r24, 0x02	; 2
    4152:	e1 f5       	brne	.+120    	; 0x41cc <set_pwm_raw_8_bit+0x9c>
	{
		type_index = 1;
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return;
	}
	
	if(timer_channel == 0)
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
    415a:	88 23       	and	r24, r24
    415c:	d1 f4       	brne	.+52     	; 0x4192 <set_pwm_raw_8_bit+0x62>
		*(timer_configs_8_bit[type_index].output_compare_a) = count_val;
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	88 2f       	mov	r24, r24
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9c 01       	movw	r18, r24
    4166:	c9 01       	movw	r24, r18
    4168:	88 0f       	add	r24, r24
    416a:	99 1f       	adc	r25, r25
    416c:	9c 01       	movw	r18, r24
    416e:	c9 01       	movw	r24, r18
    4170:	88 0f       	add	r24, r24
    4172:	99 1f       	adc	r25, r25
    4174:	88 0f       	add	r24, r24
    4176:	99 1f       	adc	r25, r25
    4178:	88 0f       	add	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	82 1b       	sub	r24, r18
    417e:	93 0b       	sbc	r25, r19
    4180:	8c 57       	subi	r24, 0x7C	; 124
    4182:	9d 4f       	sbci	r25, 0xFD	; 253
    4184:	fc 01       	movw	r30, r24
    4186:	80 81       	ld	r24, Z
    4188:	91 81       	ldd	r25, Z+1	; 0x01
    418a:	2c 81       	ldd	r18, Y+4	; 0x04
    418c:	fc 01       	movw	r30, r24
    418e:	20 83       	st	Z, r18
    4190:	1e c0       	rjmp	.+60     	; 0x41ce <set_pwm_raw_8_bit+0x9e>
	else if(timer_channel == 1)
    4192:	8b 81       	ldd	r24, Y+3	; 0x03
    4194:	81 30       	cpi	r24, 0x01	; 1
    4196:	d9 f4       	brne	.+54     	; 0x41ce <set_pwm_raw_8_bit+0x9e>
		*(timer_configs_8_bit[type_index].output_compare_b) = count_val;	
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	88 2f       	mov	r24, r24
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	9c 01       	movw	r18, r24
    41a0:	c9 01       	movw	r24, r18
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	9c 01       	movw	r18, r24
    41a8:	c9 01       	movw	r24, r18
    41aa:	88 0f       	add	r24, r24
    41ac:	99 1f       	adc	r25, r25
    41ae:	88 0f       	add	r24, r24
    41b0:	99 1f       	adc	r25, r25
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	82 1b       	sub	r24, r18
    41b8:	93 0b       	sbc	r25, r19
    41ba:	8a 57       	subi	r24, 0x7A	; 122
    41bc:	9d 4f       	sbci	r25, 0xFD	; 253
    41be:	fc 01       	movw	r30, r24
    41c0:	80 81       	ld	r24, Z
    41c2:	91 81       	ldd	r25, Z+1	; 0x01
    41c4:	2c 81       	ldd	r18, Y+4	; 0x04
    41c6:	fc 01       	movw	r30, r24
    41c8:	20 83       	st	Z, r18
    41ca:	01 c0       	rjmp	.+2      	; 0x41ce <set_pwm_raw_8_bit+0x9e>
	{
		type_index = 1;
	}
	else
	{
		return;
    41cc:	00 00       	nop
	
	if(timer_channel == 0)
		*(timer_configs_8_bit[type_index].output_compare_a) = count_val;
	else if(timer_channel == 1)
		*(timer_configs_8_bit[type_index].output_compare_b) = count_val;	
}
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	08 95       	ret

000041dc <morph_config_pwm_start_pwm>:

void morph_config_pwm_start_pwm(MorphPinNumber pn)
{
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
    41e4:	2a 97       	sbiw	r28, 0x0a	; 10
    41e6:	0f b6       	in	r0, 0x3f	; 63
    41e8:	f8 94       	cli
    41ea:	de bf       	out	0x3e, r29	; 62
    41ec:	0f be       	out	0x3f, r0	; 63
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	8a 87       	std	Y+10, r24	; 0x0a
	// First, we've got to figure out if this pin is supported
	if(pn > NUM_PINS)
    41f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    41f4:	8d 31       	cpi	r24, 0x1D	; 29
    41f6:	0c f0       	brlt	.+2      	; 0x41fa <morph_config_pwm_start_pwm+0x1e>
    41f8:	37 c2       	rjmp	.+1134   	; 0x4668 <morph_config_pwm_start_pwm+0x48c>
		return;
		
	int8_t timer_num     = pin_defs[pn - 1].timer_output;
    41fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    41fc:	08 2e       	mov	r0, r24
    41fe:	00 0c       	add	r0, r0
    4200:	99 0b       	sbc	r25, r25
    4202:	9c 01       	movw	r18, r24
    4204:	21 50       	subi	r18, 0x01	; 1
    4206:	31 09       	sbc	r19, r1
    4208:	4b e0       	ldi	r20, 0x0B	; 11
    420a:	42 9f       	mul	r20, r18
    420c:	c0 01       	movw	r24, r0
    420e:	43 9f       	mul	r20, r19
    4210:	90 0d       	add	r25, r0
    4212:	11 24       	eor	r1, r1
    4214:	80 5b       	subi	r24, 0xB0	; 176
    4216:	9e 4f       	sbci	r25, 0xFE	; 254
    4218:	fc 01       	movw	r30, r24
    421a:	80 81       	ld	r24, Z
    421c:	8c 83       	std	Y+4, r24	; 0x04
	int8_t timer_channel = pin_defs[pn - 1].timer_output_channel;
    421e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4220:	08 2e       	mov	r0, r24
    4222:	00 0c       	add	r0, r0
    4224:	99 0b       	sbc	r25, r25
    4226:	9c 01       	movw	r18, r24
    4228:	21 50       	subi	r18, 0x01	; 1
    422a:	31 09       	sbc	r19, r1
    422c:	4b e0       	ldi	r20, 0x0B	; 11
    422e:	42 9f       	mul	r20, r18
    4230:	c0 01       	movw	r24, r0
    4232:	43 9f       	mul	r20, r19
    4234:	90 0d       	add	r25, r0
    4236:	11 24       	eor	r1, r1
    4238:	8f 5a       	subi	r24, 0xAF	; 175
    423a:	9e 4f       	sbci	r25, 0xFE	; 254
    423c:	fc 01       	movw	r30, r24
    423e:	80 81       	ld	r24, Z
    4240:	8d 83       	std	Y+5, r24	; 0x05
	
	if(timer_num != -1 && timer_channel != -1)
    4242:	8c 81       	ldd	r24, Y+4	; 0x04
    4244:	8f 3f       	cpi	r24, 0xFF	; 255
    4246:	09 f4       	brne	.+2      	; 0x424a <morph_config_pwm_start_pwm+0x6e>
    4248:	12 c2       	rjmp	.+1060   	; 0x466e <morph_config_pwm_start_pwm+0x492>
    424a:	8d 81       	ldd	r24, Y+5	; 0x05
    424c:	8f 3f       	cpi	r24, 0xFF	; 255
    424e:	09 f4       	brne	.+2      	; 0x4252 <morph_config_pwm_start_pwm+0x76>
    4250:	0e c2       	rjmp	.+1052   	; 0x466e <morph_config_pwm_start_pwm+0x492>
	{
		// This is the right pin! Yay!
		
		uint8_t resolution = 0;
    4252:	19 82       	std	Y+1, r1	; 0x01
		bool is_taken = false;
    4254:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t type_index = 0;
    4256:	1b 82       	std	Y+3, r1	; 0x03
		
		if(timer_num == 0 || timer_num == 2)
    4258:	8c 81       	ldd	r24, Y+4	; 0x04
    425a:	88 23       	and	r24, r24
    425c:	21 f0       	breq	.+8      	; 0x4266 <morph_config_pwm_start_pwm+0x8a>
    425e:	8c 81       	ldd	r24, Y+4	; 0x04
    4260:	82 30       	cpi	r24, 0x02	; 2
    4262:	09 f0       	breq	.+2      	; 0x4266 <morph_config_pwm_start_pwm+0x8a>
    4264:	46 c0       	rjmp	.+140    	; 0x42f2 <morph_config_pwm_start_pwm+0x116>
		{
			//These are both 8 bit timers.
			resolution = 8;
    4266:	88 e0       	ldi	r24, 0x08	; 8
    4268:	89 83       	std	Y+1, r24	; 0x01
			
			if(timer_num == 0)
    426a:	8c 81       	ldd	r24, Y+4	; 0x04
    426c:	88 23       	and	r24, r24
    426e:	11 f4       	brne	.+4      	; 0x4274 <morph_config_pwm_start_pwm+0x98>
			{
				type_index = 0;
    4270:	1b 82       	std	Y+3, r1	; 0x03
    4272:	05 c0       	rjmp	.+10     	; 0x427e <morph_config_pwm_start_pwm+0xa2>
			}
			else if(timer_num == 2)
    4274:	8c 81       	ldd	r24, Y+4	; 0x04
    4276:	82 30       	cpi	r24, 0x02	; 2
    4278:	11 f4       	brne	.+4      	; 0x427e <morph_config_pwm_start_pwm+0xa2>
			{
				type_index = 1;
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	8b 83       	std	Y+3, r24	; 0x03
			}

			is_taken = timer_configs_8_bit[type_index].is_in_use && !timer_configs_8_bit[type_index].is_in_use_by_morph_pwm;
    427e:	8b 81       	ldd	r24, Y+3	; 0x03
    4280:	88 2f       	mov	r24, r24
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	9c 01       	movw	r18, r24
    4286:	c9 01       	movw	r24, r18
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	9c 01       	movw	r18, r24
    428e:	c9 01       	movw	r24, r18
    4290:	88 0f       	add	r24, r24
    4292:	99 1f       	adc	r25, r25
    4294:	88 0f       	add	r24, r24
    4296:	99 1f       	adc	r25, r25
    4298:	88 0f       	add	r24, r24
    429a:	99 1f       	adc	r25, r25
    429c:	82 1b       	sub	r24, r18
    429e:	93 0b       	sbc	r25, r19
    42a0:	84 58       	subi	r24, 0x84	; 132
    42a2:	9d 4f       	sbci	r25, 0xFD	; 253
    42a4:	fc 01       	movw	r30, r24
    42a6:	80 81       	ld	r24, Z
    42a8:	88 23       	and	r24, r24
    42aa:	e1 f0       	breq	.+56     	; 0x42e4 <morph_config_pwm_start_pwm+0x108>
    42ac:	8b 81       	ldd	r24, Y+3	; 0x03
    42ae:	88 2f       	mov	r24, r24
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	9c 01       	movw	r18, r24
    42b4:	c9 01       	movw	r24, r18
    42b6:	88 0f       	add	r24, r24
    42b8:	99 1f       	adc	r25, r25
    42ba:	9c 01       	movw	r18, r24
    42bc:	c9 01       	movw	r24, r18
    42be:	88 0f       	add	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	88 0f       	add	r24, r24
    42c4:	99 1f       	adc	r25, r25
    42c6:	88 0f       	add	r24, r24
    42c8:	99 1f       	adc	r25, r25
    42ca:	82 1b       	sub	r24, r18
    42cc:	93 0b       	sbc	r25, r19
    42ce:	83 58       	subi	r24, 0x83	; 131
    42d0:	9d 4f       	sbci	r25, 0xFD	; 253
    42d2:	fc 01       	movw	r30, r24
    42d4:	90 81       	ld	r25, Z
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	89 27       	eor	r24, r25
    42da:	88 23       	and	r24, r24
    42dc:	19 f0       	breq	.+6      	; 0x42e4 <morph_config_pwm_start_pwm+0x108>
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	02 c0       	rjmp	.+4      	; 0x42e8 <morph_config_pwm_start_pwm+0x10c>
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	8a 83       	std	Y+2, r24	; 0x02
    42ea:	8a 81       	ldd	r24, Y+2	; 0x02
    42ec:	81 70       	andi	r24, 0x01	; 1
    42ee:	8a 83       	std	Y+2, r24	; 0x02
    42f0:	30 c0       	rjmp	.+96     	; 0x4352 <morph_config_pwm_start_pwm+0x176>
	
		}
		else if(timer_num == 1)
    42f2:	8c 81       	ldd	r24, Y+4	; 0x04
    42f4:	81 30       	cpi	r24, 0x01	; 1
    42f6:	09 f0       	breq	.+2      	; 0x42fa <morph_config_pwm_start_pwm+0x11e>
    42f8:	b9 c1       	rjmp	.+882    	; 0x466c <morph_config_pwm_start_pwm+0x490>
		{
			// This is a 16 bit timer.
			resolution = 16;
    42fa:	80 e1       	ldi	r24, 0x10	; 16
    42fc:	89 83       	std	Y+1, r24	; 0x01
			
			type_index = 0;
    42fe:	1b 82       	std	Y+3, r1	; 0x03

			is_taken = timer_configs_16_bit[type_index].is_in_use && !timer_configs_16_bit[type_index].is_in_use_by_morph_pwm;
    4300:	8b 81       	ldd	r24, Y+3	; 0x03
    4302:	28 2f       	mov	r18, r24
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	44 e1       	ldi	r20, 0x14	; 20
    4308:	42 9f       	mul	r20, r18
    430a:	c0 01       	movw	r24, r0
    430c:	43 9f       	mul	r20, r19
    430e:	90 0d       	add	r25, r0
    4310:	11 24       	eor	r1, r1
    4312:	88 56       	subi	r24, 0x68	; 104
    4314:	9d 4f       	sbci	r25, 0xFD	; 253
    4316:	fc 01       	movw	r30, r24
    4318:	80 81       	ld	r24, Z
    431a:	88 23       	and	r24, r24
    431c:	a1 f0       	breq	.+40     	; 0x4346 <morph_config_pwm_start_pwm+0x16a>
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	44 e1       	ldi	r20, 0x14	; 20
    4326:	42 9f       	mul	r20, r18
    4328:	c0 01       	movw	r24, r0
    432a:	43 9f       	mul	r20, r19
    432c:	90 0d       	add	r25, r0
    432e:	11 24       	eor	r1, r1
    4330:	87 56       	subi	r24, 0x67	; 103
    4332:	9d 4f       	sbci	r25, 0xFD	; 253
    4334:	fc 01       	movw	r30, r24
    4336:	90 81       	ld	r25, Z
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	89 27       	eor	r24, r25
    433c:	88 23       	and	r24, r24
    433e:	19 f0       	breq	.+6      	; 0x4346 <morph_config_pwm_start_pwm+0x16a>
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	02 c0       	rjmp	.+4      	; 0x434a <morph_config_pwm_start_pwm+0x16e>
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	8a 83       	std	Y+2, r24	; 0x02
    434c:	8a 81       	ldd	r24, Y+2	; 0x02
    434e:	81 70       	andi	r24, 0x01	; 1
    4350:	8a 83       	std	Y+2, r24	; 0x02
		else
		{
			return; // go away.
		}
		
		if(!is_taken)
    4352:	9a 81       	ldd	r25, Y+2	; 0x02
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	89 27       	eor	r24, r25
    4358:	88 23       	and	r24, r24
    435a:	09 f4       	brne	.+2      	; 0x435e <morph_config_pwm_start_pwm+0x182>
    435c:	88 c1       	rjmp	.+784    	; 0x466e <morph_config_pwm_start_pwm+0x492>
		{
			// Go through the proper channel to acquire the timer.
			morph_config_timer_acquire_timer(timer_num, resolution);
    435e:	8c 81       	ldd	r24, Y+4	; 0x04
    4360:	69 81       	ldd	r22, Y+1	; 0x01
    4362:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <morph_config_timer_acquire_timer>
		
			if(resolution == 8)
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	88 30       	cpi	r24, 0x08	; 8
    436a:	09 f0       	breq	.+2      	; 0x436e <morph_config_pwm_start_pwm+0x192>
    436c:	6b c1       	rjmp	.+726    	; 0x4644 <morph_config_pwm_start_pwm+0x468>
			{
				if(!timer_configs_8_bit[type_index].is_in_use_by_morph_pwm)
    436e:	8b 81       	ldd	r24, Y+3	; 0x03
    4370:	88 2f       	mov	r24, r24
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	9c 01       	movw	r18, r24
    4376:	c9 01       	movw	r24, r18
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	9c 01       	movw	r18, r24
    437e:	c9 01       	movw	r24, r18
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	88 0f       	add	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	82 1b       	sub	r24, r18
    438e:	93 0b       	sbc	r25, r19
    4390:	83 58       	subi	r24, 0x83	; 131
    4392:	9d 4f       	sbci	r25, 0xFD	; 253
    4394:	fc 01       	movw	r30, r24
    4396:	90 81       	ld	r25, Z
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	89 27       	eor	r24, r25
    439c:	88 23       	and	r24, r24
    439e:	09 f4       	brne	.+2      	; 0x43a2 <morph_config_pwm_start_pwm+0x1c6>
    43a0:	dd c0       	rjmp	.+442    	; 0x455c <morph_config_pwm_start_pwm+0x380>
				{
					// This timer isn't being used for PWM yet. 
					// Set this to true and continue.
					timer_configs_8_bit[type_index].is_in_use_by_morph_pwm = true;
    43a2:	8b 81       	ldd	r24, Y+3	; 0x03
    43a4:	88 2f       	mov	r24, r24
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	9c 01       	movw	r18, r24
    43aa:	c9 01       	movw	r24, r18
    43ac:	88 0f       	add	r24, r24
    43ae:	99 1f       	adc	r25, r25
    43b0:	9c 01       	movw	r18, r24
    43b2:	c9 01       	movw	r24, r18
    43b4:	88 0f       	add	r24, r24
    43b6:	99 1f       	adc	r25, r25
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	88 0f       	add	r24, r24
    43be:	99 1f       	adc	r25, r25
    43c0:	82 1b       	sub	r24, r18
    43c2:	93 0b       	sbc	r25, r19
    43c4:	83 58       	subi	r24, 0x83	; 131
    43c6:	9d 4f       	sbci	r25, 0xFD	; 253
    43c8:	21 e0       	ldi	r18, 0x01	; 1
    43ca:	fc 01       	movw	r30, r24
    43cc:	20 83       	st	Z, r18
				
					// Will be using Phase Correct PWM Mode
					// WGM01:0 = 1

					// Clear WGM02
					*(timer_configs_8_bit[type_index].control_reg_b) &= ~(0x1 << WGM02);
    43ce:	8b 81       	ldd	r24, Y+3	; 0x03
    43d0:	88 2f       	mov	r24, r24
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	9c 01       	movw	r18, r24
    43d6:	c9 01       	movw	r24, r18
    43d8:	88 0f       	add	r24, r24
    43da:	99 1f       	adc	r25, r25
    43dc:	9c 01       	movw	r18, r24
    43de:	c9 01       	movw	r24, r18
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	88 0f       	add	r24, r24
    43e6:	99 1f       	adc	r25, r25
    43e8:	88 0f       	add	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	82 1b       	sub	r24, r18
    43ee:	93 0b       	sbc	r25, r19
    43f0:	80 58       	subi	r24, 0x80	; 128
    43f2:	9d 4f       	sbci	r25, 0xFD	; 253
    43f4:	fc 01       	movw	r30, r24
    43f6:	40 81       	ld	r20, Z
    43f8:	51 81       	ldd	r21, Z+1	; 0x01
    43fa:	8b 81       	ldd	r24, Y+3	; 0x03
    43fc:	88 2f       	mov	r24, r24
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	9c 01       	movw	r18, r24
    4402:	c9 01       	movw	r24, r18
    4404:	88 0f       	add	r24, r24
    4406:	99 1f       	adc	r25, r25
    4408:	9c 01       	movw	r18, r24
    440a:	c9 01       	movw	r24, r18
    440c:	88 0f       	add	r24, r24
    440e:	99 1f       	adc	r25, r25
    4410:	88 0f       	add	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	88 0f       	add	r24, r24
    4416:	99 1f       	adc	r25, r25
    4418:	82 1b       	sub	r24, r18
    441a:	93 0b       	sbc	r25, r19
    441c:	80 58       	subi	r24, 0x80	; 128
    441e:	9d 4f       	sbci	r25, 0xFD	; 253
    4420:	fc 01       	movw	r30, r24
    4422:	80 81       	ld	r24, Z
    4424:	91 81       	ldd	r25, Z+1	; 0x01
    4426:	fc 01       	movw	r30, r24
    4428:	80 81       	ld	r24, Z
    442a:	87 7f       	andi	r24, 0xF7	; 247
    442c:	fa 01       	movw	r30, r20
    442e:	80 83       	st	Z, r24

					uint8_t reg_a = *(timer_configs_8_bit[type_index].control_reg_a);
    4430:	8b 81       	ldd	r24, Y+3	; 0x03
    4432:	88 2f       	mov	r24, r24
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	9c 01       	movw	r18, r24
    4438:	c9 01       	movw	r24, r18
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	9c 01       	movw	r18, r24
    4440:	c9 01       	movw	r24, r18
    4442:	88 0f       	add	r24, r24
    4444:	99 1f       	adc	r25, r25
    4446:	88 0f       	add	r24, r24
    4448:	99 1f       	adc	r25, r25
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	82 1b       	sub	r24, r18
    4450:	93 0b       	sbc	r25, r19
    4452:	82 58       	subi	r24, 0x82	; 130
    4454:	9d 4f       	sbci	r25, 0xFD	; 253
    4456:	fc 01       	movw	r30, r24
    4458:	80 81       	ld	r24, Z
    445a:	91 81       	ldd	r25, Z+1	; 0x01
    445c:	fc 01       	movw	r30, r24
    445e:	80 81       	ld	r24, Z
    4460:	8e 83       	std	Y+6, r24	; 0x06

					// clear WGM 01 and set WGM 00
					*(timer_configs_8_bit[type_index].control_reg_a) = (reg_a | (0x1 << WGM00)) & ~(0x1 << WGM01);								
    4462:	8b 81       	ldd	r24, Y+3	; 0x03
    4464:	88 2f       	mov	r24, r24
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	9c 01       	movw	r18, r24
    446a:	c9 01       	movw	r24, r18
    446c:	88 0f       	add	r24, r24
    446e:	99 1f       	adc	r25, r25
    4470:	9c 01       	movw	r18, r24
    4472:	c9 01       	movw	r24, r18
    4474:	88 0f       	add	r24, r24
    4476:	99 1f       	adc	r25, r25
    4478:	88 0f       	add	r24, r24
    447a:	99 1f       	adc	r25, r25
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	82 1b       	sub	r24, r18
    4482:	93 0b       	sbc	r25, r19
    4484:	82 58       	subi	r24, 0x82	; 130
    4486:	9d 4f       	sbci	r25, 0xFD	; 253
    4488:	fc 01       	movw	r30, r24
    448a:	80 81       	ld	r24, Z
    448c:	91 81       	ldd	r25, Z+1	; 0x01
    448e:	2e 81       	ldd	r18, Y+6	; 0x06
    4490:	21 60       	ori	r18, 0x01	; 1
    4492:	2d 7f       	andi	r18, 0xFD	; 253
    4494:	fc 01       	movw	r30, r24
    4496:	20 83       	st	Z, r18

					uint8_t reg_b = timer_configs_8_bit[type_index].control_reg_b;
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	88 2f       	mov	r24, r24
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9c 01       	movw	r18, r24
    44a0:	c9 01       	movw	r24, r18
    44a2:	88 0f       	add	r24, r24
    44a4:	99 1f       	adc	r25, r25
    44a6:	9c 01       	movw	r18, r24
    44a8:	c9 01       	movw	r24, r18
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	88 0f       	add	r24, r24
    44b4:	99 1f       	adc	r25, r25
    44b6:	82 1b       	sub	r24, r18
    44b8:	93 0b       	sbc	r25, r19
    44ba:	80 58       	subi	r24, 0x80	; 128
    44bc:	9d 4f       	sbci	r25, 0xFD	; 253
    44be:	fc 01       	movw	r30, r24
    44c0:	80 81       	ld	r24, Z
    44c2:	91 81       	ldd	r25, Z+1	; 0x01
    44c4:	8f 83       	std	Y+7, r24	; 0x07
		
					// These two lines makes sure the starting output will be 0V.						
					*(timer_configs_8_bit[type_index].output_compare_a) = 0x00;
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	88 2f       	mov	r24, r24
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	9c 01       	movw	r18, r24
    44ce:	c9 01       	movw	r24, r18
    44d0:	88 0f       	add	r24, r24
    44d2:	99 1f       	adc	r25, r25
    44d4:	9c 01       	movw	r18, r24
    44d6:	c9 01       	movw	r24, r18
    44d8:	88 0f       	add	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	88 0f       	add	r24, r24
    44de:	99 1f       	adc	r25, r25
    44e0:	88 0f       	add	r24, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	82 1b       	sub	r24, r18
    44e6:	93 0b       	sbc	r25, r19
    44e8:	8c 57       	subi	r24, 0x7C	; 124
    44ea:	9d 4f       	sbci	r25, 0xFD	; 253
    44ec:	fc 01       	movw	r30, r24
    44ee:	80 81       	ld	r24, Z
    44f0:	91 81       	ldd	r25, Z+1	; 0x01
    44f2:	fc 01       	movw	r30, r24
    44f4:	10 82       	st	Z, r1
					*(timer_configs_8_bit[type_index].output_compare_b) = 0x00;								
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	88 2f       	mov	r24, r24
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	9c 01       	movw	r18, r24
    44fe:	c9 01       	movw	r24, r18
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	9c 01       	movw	r18, r24
    4506:	c9 01       	movw	r24, r18
    4508:	88 0f       	add	r24, r24
    450a:	99 1f       	adc	r25, r25
    450c:	88 0f       	add	r24, r24
    450e:	99 1f       	adc	r25, r25
    4510:	88 0f       	add	r24, r24
    4512:	99 1f       	adc	r25, r25
    4514:	82 1b       	sub	r24, r18
    4516:	93 0b       	sbc	r25, r19
    4518:	8a 57       	subi	r24, 0x7A	; 122
    451a:	9d 4f       	sbci	r25, 0xFD	; 253
    451c:	fc 01       	movw	r30, r24
    451e:	80 81       	ld	r24, Z
    4520:	91 81       	ldd	r25, Z+1	; 0x01
    4522:	fc 01       	movw	r30, r24
    4524:	10 82       	st	Z, r1
								
					// Start the timer with no prescaling.
					*(timer_configs_8_bit[type_index].control_reg_b) = (reg_b & (0xFF << 3)) | 0b001;
    4526:	8b 81       	ldd	r24, Y+3	; 0x03
    4528:	88 2f       	mov	r24, r24
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	9c 01       	movw	r18, r24
    452e:	c9 01       	movw	r24, r18
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	9c 01       	movw	r18, r24
    4536:	c9 01       	movw	r24, r18
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	88 0f       	add	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	82 1b       	sub	r24, r18
    4546:	93 0b       	sbc	r25, r19
    4548:	80 58       	subi	r24, 0x80	; 128
    454a:	9d 4f       	sbci	r25, 0xFD	; 253
    454c:	fc 01       	movw	r30, r24
    454e:	80 81       	ld	r24, Z
    4550:	91 81       	ldd	r25, Z+1	; 0x01
    4552:	2f 81       	ldd	r18, Y+7	; 0x07
    4554:	28 7f       	andi	r18, 0xF8	; 248
    4556:	21 60       	ori	r18, 0x01	; 1
    4558:	fc 01       	movw	r30, r24
    455a:	20 83       	st	Z, r18
							
				}
		
				if(timer_channel == 0)
    455c:	8d 81       	ldd	r24, Y+5	; 0x05
    455e:	88 23       	and	r24, r24
    4560:	a9 f5       	brne	.+106    	; 0x45cc <morph_config_pwm_start_pwm+0x3f0>
				{
					uint8_t reg_a = *(timer_configs_8_bit[type_index].control_reg_a);
    4562:	8b 81       	ldd	r24, Y+3	; 0x03
    4564:	88 2f       	mov	r24, r24
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	9c 01       	movw	r18, r24
    456a:	c9 01       	movw	r24, r18
    456c:	88 0f       	add	r24, r24
    456e:	99 1f       	adc	r25, r25
    4570:	9c 01       	movw	r18, r24
    4572:	c9 01       	movw	r24, r18
    4574:	88 0f       	add	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	88 0f       	add	r24, r24
    457a:	99 1f       	adc	r25, r25
    457c:	88 0f       	add	r24, r24
    457e:	99 1f       	adc	r25, r25
    4580:	82 1b       	sub	r24, r18
    4582:	93 0b       	sbc	r25, r19
    4584:	82 58       	subi	r24, 0x82	; 130
    4586:	9d 4f       	sbci	r25, 0xFD	; 253
    4588:	fc 01       	movw	r30, r24
    458a:	80 81       	ld	r24, Z
    458c:	91 81       	ldd	r25, Z+1	; 0x01
    458e:	fc 01       	movw	r30, r24
    4590:	80 81       	ld	r24, Z
    4592:	88 87       	std	Y+8, r24	; 0x08

					// Verify PWM output is enabled for this channel
					// This sets non-inverting mode on COMnA
					*(timer_configs_8_bit[type_index].control_reg_a) = (reg_a & (0xFF >> (8 - COM0A0))) | 0b10 << COM0A0;
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	88 2f       	mov	r24, r24
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	9c 01       	movw	r18, r24
    459c:	c9 01       	movw	r24, r18
    459e:	88 0f       	add	r24, r24
    45a0:	99 1f       	adc	r25, r25
    45a2:	9c 01       	movw	r18, r24
    45a4:	c9 01       	movw	r24, r18
    45a6:	88 0f       	add	r24, r24
    45a8:	99 1f       	adc	r25, r25
    45aa:	88 0f       	add	r24, r24
    45ac:	99 1f       	adc	r25, r25
    45ae:	88 0f       	add	r24, r24
    45b0:	99 1f       	adc	r25, r25
    45b2:	82 1b       	sub	r24, r18
    45b4:	93 0b       	sbc	r25, r19
    45b6:	82 58       	subi	r24, 0x82	; 130
    45b8:	9d 4f       	sbci	r25, 0xFD	; 253
    45ba:	fc 01       	movw	r30, r24
    45bc:	80 81       	ld	r24, Z
    45be:	91 81       	ldd	r25, Z+1	; 0x01
    45c0:	28 85       	ldd	r18, Y+8	; 0x08
    45c2:	2f 73       	andi	r18, 0x3F	; 63
    45c4:	20 68       	ori	r18, 0x80	; 128
    45c6:	fc 01       	movw	r30, r24
    45c8:	20 83       	st	Z, r18
    45ca:	37 c0       	rjmp	.+110    	; 0x463a <morph_config_pwm_start_pwm+0x45e>
				}
				else if(timer_channel == 1)
    45cc:	8d 81       	ldd	r24, Y+5	; 0x05
    45ce:	81 30       	cpi	r24, 0x01	; 1
    45d0:	a1 f5       	brne	.+104    	; 0x463a <morph_config_pwm_start_pwm+0x45e>
				{
					uint8_t reg_a = *(timer_configs_8_bit[type_index].control_reg_a);
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	88 2f       	mov	r24, r24
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	9c 01       	movw	r18, r24
    45da:	c9 01       	movw	r24, r18
    45dc:	88 0f       	add	r24, r24
    45de:	99 1f       	adc	r25, r25
    45e0:	9c 01       	movw	r18, r24
    45e2:	c9 01       	movw	r24, r18
    45e4:	88 0f       	add	r24, r24
    45e6:	99 1f       	adc	r25, r25
    45e8:	88 0f       	add	r24, r24
    45ea:	99 1f       	adc	r25, r25
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	82 1b       	sub	r24, r18
    45f2:	93 0b       	sbc	r25, r19
    45f4:	82 58       	subi	r24, 0x82	; 130
    45f6:	9d 4f       	sbci	r25, 0xFD	; 253
    45f8:	fc 01       	movw	r30, r24
    45fa:	80 81       	ld	r24, Z
    45fc:	91 81       	ldd	r25, Z+1	; 0x01
    45fe:	fc 01       	movw	r30, r24
    4600:	80 81       	ld	r24, Z
    4602:	89 87       	std	Y+9, r24	; 0x09
					// Verify PWM output is enable for this channel
					// This sets non-inverting mode on COMnB
					*(timer_configs_8_bit[type_index].control_reg_a) = (reg_a & (0xFF >> (8 - COM0B0))) | 0b10 << COM0B0;
    4604:	8b 81       	ldd	r24, Y+3	; 0x03
    4606:	88 2f       	mov	r24, r24
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	9c 01       	movw	r18, r24
    460c:	c9 01       	movw	r24, r18
    460e:	88 0f       	add	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	9c 01       	movw	r18, r24
    4614:	c9 01       	movw	r24, r18
    4616:	88 0f       	add	r24, r24
    4618:	99 1f       	adc	r25, r25
    461a:	88 0f       	add	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	88 0f       	add	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	82 1b       	sub	r24, r18
    4624:	93 0b       	sbc	r25, r19
    4626:	82 58       	subi	r24, 0x82	; 130
    4628:	9d 4f       	sbci	r25, 0xFD	; 253
    462a:	fc 01       	movw	r30, r24
    462c:	80 81       	ld	r24, Z
    462e:	91 81       	ldd	r25, Z+1	; 0x01
    4630:	29 85       	ldd	r18, Y+9	; 0x09
    4632:	2f 70       	andi	r18, 0x0F	; 15
    4634:	20 62       	ori	r18, 0x20	; 32
    4636:	fc 01       	movw	r30, r24
    4638:	20 83       	st	Z, r18
				}
		
				morph_config_gpio_set_pin_direction(pn, Output);
    463a:	61 e0       	ldi	r22, 0x01	; 1
    463c:	8a 85       	ldd	r24, Y+10	; 0x0a
    463e:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <morph_config_gpio_set_pin_direction>
    4642:	15 c0       	rjmp	.+42     	; 0x466e <morph_config_pwm_start_pwm+0x492>
		
			}
			else if(resolution == 16)
    4644:	89 81       	ldd	r24, Y+1	; 0x01
    4646:	80 31       	cpi	r24, 0x10	; 16
    4648:	91 f4       	brne	.+36     	; 0x466e <morph_config_pwm_start_pwm+0x492>
			{
				timer_configs_16_bit[type_index].is_in_use_by_morph_pwm = true;				
    464a:	8b 81       	ldd	r24, Y+3	; 0x03
    464c:	28 2f       	mov	r18, r24
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	44 e1       	ldi	r20, 0x14	; 20
    4652:	42 9f       	mul	r20, r18
    4654:	c0 01       	movw	r24, r0
    4656:	43 9f       	mul	r20, r19
    4658:	90 0d       	add	r25, r0
    465a:	11 24       	eor	r1, r1
    465c:	87 56       	subi	r24, 0x67	; 103
    465e:	9d 4f       	sbci	r25, 0xFD	; 253
    4660:	21 e0       	ldi	r18, 0x01	; 1
    4662:	fc 01       	movw	r30, r24
    4664:	20 83       	st	Z, r18
    4666:	03 c0       	rjmp	.+6      	; 0x466e <morph_config_pwm_start_pwm+0x492>

void morph_config_pwm_start_pwm(MorphPinNumber pn)
{
	// First, we've got to figure out if this pin is supported
	if(pn > NUM_PINS)
		return;
    4668:	00 00       	nop
    466a:	01 c0       	rjmp	.+2      	; 0x466e <morph_config_pwm_start_pwm+0x492>
			is_taken = timer_configs_16_bit[type_index].is_in_use && !timer_configs_16_bit[type_index].is_in_use_by_morph_pwm;
	
		}
		else
		{
			return; // go away.
    466c:	00 00       	nop
		
		}
		
	}
	
}
    466e:	2a 96       	adiw	r28, 0x0a	; 10
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	f8 94       	cli
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	08 95       	ret

00004680 <morph_config_pwm_stop_pwm>:

void morph_config_pwm_stop_pwm(MorphPinNumber pn)
{
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	1f 92       	push	r1
    4686:	cd b7       	in	r28, 0x3d	; 61
    4688:	de b7       	in	r29, 0x3e	; 62
    468a:	89 83       	std	Y+1, r24	; 0x01
	
	

	
}
    468c:	00 00       	nop
    468e:	0f 90       	pop	r0
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	08 95       	ret

00004696 <morph_config_pwm_set_pwm_duty_float>:

#include <math.h>

void morph_config_pwm_set_pwm_duty_float(MorphPinNumber pn, float duty)
{
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	28 97       	sbiw	r28, 0x08	; 8
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	f8 94       	cli
    46a4:	de bf       	out	0x3e, r29	; 62
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	cd bf       	out	0x3d, r28	; 61
    46aa:	8c 83       	std	Y+4, r24	; 0x04
    46ac:	4d 83       	std	Y+5, r20	; 0x05
    46ae:	5e 83       	std	Y+6, r21	; 0x06
    46b0:	6f 83       	std	Y+7, r22	; 0x07
    46b2:	78 87       	std	Y+8, r23	; 0x08
	int8_t timer_num     = pin_defs[pn - 1].timer_output;
    46b4:	8c 81       	ldd	r24, Y+4	; 0x04
    46b6:	08 2e       	mov	r0, r24
    46b8:	00 0c       	add	r0, r0
    46ba:	99 0b       	sbc	r25, r25
    46bc:	9c 01       	movw	r18, r24
    46be:	21 50       	subi	r18, 0x01	; 1
    46c0:	31 09       	sbc	r19, r1
    46c2:	4b e0       	ldi	r20, 0x0B	; 11
    46c4:	42 9f       	mul	r20, r18
    46c6:	c0 01       	movw	r24, r0
    46c8:	43 9f       	mul	r20, r19
    46ca:	90 0d       	add	r25, r0
    46cc:	11 24       	eor	r1, r1
    46ce:	80 5b       	subi	r24, 0xB0	; 176
    46d0:	9e 4f       	sbci	r25, 0xFE	; 254
    46d2:	fc 01       	movw	r30, r24
    46d4:	80 81       	ld	r24, Z
    46d6:	89 83       	std	Y+1, r24	; 0x01
	int8_t timer_channel = pin_defs[pn - 1].timer_output_channel;
    46d8:	8c 81       	ldd	r24, Y+4	; 0x04
    46da:	08 2e       	mov	r0, r24
    46dc:	00 0c       	add	r0, r0
    46de:	99 0b       	sbc	r25, r25
    46e0:	9c 01       	movw	r18, r24
    46e2:	21 50       	subi	r18, 0x01	; 1
    46e4:	31 09       	sbc	r19, r1
    46e6:	4b e0       	ldi	r20, 0x0B	; 11
    46e8:	42 9f       	mul	r20, r18
    46ea:	c0 01       	movw	r24, r0
    46ec:	43 9f       	mul	r20, r19
    46ee:	90 0d       	add	r25, r0
    46f0:	11 24       	eor	r1, r1
    46f2:	8f 5a       	subi	r24, 0xAF	; 175
    46f4:	9e 4f       	sbci	r25, 0xFE	; 254
    46f6:	fc 01       	movw	r30, r24
    46f8:	80 81       	ld	r24, Z
    46fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t type_index = 0;
    46fc:	1b 82       	std	Y+3, r1	; 0x03
		
	// This locks the duty between 0.0 and 1.0;
	duty = fmax(fmin(1.0f, duty), 0.0f);
    46fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4700:	9e 81       	ldd	r25, Y+6	; 0x06
    4702:	af 81       	ldd	r26, Y+7	; 0x07
    4704:	b8 85       	ldd	r27, Y+8	; 0x08
    4706:	9c 01       	movw	r18, r24
    4708:	ad 01       	movw	r20, r26
    470a:	60 e0       	ldi	r22, 0x00	; 0
    470c:	70 e0       	ldi	r23, 0x00	; 0
    470e:	80 e8       	ldi	r24, 0x80	; 128
    4710:	9f e3       	ldi	r25, 0x3F	; 63
    4712:	0e 94 a8 28 	call	0x5150	; 0x5150 <fmin>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	a9 01       	movw	r20, r18
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 89 28 	call	0x5112	; 0x5112 <fmax>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	8d 83       	std	Y+5, r24	; 0x05
    472e:	9e 83       	std	Y+6, r25	; 0x06
    4730:	af 83       	std	Y+7, r26	; 0x07
    4732:	b8 87       	std	Y+8, r27	; 0x08
		
	if(timer_num == 0 || timer_num == 2)
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	88 23       	and	r24, r24
    4738:	19 f0       	breq	.+6      	; 0x4740 <morph_config_pwm_set_pwm_duty_float+0xaa>
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	82 30       	cpi	r24, 0x02	; 2
    473e:	d1 f4       	brne	.+52     	; 0x4774 <morph_config_pwm_set_pwm_duty_float+0xde>
	{
		//These are both 8 bit timers.
		set_pwm_raw_8_bit(timer_num, timer_channel, duty * 0xFF);
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	4f e7       	ldi	r20, 0x7F	; 127
    4746:	53 e4       	ldi	r21, 0x43	; 67
    4748:	6d 81       	ldd	r22, Y+5	; 0x05
    474a:	7e 81       	ldd	r23, Y+6	; 0x06
    474c:	8f 81       	ldd	r24, Y+7	; 0x07
    474e:	98 85       	ldd	r25, Y+8	; 0x08
    4750:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	bc 01       	movw	r22, r24
    475a:	cd 01       	movw	r24, r26
    475c:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__fixunssfsi>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	28 2f       	mov	r18, r24
    4766:	9a 81       	ldd	r25, Y+2	; 0x02
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	42 2f       	mov	r20, r18
    476c:	69 2f       	mov	r22, r25
    476e:	0e 94 98 20 	call	0x4130	; 0x4130 <set_pwm_raw_8_bit>
	{
		// This is a 16 bit timer.
		type_index = 0;
			
	}
}
    4772:	04 c0       	rjmp	.+8      	; 0x477c <morph_config_pwm_set_pwm_duty_float+0xe6>
	{
		//These are both 8 bit timers.
		set_pwm_raw_8_bit(timer_num, timer_channel, duty * 0xFF);
			
	}
	else if(timer_num == 1)
    4774:	89 81       	ldd	r24, Y+1	; 0x01
    4776:	81 30       	cpi	r24, 0x01	; 1
    4778:	09 f4       	brne	.+2      	; 0x477c <morph_config_pwm_set_pwm_duty_float+0xe6>
	{
		// This is a 16 bit timer.
		type_index = 0;
    477a:	1b 82       	std	Y+3, r1	; 0x03
			
	}
}
    477c:	00 00       	nop
    477e:	28 96       	adiw	r28, 0x08	; 8
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	08 95       	ret

00004790 <morph_config_pwm_set_pwm_duty_64bit>:

void morph_config_pwm_set_pwm_duty_64bit(MorphPinNumber pn, uint64_t duty)
{
    4790:	0f 93       	push	r16
    4792:	1f 93       	push	r17
    4794:	cf 93       	push	r28
    4796:	df 93       	push	r29
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	29 97       	sbiw	r28, 0x09	; 9
    479e:	0f b6       	in	r0, 0x3f	; 63
    47a0:	f8 94       	cli
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	0f be       	out	0x3f, r0	; 63
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	89 83       	std	Y+1, r24	; 0x01
    47aa:	0a 83       	std	Y+2, r16	; 0x02
    47ac:	1b 83       	std	Y+3, r17	; 0x03
    47ae:	2c 83       	std	Y+4, r18	; 0x04
    47b0:	3d 83       	std	Y+5, r19	; 0x05
    47b2:	4e 83       	std	Y+6, r20	; 0x06
    47b4:	5f 83       	std	Y+7, r21	; 0x07
    47b6:	68 87       	std	Y+8, r22	; 0x08
    47b8:	79 87       	std	Y+9, r23	; 0x09
	
}
    47ba:	00 00       	nop
    47bc:	29 96       	adiw	r28, 0x09	; 9
    47be:	0f b6       	in	r0, 0x3f	; 63
    47c0:	f8 94       	cli
    47c2:	de bf       	out	0x3e, r29	; 62
    47c4:	0f be       	out	0x3f, r0	; 63
    47c6:	cd bf       	out	0x3d, r28	; 61
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	1f 91       	pop	r17
    47ce:	0f 91       	pop	r16
    47d0:	08 95       	ret

000047d2 <morph_config_pwm_set_pwm_duty_32bit>:

void morph_config_pwm_set_pwm_duty_32bit(MorphPinNumber pn, uint32_t duty)
{
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	00 d0       	rcall	.+0      	; 0x47d8 <morph_config_pwm_set_pwm_duty_32bit+0x6>
    47d8:	00 d0       	rcall	.+0      	; 0x47da <morph_config_pwm_set_pwm_duty_32bit+0x8>
    47da:	1f 92       	push	r1
    47dc:	cd b7       	in	r28, 0x3d	; 61
    47de:	de b7       	in	r29, 0x3e	; 62
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	4a 83       	std	Y+2, r20	; 0x02
    47e4:	5b 83       	std	Y+3, r21	; 0x03
    47e6:	6c 83       	std	Y+4, r22	; 0x04
    47e8:	7d 83       	std	Y+5, r23	; 0x05
	
}
    47ea:	00 00       	nop
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	08 95       	ret

000047fc <morph_config_pwm_set_pwm_duty_16bit>:

void morph_config_pwm_set_pwm_duty_16bit(MorphPinNumber pn, uint16_t duty)
{
    47fc:	cf 93       	push	r28
    47fe:	df 93       	push	r29
    4800:	00 d0       	rcall	.+0      	; 0x4802 <morph_config_pwm_set_pwm_duty_16bit+0x6>
    4802:	1f 92       	push	r1
    4804:	cd b7       	in	r28, 0x3d	; 61
    4806:	de b7       	in	r29, 0x3e	; 62
    4808:	89 83       	std	Y+1, r24	; 0x01
    480a:	7b 83       	std	Y+3, r23	; 0x03
    480c:	6a 83       	std	Y+2, r22	; 0x02
	
}
    480e:	00 00       	nop
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	0f 90       	pop	r0
    4816:	df 91       	pop	r29
    4818:	cf 91       	pop	r28
    481a:	08 95       	ret

0000481c <morph_config_pwm_set_pwm_duty_8bit>:

void morph_config_pwm_set_pwm_duty_8bit (MorphPinNumber pn, uint8_t duty)
{
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	00 d0       	rcall	.+0      	; 0x4822 <morph_config_pwm_set_pwm_duty_8bit+0x6>
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
    4826:	89 83       	std	Y+1, r24	; 0x01
    4828:	6a 83       	std	Y+2, r22	; 0x02
	
}
    482a:	00 00       	nop
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    4830:	df 91       	pop	r29
    4832:	cf 91       	pop	r28
    4834:	08 95       	ret

00004836 <morph_config_adc_get_adc_value>:
};

int8_t last_read_mux = -1;

MorphADCValue morph_config_adc_get_adc_value(MorphADCChannel c, MorphADCResolution res)
{
    4836:	cf 93       	push	r28
    4838:	df 93       	push	r29
    483a:	00 d0       	rcall	.+0      	; 0x483c <morph_config_adc_get_adc_value+0x6>
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
    4840:	89 83       	std	Y+1, r24	; 0x01
    4842:	6a 83       	std	Y+2, r22	; 0x02
	
	
	
}
    4844:	00 00       	nop
    4846:	bc 01       	movw	r22, r24
    4848:	cd 01       	movw	r24, r26
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	08 95       	ret

00004854 <morph_config_adc_get_adc_pin>:

MorphADCValue morph_config_adc_get_adc_pin(MorphPinNumber c, MorphADCResolution res)
{
    4854:	cf 93       	push	r28
    4856:	df 93       	push	r29
    4858:	00 d0       	rcall	.+0      	; 0x485a <morph_config_adc_get_adc_pin+0x6>
    485a:	cd b7       	in	r28, 0x3d	; 61
    485c:	de b7       	in	r29, 0x3e	; 62
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	6a 83       	std	Y+2, r22	; 0x02
}
    4862:	00 00       	nop
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	0f 90       	pop	r0
    486a:	0f 90       	pop	r0
    486c:	df 91       	pop	r29
    486e:	cf 91       	pop	r28
    4870:	08 95       	ret

00004872 <morph_config_adc_init_adc>:

void morph_config_adc_init_adc(MorphPinNumber p)
{
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	1f 92       	push	r1
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    487c:	89 83       	std	Y+1, r24	; 0x01

	// Enable the ADC
	ADCSRA |= 0x1 << ADEN;
    487e:	8a e7       	ldi	r24, 0x7A	; 122
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	2a e7       	ldi	r18, 0x7A	; 122
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	f9 01       	movw	r30, r18
    4888:	20 81       	ld	r18, Z
    488a:	20 68       	ori	r18, 0x80	; 128
    488c:	fc 01       	movw	r30, r24
    488e:	20 83       	st	Z, r18

}
    4890:	00 00       	nop
    4892:	0f 90       	pop	r0
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	08 95       	ret

0000489a <morph_config_adc_read>:

MorphADCValue morph_config_adc_read(MorphPinNumber p)
{
    489a:	cf 93       	push	r28
    489c:	df 93       	push	r29
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	2e 97       	sbiw	r28, 0x0e	; 14
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	8e 87       	std	Y+14, r24	; 0x0e
	
	// First, fetch the mux value
	int8_t adc_mux = pin_defs[p-1].adc_mux_value;
    48b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    48b2:	08 2e       	mov	r0, r24
    48b4:	00 0c       	add	r0, r0
    48b6:	99 0b       	sbc	r25, r25
    48b8:	9c 01       	movw	r18, r24
    48ba:	21 50       	subi	r18, 0x01	; 1
    48bc:	31 09       	sbc	r19, r1
    48be:	4b e0       	ldi	r20, 0x0B	; 11
    48c0:	42 9f       	mul	r20, r18
    48c2:	c0 01       	movw	r24, r0
    48c4:	43 9f       	mul	r20, r19
    48c6:	90 0d       	add	r25, r0
    48c8:	11 24       	eor	r1, r1
    48ca:	8e 5a       	subi	r24, 0xAE	; 174
    48cc:	9e 4f       	sbci	r25, 0xFE	; 254
    48ce:	fc 01       	movw	r30, r24
    48d0:	80 81       	ld	r24, Z
    48d2:	89 83       	std	Y+1, r24	; 0x01
	
	if(adc_mux == -1)
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	8f 3f       	cpi	r24, 0xFF	; 255
    48d8:	09 f4       	brne	.+2      	; 0x48dc <morph_config_adc_read+0x42>
    48da:	aa c0       	rjmp	.+340    	; 0x4a30 <morph_config_adc_read+0x196>
		// Okay, bye!
		return;
	}

	// Set the prescaler value.
	ADCSRA = (ADCSRA & 0xF8) | adc_configs[adc_mux].adc_prescaler_value;
    48dc:	8a e7       	ldi	r24, 0x7A	; 122
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	2a e7       	ldi	r18, 0x7A	; 122
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	f9 01       	movw	r30, r18
    48e6:	20 81       	ld	r18, Z
    48e8:	42 2f       	mov	r20, r18
    48ea:	48 7f       	andi	r20, 0xF8	; 248
    48ec:	29 81       	ldd	r18, Y+1	; 0x01
    48ee:	02 2e       	mov	r0, r18
    48f0:	00 0c       	add	r0, r0
    48f2:	33 0b       	sbc	r19, r19
    48f4:	22 0f       	add	r18, r18
    48f6:	33 1f       	adc	r19, r19
    48f8:	2a 54       	subi	r18, 0x4A	; 74
    48fa:	3d 4f       	sbci	r19, 0xFD	; 253
    48fc:	f9 01       	movw	r30, r18
    48fe:	20 81       	ld	r18, Z
    4900:	24 2b       	or	r18, r20
    4902:	fc 01       	movw	r30, r24
    4904:	20 83       	st	Z, r18
	
	if(last_read_mux != adc_mux)
    4906:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <last_read_mux>
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	98 17       	cp	r25, r24
    490e:	09 f4       	brne	.+2      	; 0x4912 <morph_config_adc_read+0x78>
    4910:	53 c0       	rjmp	.+166    	; 0x49b8 <morph_config_adc_read+0x11e>
	{
		// We have to do some setup before we get to read from the ADC.
		
		// First, clear ADEN to safely switch ADMUX (datasheet section 24.5)
		ADCSRA &= ~(0x1 << ADEN);
    4912:	8a e7       	ldi	r24, 0x7A	; 122
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	2a e7       	ldi	r18, 0x7A	; 122
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	f9 01       	movw	r30, r18
    491c:	20 81       	ld	r18, Z
    491e:	2f 77       	andi	r18, 0x7F	; 127
    4920:	fc 01       	movw	r30, r24
    4922:	20 83       	st	Z, r18
		
		// Now, we can change the mux and refs.

		// This will build the mux and refs value and put it into the ADMUX.		
		ADMUX = adc_configs[adc_mux].refs_val << REFS0 | (uint8_t)adc_mux << MUX0;
    4924:	8c e7       	ldi	r24, 0x7C	; 124
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	29 81       	ldd	r18, Y+1	; 0x01
    492a:	02 2e       	mov	r0, r18
    492c:	00 0c       	add	r0, r0
    492e:	33 0b       	sbc	r19, r19
    4930:	22 0f       	add	r18, r18
    4932:	33 1f       	adc	r19, r19
    4934:	29 54       	subi	r18, 0x49	; 73
    4936:	3d 4f       	sbci	r19, 0xFD	; 253
    4938:	f9 01       	movw	r30, r18
    493a:	20 81       	ld	r18, Z
    493c:	22 2f       	mov	r18, r18
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	00 24       	eor	r0, r0
    4942:	36 95       	lsr	r19
    4944:	27 95       	ror	r18
    4946:	07 94       	ror	r0
    4948:	36 95       	lsr	r19
    494a:	27 95       	ror	r18
    494c:	07 94       	ror	r0
    494e:	32 2f       	mov	r19, r18
    4950:	20 2d       	mov	r18, r0
    4952:	32 2f       	mov	r19, r18
    4954:	29 81       	ldd	r18, Y+1	; 0x01
    4956:	23 2b       	or	r18, r19
    4958:	fc 01       	movw	r30, r24
    495a:	20 83       	st	Z, r18
		
		// Now, let's start a conversion then throw away the value. 
		// (This needs to be done as the first value after switching refs might not be accurate).

		// Re-enable ADC
		ADCSRA |= 0x1 << ADEN;
    495c:	8a e7       	ldi	r24, 0x7A	; 122
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	2a e7       	ldi	r18, 0x7A	; 122
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	f9 01       	movw	r30, r18
    4966:	20 81       	ld	r18, Z
    4968:	20 68       	ori	r18, 0x80	; 128
    496a:	fc 01       	movw	r30, r24
    496c:	20 83       	st	Z, r18

		// Start ADC conversion
		ADCSRA |= 0x1 << 6;
    496e:	8a e7       	ldi	r24, 0x7A	; 122
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	2a e7       	ldi	r18, 0x7A	; 122
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	f9 01       	movw	r30, r18
    4978:	20 81       	ld	r18, Z
    497a:	20 64       	ori	r18, 0x40	; 64
    497c:	fc 01       	movw	r30, r24
    497e:	20 83       	st	Z, r18

		// Wait for ADC conversion to complete
		while(ADCSRA >> ADSC & 0x1 == 1);
    4980:	00 00       	nop
    4982:	8a e7       	ldi	r24, 0x7A	; 122
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	fc 01       	movw	r30, r24
    4988:	80 81       	ld	r24, Z
    498a:	82 95       	swap	r24
    498c:	86 95       	lsr	r24
    498e:	86 95       	lsr	r24
    4990:	83 70       	andi	r24, 0x03	; 3
    4992:	88 2f       	mov	r24, r24
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	81 70       	andi	r24, 0x01	; 1
    4998:	99 27       	eor	r25, r25
    499a:	89 2b       	or	r24, r25
    499c:	91 f7       	brne	.-28     	; 0x4982 <morph_config_adc_read+0xe8>
		
		// The registers have to be read in this order.
		volatile uint8_t low  = ADCL;
    499e:	88 e7       	ldi	r24, 0x78	; 120
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	fc 01       	movw	r30, r24
    49a4:	80 81       	ld	r24, Z
    49a6:	8c 87       	std	Y+12, r24	; 0x0c
		volatile uint8_t high = ADCH;
    49a8:	89 e7       	ldi	r24, 0x79	; 121
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	fc 01       	movw	r30, r24
    49ae:	80 81       	ld	r24, Z
    49b0:	8d 87       	std	Y+13, r24	; 0x0d
		
		// Okay, setup complete! 
		last_read_mux = adc_mux;
    49b2:	89 81       	ldd	r24, Y+1	; 0x01
    49b4:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <last_read_mux>
		
	}
	
	// Do a convert!
	// Start ADC conversion
	ADCSRA |= 0x1 << 6;
    49b8:	8a e7       	ldi	r24, 0x7A	; 122
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	2a e7       	ldi	r18, 0x7A	; 122
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	f9 01       	movw	r30, r18
    49c2:	20 81       	ld	r18, Z
    49c4:	20 64       	ori	r18, 0x40	; 64
    49c6:	fc 01       	movw	r30, r24
    49c8:	20 83       	st	Z, r18

	// Wait for ADC conversion to complete
	while(ADCSRA >> ADSC & 0x1 == 1);
    49ca:	00 00       	nop
    49cc:	8a e7       	ldi	r24, 0x7A	; 122
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	fc 01       	movw	r30, r24
    49d2:	80 81       	ld	r24, Z
    49d4:	82 95       	swap	r24
    49d6:	86 95       	lsr	r24
    49d8:	86 95       	lsr	r24
    49da:	83 70       	andi	r24, 0x03	; 3
    49dc:	88 2f       	mov	r24, r24
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	81 70       	andi	r24, 0x01	; 1
    49e2:	99 27       	eor	r25, r25
    49e4:	89 2b       	or	r24, r25
    49e6:	91 f7       	brne	.-28     	; 0x49cc <morph_config_adc_read+0x132>
	
    // The registers have to be read in this order.
    uint8_t low  = ADCL;
    49e8:	88 e7       	ldi	r24, 0x78	; 120
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	fc 01       	movw	r30, r24
    49ee:	80 81       	ld	r24, Z
    49f0:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t high = ADCH;
    49f2:	89 e7       	ldi	r24, 0x79	; 121
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	fc 01       	movw	r30, r24
    49f8:	80 81       	ld	r24, Z
    49fa:	8b 83       	std	Y+3, r24	; 0x03

    // combine the two bytes
    uint64_t raw_adc_value = (high << 8) | low;	
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
    49fe:	88 2f       	mov	r24, r24
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	38 2f       	mov	r19, r24
    4a04:	22 27       	eor	r18, r18
    4a06:	8a 81       	ldd	r24, Y+2	; 0x02
    4a08:	88 2f       	mov	r24, r24
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	82 2b       	or	r24, r18
    4a0e:	93 2b       	or	r25, r19
    4a10:	9d 83       	std	Y+5, r25	; 0x05
    4a12:	8c 83       	std	Y+4, r24	; 0x04
    4a14:	89 2f       	mov	r24, r25
    4a16:	88 0f       	add	r24, r24
    4a18:	88 0b       	sbc	r24, r24
    4a1a:	8e 83       	std	Y+6, r24	; 0x06
    4a1c:	8f 83       	std	Y+7, r24	; 0x07
    4a1e:	88 87       	std	Y+8, r24	; 0x08
    4a20:	89 87       	std	Y+9, r24	; 0x09
    4a22:	8a 87       	std	Y+10, r24	; 0x0a
    4a24:	8b 87       	std	Y+11, r24	; 0x0b
	
	return (MorphADCValue)raw_adc_value;
    4a26:	8c 81       	ldd	r24, Y+4	; 0x04
    4a28:	9d 81       	ldd	r25, Y+5	; 0x05
    4a2a:	ae 81       	ldd	r26, Y+6	; 0x06
    4a2c:	bf 81       	ldd	r27, Y+7	; 0x07
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <morph_config_adc_read+0x19a>
	int8_t adc_mux = pin_defs[p-1].adc_mux_value;
	
	if(adc_mux == -1)
	{
		// Okay, bye!
		return;
    4a30:	00 00       	nop
    4a32:	00 00       	nop
    // combine the two bytes
    uint64_t raw_adc_value = (high << 8) | low;	
	
	return (MorphADCValue)raw_adc_value;
	
}
    4a34:	bc 01       	movw	r22, r24
    4a36:	cd 01       	movw	r24, r26
    4a38:	2e 96       	adiw	r28, 0x0e	; 14
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	de bf       	out	0x3e, r29	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	cd bf       	out	0x3d, r28	; 61
    4a44:	df 91       	pop	r29
    4a46:	cf 91       	pop	r28
    4a48:	08 95       	ret

00004a4a <morph_config_adc_set_resolution>:

int8_t morph_config_adc_set_resolution(MorphPinNumber p, MorphADCResolution res)
{
    4a4a:	cf 93       	push	r28
    4a4c:	df 93       	push	r29
    4a4e:	00 d0       	rcall	.+0      	; 0x4a50 <morph_config_adc_set_resolution+0x6>
    4a50:	cd b7       	in	r28, 0x3d	; 61
    4a52:	de b7       	in	r29, 0x3e	; 62
    4a54:	89 83       	std	Y+1, r24	; 0x01
    4a56:	6a 83       	std	Y+2, r22	; 0x02
	
	// You can't really set the resolution on the ATmega328.
	// At least, we aren't supporting it.
	return 10;
    4a58:	8a e0       	ldi	r24, 0x0A	; 10
	
}
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	df 91       	pop	r29
    4a60:	cf 91       	pop	r28
    4a62:	08 95       	ret

00004a64 <morph_config_adc_set_reference>:

void morph_config_adc_set_reference(MorphPinNumber p, enum MorphADCReference ref, uint8_t ref_num)
{
    4a64:	cf 93       	push	r28
    4a66:	df 93       	push	r29
    4a68:	00 d0       	rcall	.+0      	; 0x4a6a <morph_config_adc_set_reference+0x6>
    4a6a:	00 d0       	rcall	.+0      	; 0x4a6c <morph_config_adc_set_reference+0x8>
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	8a 83       	std	Y+2, r24	; 0x02
    4a72:	6b 83       	std	Y+3, r22	; 0x03
    4a74:	4c 83       	std	Y+4, r20	; 0x04
	// First, fetch the mux value
	int8_t adc_mux = pin_defs[p-1].adc_mux_value;
    4a76:	8a 81       	ldd	r24, Y+2	; 0x02
    4a78:	08 2e       	mov	r0, r24
    4a7a:	00 0c       	add	r0, r0
    4a7c:	99 0b       	sbc	r25, r25
    4a7e:	9c 01       	movw	r18, r24
    4a80:	21 50       	subi	r18, 0x01	; 1
    4a82:	31 09       	sbc	r19, r1
    4a84:	4b e0       	ldi	r20, 0x0B	; 11
    4a86:	42 9f       	mul	r20, r18
    4a88:	c0 01       	movw	r24, r0
    4a8a:	43 9f       	mul	r20, r19
    4a8c:	90 0d       	add	r25, r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	8e 5a       	subi	r24, 0xAE	; 174
    4a92:	9e 4f       	sbci	r25, 0xFE	; 254
    4a94:	fc 01       	movw	r30, r24
    4a96:	80 81       	ld	r24, Z
    4a98:	89 83       	std	Y+1, r24	; 0x01
		
	if(adc_mux == -1)
    4a9a:	89 81       	ldd	r24, Y+1	; 0x01
    4a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a9e:	49 f1       	breq	.+82     	; 0x4af2 <morph_config_adc_set_reference+0x8e>
	{
		// Okay, bye!
		return;
	}
	
	if(ref == MorphADCExternalRef)
    4aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa2:	81 30       	cpi	r24, 0x01	; 1
    4aa4:	d1 f4       	brne	.+52     	; 0x4ada <morph_config_adc_set_reference+0x76>
	{
		if(ref_num == 0)
    4aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa8:	88 23       	and	r24, r24
    4aaa:	59 f4       	brne	.+22     	; 0x4ac2 <morph_config_adc_set_reference+0x5e>
		{
			adc_configs[adc_mux].refs_val = 0b00;			
    4aac:	89 81       	ldd	r24, Y+1	; 0x01
    4aae:	08 2e       	mov	r0, r24
    4ab0:	00 0c       	add	r0, r0
    4ab2:	99 0b       	sbc	r25, r25
    4ab4:	88 0f       	add	r24, r24
    4ab6:	99 1f       	adc	r25, r25
    4ab8:	89 54       	subi	r24, 0x49	; 73
    4aba:	9d 4f       	sbci	r25, 0xFD	; 253
    4abc:	fc 01       	movw	r30, r24
    4abe:	10 82       	st	Z, r1
    4ac0:	19 c0       	rjmp	.+50     	; 0x4af4 <morph_config_adc_set_reference+0x90>
		}
		else // This takes care of out of range values as well as ref_num == 1.
		{
			adc_configs[adc_mux].refs_val = 0b01;
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	08 2e       	mov	r0, r24
    4ac6:	00 0c       	add	r0, r0
    4ac8:	99 0b       	sbc	r25, r25
    4aca:	88 0f       	add	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	89 54       	subi	r24, 0x49	; 73
    4ad0:	9d 4f       	sbci	r25, 0xFD	; 253
    4ad2:	21 e0       	ldi	r18, 0x01	; 1
    4ad4:	fc 01       	movw	r30, r24
    4ad6:	20 83       	st	Z, r18
    4ad8:	0d c0       	rjmp	.+26     	; 0x4af4 <morph_config_adc_set_reference+0x90>
		}
	}
	else
	{
		// There is only one internal reference on the 328.
		adc_configs[adc_mux].refs_val = 0b11;
    4ada:	89 81       	ldd	r24, Y+1	; 0x01
    4adc:	08 2e       	mov	r0, r24
    4ade:	00 0c       	add	r0, r0
    4ae0:	99 0b       	sbc	r25, r25
    4ae2:	88 0f       	add	r24, r24
    4ae4:	99 1f       	adc	r25, r25
    4ae6:	89 54       	subi	r24, 0x49	; 73
    4ae8:	9d 4f       	sbci	r25, 0xFD	; 253
    4aea:	23 e0       	ldi	r18, 0x03	; 3
    4aec:	fc 01       	movw	r30, r24
    4aee:	20 83       	st	Z, r18
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <morph_config_adc_set_reference+0x90>
	int8_t adc_mux = pin_defs[p-1].adc_mux_value;
		
	if(adc_mux == -1)
	{
		// Okay, bye!
		return;
    4af2:	00 00       	nop
	{
		// There is only one internal reference on the 328.
		adc_configs[adc_mux].refs_val = 0b11;
	}
	
}
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
    4af8:	0f 90       	pop	r0
    4afa:	0f 90       	pop	r0
    4afc:	df 91       	pop	r29
    4afe:	cf 91       	pop	r28
    4b00:	08 95       	ret

00004b02 <morph_config_adc_set_prescaler>:

void morph_config_adc_set_prescaler(MorphPinNumber p, uint16_t prescaler)
{
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	00 d0       	rcall	.+0      	; 0x4b08 <morph_config_adc_set_prescaler+0x6>
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <morph_config_adc_set_prescaler+0x8>
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    4b0e:	8a 83       	std	Y+2, r24	; 0x02
    4b10:	7c 83       	std	Y+4, r23	; 0x04
    4b12:	6b 83       	std	Y+3, r22	; 0x03
	// Setting the prescaler happens on a global basis. 
	// This function will simply store the desired prescaler value and apply it before a conversion.
	
	// First, fetch the mux value
	int8_t adc_mux = pin_defs[p-1].adc_mux_value;
    4b14:	8a 81       	ldd	r24, Y+2	; 0x02
    4b16:	08 2e       	mov	r0, r24
    4b18:	00 0c       	add	r0, r0
    4b1a:	99 0b       	sbc	r25, r25
    4b1c:	9c 01       	movw	r18, r24
    4b1e:	21 50       	subi	r18, 0x01	; 1
    4b20:	31 09       	sbc	r19, r1
    4b22:	4b e0       	ldi	r20, 0x0B	; 11
    4b24:	42 9f       	mul	r20, r18
    4b26:	c0 01       	movw	r24, r0
    4b28:	43 9f       	mul	r20, r19
    4b2a:	90 0d       	add	r25, r0
    4b2c:	11 24       	eor	r1, r1
    4b2e:	8e 5a       	subi	r24, 0xAE	; 174
    4b30:	9e 4f       	sbci	r25, 0xFE	; 254
    4b32:	fc 01       	movw	r30, r24
    4b34:	80 81       	ld	r24, Z
    4b36:	89 83       	std	Y+1, r24	; 0x01
	
	if(adc_mux == -1)
    4b38:	89 81       	ldd	r24, Y+1	; 0x01
    4b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <morph_config_adc_set_prescaler+0x3e>
    4b3e:	6d c0       	rjmp	.+218    	; 0x4c1a <morph_config_adc_set_prescaler+0x118>
	{
		// Okay, bye!
		return;
	}

	if(prescaler <= 2)
    4b40:	8b 81       	ldd	r24, Y+3	; 0x03
    4b42:	9c 81       	ldd	r25, Y+4	; 0x04
    4b44:	03 97       	sbiw	r24, 0x03	; 3
    4b46:	60 f4       	brcc	.+24     	; 0x4b60 <morph_config_adc_set_prescaler+0x5e>
	{
		// Setting prescaler to 2
		adc_configs[adc_mux].adc_prescaler_value = 0b001;		
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	08 2e       	mov	r0, r24
    4b4c:	00 0c       	add	r0, r0
    4b4e:	99 0b       	sbc	r25, r25
    4b50:	88 0f       	add	r24, r24
    4b52:	99 1f       	adc	r25, r25
    4b54:	8a 54       	subi	r24, 0x4A	; 74
    4b56:	9d 4f       	sbci	r25, 0xFD	; 253
    4b58:	21 e0       	ldi	r18, 0x01	; 1
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	20 83       	st	Z, r18
    4b5e:	5e c0       	rjmp	.+188    	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	}
	else if(prescaler <= 4)
    4b60:	8b 81       	ldd	r24, Y+3	; 0x03
    4b62:	9c 81       	ldd	r25, Y+4	; 0x04
    4b64:	05 97       	sbiw	r24, 0x05	; 5
    4b66:	60 f4       	brcc	.+24     	; 0x4b80 <morph_config_adc_set_prescaler+0x7e>
	{
		// Setting prescaler to 4		
		adc_configs[adc_mux].adc_prescaler_value = 0b010;
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	08 2e       	mov	r0, r24
    4b6c:	00 0c       	add	r0, r0
    4b6e:	99 0b       	sbc	r25, r25
    4b70:	88 0f       	add	r24, r24
    4b72:	99 1f       	adc	r25, r25
    4b74:	8a 54       	subi	r24, 0x4A	; 74
    4b76:	9d 4f       	sbci	r25, 0xFD	; 253
    4b78:	22 e0       	ldi	r18, 0x02	; 2
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	20 83       	st	Z, r18
    4b7e:	4e c0       	rjmp	.+156    	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	}
	else if(prescaler <= 8)
    4b80:	8b 81       	ldd	r24, Y+3	; 0x03
    4b82:	9c 81       	ldd	r25, Y+4	; 0x04
    4b84:	09 97       	sbiw	r24, 0x09	; 9
    4b86:	60 f4       	brcc	.+24     	; 0x4ba0 <morph_config_adc_set_prescaler+0x9e>
	{
		// Setting prescaler to 8		
		adc_configs[adc_mux].adc_prescaler_value = 0b011;
    4b88:	89 81       	ldd	r24, Y+1	; 0x01
    4b8a:	08 2e       	mov	r0, r24
    4b8c:	00 0c       	add	r0, r0
    4b8e:	99 0b       	sbc	r25, r25
    4b90:	88 0f       	add	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	8a 54       	subi	r24, 0x4A	; 74
    4b96:	9d 4f       	sbci	r25, 0xFD	; 253
    4b98:	23 e0       	ldi	r18, 0x03	; 3
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	20 83       	st	Z, r18
    4b9e:	3e c0       	rjmp	.+124    	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	}
	else if(prescaler <= 16)
    4ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba4:	41 97       	sbiw	r24, 0x11	; 17
    4ba6:	60 f4       	brcc	.+24     	; 0x4bc0 <morph_config_adc_set_prescaler+0xbe>
	{
		// Setting prescaler to 16		
		adc_configs[adc_mux].adc_prescaler_value = 0b100;
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	08 2e       	mov	r0, r24
    4bac:	00 0c       	add	r0, r0
    4bae:	99 0b       	sbc	r25, r25
    4bb0:	88 0f       	add	r24, r24
    4bb2:	99 1f       	adc	r25, r25
    4bb4:	8a 54       	subi	r24, 0x4A	; 74
    4bb6:	9d 4f       	sbci	r25, 0xFD	; 253
    4bb8:	24 e0       	ldi	r18, 0x04	; 4
    4bba:	fc 01       	movw	r30, r24
    4bbc:	20 83       	st	Z, r18
    4bbe:	2e c0       	rjmp	.+92     	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	}
	else if(prescaler <= 32)
    4bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc4:	81 97       	sbiw	r24, 0x21	; 33
    4bc6:	60 f4       	brcc	.+24     	; 0x4be0 <morph_config_adc_set_prescaler+0xde>
	{
		// Setting prescaler to 32		
		adc_configs[adc_mux].adc_prescaler_value = 0b101;
    4bc8:	89 81       	ldd	r24, Y+1	; 0x01
    4bca:	08 2e       	mov	r0, r24
    4bcc:	00 0c       	add	r0, r0
    4bce:	99 0b       	sbc	r25, r25
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	8a 54       	subi	r24, 0x4A	; 74
    4bd6:	9d 4f       	sbci	r25, 0xFD	; 253
    4bd8:	25 e0       	ldi	r18, 0x05	; 5
    4bda:	fc 01       	movw	r30, r24
    4bdc:	20 83       	st	Z, r18
    4bde:	1e c0       	rjmp	.+60     	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	}
	else if(prescaler <= 64)
    4be0:	8b 81       	ldd	r24, Y+3	; 0x03
    4be2:	9c 81       	ldd	r25, Y+4	; 0x04
    4be4:	81 34       	cpi	r24, 0x41	; 65
    4be6:	91 05       	cpc	r25, r1
    4be8:	60 f4       	brcc	.+24     	; 0x4c02 <morph_config_adc_set_prescaler+0x100>
	{
		// Setting prescaler to 64		
		adc_configs[adc_mux].adc_prescaler_value = 0b110;
    4bea:	89 81       	ldd	r24, Y+1	; 0x01
    4bec:	08 2e       	mov	r0, r24
    4bee:	00 0c       	add	r0, r0
    4bf0:	99 0b       	sbc	r25, r25
    4bf2:	88 0f       	add	r24, r24
    4bf4:	99 1f       	adc	r25, r25
    4bf6:	8a 54       	subi	r24, 0x4A	; 74
    4bf8:	9d 4f       	sbci	r25, 0xFD	; 253
    4bfa:	26 e0       	ldi	r18, 0x06	; 6
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	20 83       	st	Z, r18
    4c00:	0d c0       	rjmp	.+26     	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	}
	else
	{
		// Setting prescaler to 128
		adc_configs[adc_mux].adc_prescaler_value = 0b111;
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	08 2e       	mov	r0, r24
    4c06:	00 0c       	add	r0, r0
    4c08:	99 0b       	sbc	r25, r25
    4c0a:	88 0f       	add	r24, r24
    4c0c:	99 1f       	adc	r25, r25
    4c0e:	8a 54       	subi	r24, 0x4A	; 74
    4c10:	9d 4f       	sbci	r25, 0xFD	; 253
    4c12:	27 e0       	ldi	r18, 0x07	; 7
    4c14:	fc 01       	movw	r30, r24
    4c16:	20 83       	st	Z, r18
    4c18:	01 c0       	rjmp	.+2      	; 0x4c1c <morph_config_adc_set_prescaler+0x11a>
	int8_t adc_mux = pin_defs[p-1].adc_mux_value;
	
	if(adc_mux == -1)
	{
		// Okay, bye!
		return;
    4c1a:	00 00       	nop
	{
		// Setting prescaler to 128
		adc_configs[adc_mux].adc_prescaler_value = 0b111;
	}

}
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	0f 90       	pop	r0
    4c24:	df 91       	pop	r29
    4c26:	cf 91       	pop	r28
    4c28:	08 95       	ret

00004c2a <morph_config_adc_get_maximum_value>:

MorphADCValue morph_config_adc_get_maximum_value(MorphPinNumber p)
{
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	1f 92       	push	r1
    4c30:	cd b7       	in	r28, 0x3d	; 61
    4c32:	de b7       	in	r29, 0x3e	; 62
    4c34:	89 83       	std	Y+1, r24	; 0x01
	// Return 10 bits maximum.
	return (MorphADCValue)0b1111111111;
    4c36:	8f ef       	ldi	r24, 0xFF	; 255
    4c38:	93 e0       	ldi	r25, 0x03	; 3
    4c3a:	a0 e0       	ldi	r26, 0x00	; 0
    4c3c:	b0 e0       	ldi	r27, 0x00	; 0
}
    4c3e:	bc 01       	movw	r22, r24
    4c40:	cd 01       	movw	r24, r26
    4c42:	0f 90       	pop	r0
    4c44:	df 91       	pop	r29
    4c46:	cf 91       	pop	r28
    4c48:	08 95       	ret

00004c4a <morph_config_init>:

// ---- ADC END ----

void morph_config_init()
{
    4c4a:	cf 93       	push	r28
    4c4c:	df 93       	push	r29
    4c4e:	cd b7       	in	r28, 0x3d	; 61
    4c50:	de b7       	in	r29, 0x3e	; 62
}
    4c52:	00 00       	nop
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	08 95       	ret

00004c5a <sendBit>:

// Actually send a bit to the string. We turn off optimizations to make sure the compile does
// not reorder things and make it so the delay happens in the wrong place.
 

inline void sendBit( bool bitVal ) {
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	1f 92       	push	r1
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    4c64:	89 83       	std	Y+1, r24	; 0x01
	
	if (  bitVal ) {				// 0 bit
    4c66:	89 81       	ldd	r24, Y+1	; 0x01
    4c68:	88 23       	and	r24, r24
    4c6a:	61 f0       	breq	.+24     	; 0x4c84 <sendBit+0x2a>
		
		asm volatile (
    4c6c:	5f 9a       	sbi	0x0b, 7	; 11
	...
    4c7a:	00 00       	nop
    4c7c:	5f 98       	cbi	0x0b, 7	; 11
    4c7e:	00 00       	nop
    4c80:	00 00       	nop
	// Note that the inter-bit gap can be as long as you want as long as it doesn't exceed the 5us reset timeout (which is A long time)
	// Here I have been generous and not tried to squeeze the gap tight but instead erred on the side of lots of extra time.
	// This has thenice side effect of avoid glitches on very long strings becuase

	
}
    4c82:	08 c0       	rjmp	.+16     	; 0x4c94 <sendBit+0x3a>
		// **************************************************************************
		// This line is really the only tight goldilocks timing in the whole program!
		// **************************************************************************


		asm volatile (
    4c84:	5f 9a       	sbi	0x0b, 7	; 11
    4c86:	00 00       	nop
    4c88:	5f 98       	cbi	0x0b, 7	; 11
	...
	// Note that the inter-bit gap can be as long as you want as long as it doesn't exceed the 5us reset timeout (which is A long time)
	// Here I have been generous and not tried to squeeze the gap tight but instead erred on the side of lots of extra time.
	// This has thenice side effect of avoid glitches on very long strings becuase

	
}
    4c96:	0f 90       	pop	r0
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	08 95       	ret

00004c9e <sendByte>:
 
void sendByte( unsigned char byte ) {
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	00 d0       	rcall	.+0      	; 0x4ca4 <sendByte+0x6>
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
    4ca8:	8a 83       	std	Y+2, r24	; 0x02
 
    for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
    4caa:	19 82       	std	Y+1, r1	; 0x01
    4cac:	15 c0       	rjmp	.+42     	; 0x4cd8 <sendByte+0x3a>
 
      sendBit( bitRead( byte , 7 ) ); // Neopixel wants bit in highest-to-lowest order
    4cae:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb0:	88 1f       	adc	r24, r24
    4cb2:	88 27       	eor	r24, r24
    4cb4:	88 1f       	adc	r24, r24
    4cb6:	88 2f       	mov	r24, r24
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	81 70       	andi	r24, 0x01	; 1
    4cbc:	99 27       	eor	r25, r25
    4cbe:	21 e0       	ldi	r18, 0x01	; 1
    4cc0:	89 2b       	or	r24, r25
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <sendByte+0x28>
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	82 2f       	mov	r24, r18
    4cc8:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <sendBit>
                                                     // so send highest bit (bit #7 in an 8-bit byte since they start at 0)
      byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
    4ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cce:	88 0f       	add	r24, r24
    4cd0:	8a 83       	std	Y+2, r24	; 0x02
	
}
 
void sendByte( unsigned char byte ) {
 
    for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
    4cd4:	8f 5f       	subi	r24, 0xFF	; 255
    4cd6:	89 83       	std	Y+1, r24	; 0x01
    4cd8:	89 81       	ldd	r24, Y+1	; 0x01
    4cda:	88 30       	cpi	r24, 0x08	; 8
    4cdc:	40 f3       	brcs	.-48     	; 0x4cae <sendByte+0x10>
      sendBit( bitRead( byte , 7 ) ); // Neopixel wants bit in highest-to-lowest order
                                                     // so send highest bit (bit #7 in an 8-bit byte since they start at 0)
      byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
 
    }
}
    4cde:	00 00       	nop
    4ce0:	0f 90       	pop	r0
    4ce2:	0f 90       	pop	r0
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	08 95       	ret

00004cea <ledsetup>:
  show() - latch the recently sent pixels on the LEDs . Call once per frame.
*/
 
// Set the specified pin up as digital out
 
void ledsetup() {
    4cea:	cf 93       	push	r28
    4cec:	df 93       	push	r29
    4cee:	cd b7       	in	r28, 0x3d	; 61
    4cf0:	de b7       	in	r29, 0x3e	; 62
 
  bitSet( PIXEL_DDR , PIXEL_BIT );
    4cf2:	8a e2       	ldi	r24, 0x2A	; 42
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	2a e2       	ldi	r18, 0x2A	; 42
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	f9 01       	movw	r30, r18
    4cfc:	20 81       	ld	r18, Z
    4cfe:	20 68       	ori	r18, 0x80	; 128
    4d00:	fc 01       	movw	r30, r24
    4d02:	20 83       	st	Z, r18
  bitSet( PIXEL_PORT , PIXEL_BIT );
    4d04:	8b e2       	ldi	r24, 0x2B	; 43
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	2b e2       	ldi	r18, 0x2B	; 43
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	f9 01       	movw	r30, r18
    4d0e:	20 81       	ld	r18, Z
    4d10:	20 68       	ori	r18, 0x80	; 128
    4d12:	fc 01       	movw	r30, r24
    4d14:	20 83       	st	Z, r18
 
}
    4d16:	00 00       	nop
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	08 95       	ret

00004d1e <sendPixel>:
 
void sendPixel( unsigned char r, unsigned char g , unsigned char b ) {
    4d1e:	cf 93       	push	r28
    4d20:	df 93       	push	r29
    4d22:	00 d0       	rcall	.+0      	; 0x4d24 <sendPixel+0x6>
    4d24:	1f 92       	push	r1
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
    4d2a:	89 83       	std	Y+1, r24	; 0x01
    4d2c:	6a 83       	std	Y+2, r22	; 0x02
    4d2e:	4b 83       	std	Y+3, r20	; 0x03
 
  sendByte(g); // Neopixel wants colors in green-then-red-then-blue order
    4d30:	8a 81       	ldd	r24, Y+2	; 0x02
    4d32:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <sendByte>
  sendByte(r);
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <sendByte>
  sendByte(b);
    4d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3e:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <sendByte>
 
}
    4d42:	00 00       	nop
    4d44:	0f 90       	pop	r0
    4d46:	0f 90       	pop	r0
    4d48:	0f 90       	pop	r0
    4d4a:	df 91       	pop	r29
    4d4c:	cf 91       	pop	r28
    4d4e:	08 95       	ret

00004d50 <show>:
 
// Just wait long enough without sending any bots to cause the pixels to latch and display the last sent frame
 
void show() {
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	cd b7       	in	r28, 0x3d	; 61
    4d56:	de b7       	in	r29, 0x3e	; 62
    DELAY_CYCLES( NS_TO_CYCLES(RES) );
    4d58:	85 e2       	ldi	r24, 0x25	; 37
    4d5a:	8a 95       	dec	r24
    4d5c:	f1 f7       	brne	.-4      	; 0x4d5a <show+0xa>
    4d5e:	00 00       	nop

	
    4d60:	00 00       	nop
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	08 95       	ret

00004d68 <__subsf3>:
    4d68:	50 58       	subi	r21, 0x80	; 128

00004d6a <__addsf3>:
    4d6a:	bb 27       	eor	r27, r27
    4d6c:	aa 27       	eor	r26, r26
    4d6e:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__addsf3x>
    4d72:	0c 94 3d 29 	jmp	0x527a	; 0x527a <__fp_round>
    4d76:	0e 94 04 29 	call	0x5208	; 0x5208 <__fp_pscA>
    4d7a:	38 f0       	brcs	.+14     	; 0x4d8a <__addsf3+0x20>
    4d7c:	0e 94 0b 29 	call	0x5216	; 0x5216 <__fp_pscB>
    4d80:	20 f0       	brcs	.+8      	; 0x4d8a <__addsf3+0x20>
    4d82:	39 f4       	brne	.+14     	; 0x4d92 <__addsf3+0x28>
    4d84:	9f 3f       	cpi	r25, 0xFF	; 255
    4d86:	19 f4       	brne	.+6      	; 0x4d8e <__addsf3+0x24>
    4d88:	26 f4       	brtc	.+8      	; 0x4d92 <__addsf3+0x28>
    4d8a:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__fp_nan>
    4d8e:	0e f4       	brtc	.+2      	; 0x4d92 <__addsf3+0x28>
    4d90:	e0 95       	com	r30
    4d92:	e7 fb       	bst	r30, 7
    4d94:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__fp_inf>

00004d98 <__addsf3x>:
    4d98:	e9 2f       	mov	r30, r25
    4d9a:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__fp_split3>
    4d9e:	58 f3       	brcs	.-42     	; 0x4d76 <__addsf3+0xc>
    4da0:	ba 17       	cp	r27, r26
    4da2:	62 07       	cpc	r22, r18
    4da4:	73 07       	cpc	r23, r19
    4da6:	84 07       	cpc	r24, r20
    4da8:	95 07       	cpc	r25, r21
    4daa:	20 f0       	brcs	.+8      	; 0x4db4 <__addsf3x+0x1c>
    4dac:	79 f4       	brne	.+30     	; 0x4dcc <__addsf3x+0x34>
    4dae:	a6 f5       	brtc	.+104    	; 0x4e18 <__addsf3x+0x80>
    4db0:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__fp_zero>
    4db4:	0e f4       	brtc	.+2      	; 0x4db8 <__addsf3x+0x20>
    4db6:	e0 95       	com	r30
    4db8:	0b 2e       	mov	r0, r27
    4dba:	ba 2f       	mov	r27, r26
    4dbc:	a0 2d       	mov	r26, r0
    4dbe:	0b 01       	movw	r0, r22
    4dc0:	b9 01       	movw	r22, r18
    4dc2:	90 01       	movw	r18, r0
    4dc4:	0c 01       	movw	r0, r24
    4dc6:	ca 01       	movw	r24, r20
    4dc8:	a0 01       	movw	r20, r0
    4dca:	11 24       	eor	r1, r1
    4dcc:	ff 27       	eor	r31, r31
    4dce:	59 1b       	sub	r21, r25
    4dd0:	99 f0       	breq	.+38     	; 0x4df8 <__addsf3x+0x60>
    4dd2:	59 3f       	cpi	r21, 0xF9	; 249
    4dd4:	50 f4       	brcc	.+20     	; 0x4dea <__addsf3x+0x52>
    4dd6:	50 3e       	cpi	r21, 0xE0	; 224
    4dd8:	68 f1       	brcs	.+90     	; 0x4e34 <__addsf3x+0x9c>
    4dda:	1a 16       	cp	r1, r26
    4ddc:	f0 40       	sbci	r31, 0x00	; 0
    4dde:	a2 2f       	mov	r26, r18
    4de0:	23 2f       	mov	r18, r19
    4de2:	34 2f       	mov	r19, r20
    4de4:	44 27       	eor	r20, r20
    4de6:	58 5f       	subi	r21, 0xF8	; 248
    4de8:	f3 cf       	rjmp	.-26     	; 0x4dd0 <__addsf3x+0x38>
    4dea:	46 95       	lsr	r20
    4dec:	37 95       	ror	r19
    4dee:	27 95       	ror	r18
    4df0:	a7 95       	ror	r26
    4df2:	f0 40       	sbci	r31, 0x00	; 0
    4df4:	53 95       	inc	r21
    4df6:	c9 f7       	brne	.-14     	; 0x4dea <__addsf3x+0x52>
    4df8:	7e f4       	brtc	.+30     	; 0x4e18 <__addsf3x+0x80>
    4dfa:	1f 16       	cp	r1, r31
    4dfc:	ba 0b       	sbc	r27, r26
    4dfe:	62 0b       	sbc	r22, r18
    4e00:	73 0b       	sbc	r23, r19
    4e02:	84 0b       	sbc	r24, r20
    4e04:	ba f0       	brmi	.+46     	; 0x4e34 <__addsf3x+0x9c>
    4e06:	91 50       	subi	r25, 0x01	; 1
    4e08:	a1 f0       	breq	.+40     	; 0x4e32 <__addsf3x+0x9a>
    4e0a:	ff 0f       	add	r31, r31
    4e0c:	bb 1f       	adc	r27, r27
    4e0e:	66 1f       	adc	r22, r22
    4e10:	77 1f       	adc	r23, r23
    4e12:	88 1f       	adc	r24, r24
    4e14:	c2 f7       	brpl	.-16     	; 0x4e06 <__addsf3x+0x6e>
    4e16:	0e c0       	rjmp	.+28     	; 0x4e34 <__addsf3x+0x9c>
    4e18:	ba 0f       	add	r27, r26
    4e1a:	62 1f       	adc	r22, r18
    4e1c:	73 1f       	adc	r23, r19
    4e1e:	84 1f       	adc	r24, r20
    4e20:	48 f4       	brcc	.+18     	; 0x4e34 <__addsf3x+0x9c>
    4e22:	87 95       	ror	r24
    4e24:	77 95       	ror	r23
    4e26:	67 95       	ror	r22
    4e28:	b7 95       	ror	r27
    4e2a:	f7 95       	ror	r31
    4e2c:	9e 3f       	cpi	r25, 0xFE	; 254
    4e2e:	08 f0       	brcs	.+2      	; 0x4e32 <__addsf3x+0x9a>
    4e30:	b0 cf       	rjmp	.-160    	; 0x4d92 <__addsf3+0x28>
    4e32:	93 95       	inc	r25
    4e34:	88 0f       	add	r24, r24
    4e36:	08 f0       	brcs	.+2      	; 0x4e3a <__addsf3x+0xa2>
    4e38:	99 27       	eor	r25, r25
    4e3a:	ee 0f       	add	r30, r30
    4e3c:	97 95       	ror	r25
    4e3e:	87 95       	ror	r24
    4e40:	08 95       	ret

00004e42 <__cmpsf2>:
    4e42:	0e 94 c7 28 	call	0x518e	; 0x518e <__fp_cmp>
    4e46:	08 f4       	brcc	.+2      	; 0x4e4a <__cmpsf2+0x8>
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	08 95       	ret

00004e4c <cos>:
    4e4c:	0e 94 14 29 	call	0x5228	; 0x5228 <__fp_rempio2>
    4e50:	e3 95       	inc	r30
    4e52:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__fp_sinus>

00004e56 <__divsf3>:
    4e56:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__divsf3x>
    4e5a:	0c 94 3d 29 	jmp	0x527a	; 0x527a <__fp_round>
    4e5e:	0e 94 0b 29 	call	0x5216	; 0x5216 <__fp_pscB>
    4e62:	58 f0       	brcs	.+22     	; 0x4e7a <__divsf3+0x24>
    4e64:	0e 94 04 29 	call	0x5208	; 0x5208 <__fp_pscA>
    4e68:	40 f0       	brcs	.+16     	; 0x4e7a <__divsf3+0x24>
    4e6a:	29 f4       	brne	.+10     	; 0x4e76 <__divsf3+0x20>
    4e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    4e6e:	29 f0       	breq	.+10     	; 0x4e7a <__divsf3+0x24>
    4e70:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__fp_inf>
    4e74:	51 11       	cpse	r21, r1
    4e76:	0c 94 85 29 	jmp	0x530a	; 0x530a <__fp_szero>
    4e7a:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__fp_nan>

00004e7e <__divsf3x>:
    4e7e:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__fp_split3>
    4e82:	68 f3       	brcs	.-38     	; 0x4e5e <__divsf3+0x8>

00004e84 <__divsf3_pse>:
    4e84:	99 23       	and	r25, r25
    4e86:	b1 f3       	breq	.-20     	; 0x4e74 <__divsf3+0x1e>
    4e88:	55 23       	and	r21, r21
    4e8a:	91 f3       	breq	.-28     	; 0x4e70 <__divsf3+0x1a>
    4e8c:	95 1b       	sub	r25, r21
    4e8e:	55 0b       	sbc	r21, r21
    4e90:	bb 27       	eor	r27, r27
    4e92:	aa 27       	eor	r26, r26
    4e94:	62 17       	cp	r22, r18
    4e96:	73 07       	cpc	r23, r19
    4e98:	84 07       	cpc	r24, r20
    4e9a:	38 f0       	brcs	.+14     	; 0x4eaa <__divsf3_pse+0x26>
    4e9c:	9f 5f       	subi	r25, 0xFF	; 255
    4e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea0:	22 0f       	add	r18, r18
    4ea2:	33 1f       	adc	r19, r19
    4ea4:	44 1f       	adc	r20, r20
    4ea6:	aa 1f       	adc	r26, r26
    4ea8:	a9 f3       	breq	.-22     	; 0x4e94 <__divsf3_pse+0x10>
    4eaa:	35 d0       	rcall	.+106    	; 0x4f16 <__divsf3_pse+0x92>
    4eac:	0e 2e       	mov	r0, r30
    4eae:	3a f0       	brmi	.+14     	; 0x4ebe <__divsf3_pse+0x3a>
    4eb0:	e0 e8       	ldi	r30, 0x80	; 128
    4eb2:	32 d0       	rcall	.+100    	; 0x4f18 <__divsf3_pse+0x94>
    4eb4:	91 50       	subi	r25, 0x01	; 1
    4eb6:	50 40       	sbci	r21, 0x00	; 0
    4eb8:	e6 95       	lsr	r30
    4eba:	00 1c       	adc	r0, r0
    4ebc:	ca f7       	brpl	.-14     	; 0x4eb0 <__divsf3_pse+0x2c>
    4ebe:	2b d0       	rcall	.+86     	; 0x4f16 <__divsf3_pse+0x92>
    4ec0:	fe 2f       	mov	r31, r30
    4ec2:	29 d0       	rcall	.+82     	; 0x4f16 <__divsf3_pse+0x92>
    4ec4:	66 0f       	add	r22, r22
    4ec6:	77 1f       	adc	r23, r23
    4ec8:	88 1f       	adc	r24, r24
    4eca:	bb 1f       	adc	r27, r27
    4ecc:	26 17       	cp	r18, r22
    4ece:	37 07       	cpc	r19, r23
    4ed0:	48 07       	cpc	r20, r24
    4ed2:	ab 07       	cpc	r26, r27
    4ed4:	b0 e8       	ldi	r27, 0x80	; 128
    4ed6:	09 f0       	breq	.+2      	; 0x4eda <__divsf3_pse+0x56>
    4ed8:	bb 0b       	sbc	r27, r27
    4eda:	80 2d       	mov	r24, r0
    4edc:	bf 01       	movw	r22, r30
    4ede:	ff 27       	eor	r31, r31
    4ee0:	93 58       	subi	r25, 0x83	; 131
    4ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee4:	3a f0       	brmi	.+14     	; 0x4ef4 <__divsf3_pse+0x70>
    4ee6:	9e 3f       	cpi	r25, 0xFE	; 254
    4ee8:	51 05       	cpc	r21, r1
    4eea:	78 f0       	brcs	.+30     	; 0x4f0a <__divsf3_pse+0x86>
    4eec:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__fp_inf>
    4ef0:	0c 94 85 29 	jmp	0x530a	; 0x530a <__fp_szero>
    4ef4:	5f 3f       	cpi	r21, 0xFF	; 255
    4ef6:	e4 f3       	brlt	.-8      	; 0x4ef0 <__divsf3_pse+0x6c>
    4ef8:	98 3e       	cpi	r25, 0xE8	; 232
    4efa:	d4 f3       	brlt	.-12     	; 0x4ef0 <__divsf3_pse+0x6c>
    4efc:	86 95       	lsr	r24
    4efe:	77 95       	ror	r23
    4f00:	67 95       	ror	r22
    4f02:	b7 95       	ror	r27
    4f04:	f7 95       	ror	r31
    4f06:	9f 5f       	subi	r25, 0xFF	; 255
    4f08:	c9 f7       	brne	.-14     	; 0x4efc <__divsf3_pse+0x78>
    4f0a:	88 0f       	add	r24, r24
    4f0c:	91 1d       	adc	r25, r1
    4f0e:	96 95       	lsr	r25
    4f10:	87 95       	ror	r24
    4f12:	97 f9       	bld	r25, 7
    4f14:	08 95       	ret
    4f16:	e1 e0       	ldi	r30, 0x01	; 1
    4f18:	66 0f       	add	r22, r22
    4f1a:	77 1f       	adc	r23, r23
    4f1c:	88 1f       	adc	r24, r24
    4f1e:	bb 1f       	adc	r27, r27
    4f20:	62 17       	cp	r22, r18
    4f22:	73 07       	cpc	r23, r19
    4f24:	84 07       	cpc	r24, r20
    4f26:	ba 07       	cpc	r27, r26
    4f28:	20 f0       	brcs	.+8      	; 0x4f32 <__divsf3_pse+0xae>
    4f2a:	62 1b       	sub	r22, r18
    4f2c:	73 0b       	sbc	r23, r19
    4f2e:	84 0b       	sbc	r24, r20
    4f30:	ba 0b       	sbc	r27, r26
    4f32:	ee 1f       	adc	r30, r30
    4f34:	88 f7       	brcc	.-30     	; 0x4f18 <__divsf3_pse+0x94>
    4f36:	e0 95       	com	r30
    4f38:	08 95       	ret

00004f3a <__fixsfdi>:
    4f3a:	be e3       	ldi	r27, 0x3E	; 62
    4f3c:	04 d0       	rcall	.+8      	; 0x4f46 <__fixunssfdi+0x2>
    4f3e:	08 f4       	brcc	.+2      	; 0x4f42 <__fixsfdi+0x8>
    4f40:	90 e8       	ldi	r25, 0x80	; 128
    4f42:	08 95       	ret

00004f44 <__fixunssfdi>:
    4f44:	bf e3       	ldi	r27, 0x3F	; 63
    4f46:	22 27       	eor	r18, r18
    4f48:	33 27       	eor	r19, r19
    4f4a:	a9 01       	movw	r20, r18
    4f4c:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__fp_splitA>
    4f50:	60 f1       	brcs	.+88     	; 0x4faa <__fixunssfdi+0x66>
    4f52:	9f 57       	subi	r25, 0x7F	; 127
    4f54:	48 f1       	brcs	.+82     	; 0x4fa8 <__fixunssfdi+0x64>
    4f56:	b9 17       	cp	r27, r25
    4f58:	40 f1       	brcs	.+80     	; 0x4faa <__fixunssfdi+0x66>
    4f5a:	bf e3       	ldi	r27, 0x3F	; 63
    4f5c:	b9 1b       	sub	r27, r25
    4f5e:	99 27       	eor	r25, r25
    4f60:	b8 50       	subi	r27, 0x08	; 8
    4f62:	3a f4       	brpl	.+14     	; 0x4f72 <__fixunssfdi+0x2e>
    4f64:	66 0f       	add	r22, r22
    4f66:	77 1f       	adc	r23, r23
    4f68:	88 1f       	adc	r24, r24
    4f6a:	99 1f       	adc	r25, r25
    4f6c:	b3 95       	inc	r27
    4f6e:	d2 f3       	brmi	.-12     	; 0x4f64 <__fixunssfdi+0x20>
    4f70:	16 c0       	rjmp	.+44     	; 0x4f9e <__fixunssfdi+0x5a>
    4f72:	b8 50       	subi	r27, 0x08	; 8
    4f74:	4a f0       	brmi	.+18     	; 0x4f88 <__fixunssfdi+0x44>
    4f76:	23 2f       	mov	r18, r19
    4f78:	34 2f       	mov	r19, r20
    4f7a:	45 2f       	mov	r20, r21
    4f7c:	56 2f       	mov	r21, r22
    4f7e:	67 2f       	mov	r22, r23
    4f80:	78 2f       	mov	r23, r24
    4f82:	88 27       	eor	r24, r24
    4f84:	b8 50       	subi	r27, 0x08	; 8
    4f86:	ba f7       	brpl	.-18     	; 0x4f76 <__fixunssfdi+0x32>
    4f88:	b8 5f       	subi	r27, 0xF8	; 248
    4f8a:	49 f0       	breq	.+18     	; 0x4f9e <__fixunssfdi+0x5a>
    4f8c:	86 95       	lsr	r24
    4f8e:	77 95       	ror	r23
    4f90:	67 95       	ror	r22
    4f92:	57 95       	ror	r21
    4f94:	47 95       	ror	r20
    4f96:	37 95       	ror	r19
    4f98:	27 95       	ror	r18
    4f9a:	ba 95       	dec	r27
    4f9c:	b9 f7       	brne	.-18     	; 0x4f8c <__fixunssfdi+0x48>
    4f9e:	16 f4       	brtc	.+4      	; 0x4fa4 <__fixunssfdi+0x60>
    4fa0:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <__fp_negdi>
    4fa4:	88 94       	clc
    4fa6:	08 95       	ret
    4fa8:	88 94       	clc
    4faa:	60 e0       	ldi	r22, 0x00	; 0
    4fac:	70 e0       	ldi	r23, 0x00	; 0
    4fae:	cb 01       	movw	r24, r22
    4fb0:	08 95       	ret

00004fb2 <__fixunssfsi>:
    4fb2:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__fp_splitA>
    4fb6:	88 f0       	brcs	.+34     	; 0x4fda <__fixunssfsi+0x28>
    4fb8:	9f 57       	subi	r25, 0x7F	; 127
    4fba:	98 f0       	brcs	.+38     	; 0x4fe2 <__fixunssfsi+0x30>
    4fbc:	b9 2f       	mov	r27, r25
    4fbe:	99 27       	eor	r25, r25
    4fc0:	b7 51       	subi	r27, 0x17	; 23
    4fc2:	b0 f0       	brcs	.+44     	; 0x4ff0 <__fixunssfsi+0x3e>
    4fc4:	e1 f0       	breq	.+56     	; 0x4ffe <__fixunssfsi+0x4c>
    4fc6:	66 0f       	add	r22, r22
    4fc8:	77 1f       	adc	r23, r23
    4fca:	88 1f       	adc	r24, r24
    4fcc:	99 1f       	adc	r25, r25
    4fce:	1a f0       	brmi	.+6      	; 0x4fd6 <__fixunssfsi+0x24>
    4fd0:	ba 95       	dec	r27
    4fd2:	c9 f7       	brne	.-14     	; 0x4fc6 <__fixunssfsi+0x14>
    4fd4:	14 c0       	rjmp	.+40     	; 0x4ffe <__fixunssfsi+0x4c>
    4fd6:	b1 30       	cpi	r27, 0x01	; 1
    4fd8:	91 f0       	breq	.+36     	; 0x4ffe <__fixunssfsi+0x4c>
    4fda:	0e 94 84 29 	call	0x5308	; 0x5308 <__fp_zero>
    4fde:	b1 e0       	ldi	r27, 0x01	; 1
    4fe0:	08 95       	ret
    4fe2:	0c 94 84 29 	jmp	0x5308	; 0x5308 <__fp_zero>
    4fe6:	67 2f       	mov	r22, r23
    4fe8:	78 2f       	mov	r23, r24
    4fea:	88 27       	eor	r24, r24
    4fec:	b8 5f       	subi	r27, 0xF8	; 248
    4fee:	39 f0       	breq	.+14     	; 0x4ffe <__fixunssfsi+0x4c>
    4ff0:	b9 3f       	cpi	r27, 0xF9	; 249
    4ff2:	cc f3       	brlt	.-14     	; 0x4fe6 <__fixunssfsi+0x34>
    4ff4:	86 95       	lsr	r24
    4ff6:	77 95       	ror	r23
    4ff8:	67 95       	ror	r22
    4ffa:	b3 95       	inc	r27
    4ffc:	d9 f7       	brne	.-10     	; 0x4ff4 <__fixunssfsi+0x42>
    4ffe:	3e f4       	brtc	.+14     	; 0x500e <__fixunssfsi+0x5c>
    5000:	90 95       	com	r25
    5002:	80 95       	com	r24
    5004:	70 95       	com	r23
    5006:	61 95       	neg	r22
    5008:	7f 4f       	sbci	r23, 0xFF	; 255
    500a:	8f 4f       	sbci	r24, 0xFF	; 255
    500c:	9f 4f       	sbci	r25, 0xFF	; 255
    500e:	08 95       	ret

00005010 <__floatdisf>:
    5010:	97 fb       	bst	r25, 7
    5012:	16 f4       	brtc	.+4      	; 0x5018 <__floatdisf+0x8>
    5014:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <__fp_negdi>
    5018:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__fp_di2sf>

0000501c <__floatunsisf>:
    501c:	e8 94       	clt
    501e:	09 c0       	rjmp	.+18     	; 0x5032 <__floatsisf+0x12>

00005020 <__floatsisf>:
    5020:	97 fb       	bst	r25, 7
    5022:	3e f4       	brtc	.+14     	; 0x5032 <__floatsisf+0x12>
    5024:	90 95       	com	r25
    5026:	80 95       	com	r24
    5028:	70 95       	com	r23
    502a:	61 95       	neg	r22
    502c:	7f 4f       	sbci	r23, 0xFF	; 255
    502e:	8f 4f       	sbci	r24, 0xFF	; 255
    5030:	9f 4f       	sbci	r25, 0xFF	; 255
    5032:	99 23       	and	r25, r25
    5034:	a9 f0       	breq	.+42     	; 0x5060 <__floatsisf+0x40>
    5036:	f9 2f       	mov	r31, r25
    5038:	96 e9       	ldi	r25, 0x96	; 150
    503a:	bb 27       	eor	r27, r27
    503c:	93 95       	inc	r25
    503e:	f6 95       	lsr	r31
    5040:	87 95       	ror	r24
    5042:	77 95       	ror	r23
    5044:	67 95       	ror	r22
    5046:	b7 95       	ror	r27
    5048:	f1 11       	cpse	r31, r1
    504a:	f8 cf       	rjmp	.-16     	; 0x503c <__floatsisf+0x1c>
    504c:	fa f4       	brpl	.+62     	; 0x508c <__floatsisf+0x6c>
    504e:	bb 0f       	add	r27, r27
    5050:	11 f4       	brne	.+4      	; 0x5056 <__floatsisf+0x36>
    5052:	60 ff       	sbrs	r22, 0
    5054:	1b c0       	rjmp	.+54     	; 0x508c <__floatsisf+0x6c>
    5056:	6f 5f       	subi	r22, 0xFF	; 255
    5058:	7f 4f       	sbci	r23, 0xFF	; 255
    505a:	8f 4f       	sbci	r24, 0xFF	; 255
    505c:	9f 4f       	sbci	r25, 0xFF	; 255
    505e:	16 c0       	rjmp	.+44     	; 0x508c <__floatsisf+0x6c>
    5060:	88 23       	and	r24, r24
    5062:	11 f0       	breq	.+4      	; 0x5068 <__floatsisf+0x48>
    5064:	96 e9       	ldi	r25, 0x96	; 150
    5066:	11 c0       	rjmp	.+34     	; 0x508a <__floatsisf+0x6a>
    5068:	77 23       	and	r23, r23
    506a:	21 f0       	breq	.+8      	; 0x5074 <__floatsisf+0x54>
    506c:	9e e8       	ldi	r25, 0x8E	; 142
    506e:	87 2f       	mov	r24, r23
    5070:	76 2f       	mov	r23, r22
    5072:	05 c0       	rjmp	.+10     	; 0x507e <__floatsisf+0x5e>
    5074:	66 23       	and	r22, r22
    5076:	71 f0       	breq	.+28     	; 0x5094 <__floatsisf+0x74>
    5078:	96 e8       	ldi	r25, 0x86	; 134
    507a:	86 2f       	mov	r24, r22
    507c:	70 e0       	ldi	r23, 0x00	; 0
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	2a f0       	brmi	.+10     	; 0x508c <__floatsisf+0x6c>
    5082:	9a 95       	dec	r25
    5084:	66 0f       	add	r22, r22
    5086:	77 1f       	adc	r23, r23
    5088:	88 1f       	adc	r24, r24
    508a:	da f7       	brpl	.-10     	; 0x5082 <__floatsisf+0x62>
    508c:	88 0f       	add	r24, r24
    508e:	96 95       	lsr	r25
    5090:	87 95       	ror	r24
    5092:	97 f9       	bld	r25, 7
    5094:	08 95       	ret

00005096 <__floatundisf>:
    5096:	e8 94       	clt

00005098 <__fp_di2sf>:
    5098:	f9 2f       	mov	r31, r25
    509a:	96 eb       	ldi	r25, 0xB6	; 182
    509c:	ff 23       	and	r31, r31
    509e:	81 f0       	breq	.+32     	; 0x50c0 <__fp_di2sf+0x28>
    50a0:	12 16       	cp	r1, r18
    50a2:	13 06       	cpc	r1, r19
    50a4:	14 06       	cpc	r1, r20
    50a6:	44 0b       	sbc	r20, r20
    50a8:	93 95       	inc	r25
    50aa:	f6 95       	lsr	r31
    50ac:	87 95       	ror	r24
    50ae:	77 95       	ror	r23
    50b0:	67 95       	ror	r22
    50b2:	57 95       	ror	r21
    50b4:	40 40       	sbci	r20, 0x00	; 0
    50b6:	ff 23       	and	r31, r31
    50b8:	b9 f7       	brne	.-18     	; 0x50a8 <__fp_di2sf+0x10>
    50ba:	1b c0       	rjmp	.+54     	; 0x50f2 <__fp_di2sf+0x5a>
    50bc:	99 27       	eor	r25, r25
    50be:	08 95       	ret
    50c0:	88 23       	and	r24, r24
    50c2:	51 f4       	brne	.+20     	; 0x50d8 <__fp_di2sf+0x40>
    50c4:	98 50       	subi	r25, 0x08	; 8
    50c6:	d2 f7       	brpl	.-12     	; 0x50bc <__fp_di2sf+0x24>
    50c8:	87 2b       	or	r24, r23
    50ca:	76 2f       	mov	r23, r22
    50cc:	65 2f       	mov	r22, r21
    50ce:	54 2f       	mov	r21, r20
    50d0:	43 2f       	mov	r20, r19
    50d2:	32 2f       	mov	r19, r18
    50d4:	20 e0       	ldi	r18, 0x00	; 0
    50d6:	b1 f3       	breq	.-20     	; 0x50c4 <__fp_di2sf+0x2c>
    50d8:	12 16       	cp	r1, r18
    50da:	13 06       	cpc	r1, r19
    50dc:	14 06       	cpc	r1, r20
    50de:	44 0b       	sbc	r20, r20
    50e0:	88 23       	and	r24, r24
    50e2:	3a f0       	brmi	.+14     	; 0x50f2 <__fp_di2sf+0x5a>
    50e4:	9a 95       	dec	r25
    50e6:	44 0f       	add	r20, r20
    50e8:	55 1f       	adc	r21, r21
    50ea:	66 1f       	adc	r22, r22
    50ec:	77 1f       	adc	r23, r23
    50ee:	88 1f       	adc	r24, r24
    50f0:	ca f7       	brpl	.-14     	; 0x50e4 <__fp_di2sf+0x4c>
    50f2:	55 23       	and	r21, r21
    50f4:	4a f4       	brpl	.+18     	; 0x5108 <__fp_di2sf+0x70>
    50f6:	44 0f       	add	r20, r20
    50f8:	55 1f       	adc	r21, r21
    50fa:	11 f4       	brne	.+4      	; 0x5100 <__fp_di2sf+0x68>
    50fc:	60 ff       	sbrs	r22, 0
    50fe:	04 c0       	rjmp	.+8      	; 0x5108 <__fp_di2sf+0x70>
    5100:	6f 5f       	subi	r22, 0xFF	; 255
    5102:	7f 4f       	sbci	r23, 0xFF	; 255
    5104:	8f 4f       	sbci	r24, 0xFF	; 255
    5106:	9f 4f       	sbci	r25, 0xFF	; 255
    5108:	88 0f       	add	r24, r24
    510a:	96 95       	lsr	r25
    510c:	87 95       	ror	r24
    510e:	97 f9       	bld	r25, 7
    5110:	08 95       	ret

00005112 <fmax>:
    5112:	99 0f       	add	r25, r25
    5114:	bb 0b       	sbc	r27, r27
    5116:	55 0f       	add	r21, r21
    5118:	aa 0b       	sbc	r26, r26
    511a:	e0 e8       	ldi	r30, 0x80	; 128
    511c:	fe ef       	ldi	r31, 0xFE	; 254
    511e:	16 16       	cp	r1, r22
    5120:	17 06       	cpc	r1, r23
    5122:	e8 07       	cpc	r30, r24
    5124:	f9 07       	cpc	r31, r25
    5126:	70 f0       	brcs	.+28     	; 0x5144 <fmax+0x32>
    5128:	12 16       	cp	r1, r18
    512a:	13 06       	cpc	r1, r19
    512c:	e4 07       	cpc	r30, r20
    512e:	f5 07       	cpc	r31, r21
    5130:	60 f0       	brcs	.+24     	; 0x514a <fmax+0x38>
    5132:	ba 17       	cp	r27, r26
    5134:	3c f0       	brlt	.+14     	; 0x5144 <fmax+0x32>
    5136:	49 f4       	brne	.+18     	; 0x514a <fmax+0x38>
    5138:	62 17       	cp	r22, r18
    513a:	73 07       	cpc	r23, r19
    513c:	84 07       	cpc	r24, r20
    513e:	95 07       	cpc	r25, r21
    5140:	a7 95       	ror	r26
    5142:	1b f4       	brvc	.+6      	; 0x514a <fmax+0x38>
    5144:	b9 01       	movw	r22, r18
    5146:	ca 01       	movw	r24, r20
    5148:	ba 2f       	mov	r27, r26
    514a:	b6 95       	lsr	r27
    514c:	97 95       	ror	r25
    514e:	08 95       	ret

00005150 <fmin>:
    5150:	99 0f       	add	r25, r25
    5152:	bb 0b       	sbc	r27, r27
    5154:	55 0f       	add	r21, r21
    5156:	aa 0b       	sbc	r26, r26
    5158:	e0 e8       	ldi	r30, 0x80	; 128
    515a:	fe ef       	ldi	r31, 0xFE	; 254
    515c:	16 16       	cp	r1, r22
    515e:	17 06       	cpc	r1, r23
    5160:	e8 07       	cpc	r30, r24
    5162:	f9 07       	cpc	r31, r25
    5164:	70 f0       	brcs	.+28     	; 0x5182 <fmin+0x32>
    5166:	12 16       	cp	r1, r18
    5168:	13 06       	cpc	r1, r19
    516a:	e4 07       	cpc	r30, r20
    516c:	f5 07       	cpc	r31, r21
    516e:	60 f0       	brcs	.+24     	; 0x5188 <fmin+0x38>
    5170:	ba 17       	cp	r27, r26
    5172:	54 f0       	brlt	.+20     	; 0x5188 <fmin+0x38>
    5174:	31 f4       	brne	.+12     	; 0x5182 <fmin+0x32>
    5176:	26 17       	cp	r18, r22
    5178:	37 07       	cpc	r19, r23
    517a:	48 07       	cpc	r20, r24
    517c:	59 07       	cpc	r21, r25
    517e:	a7 95       	ror	r26
    5180:	1b f4       	brvc	.+6      	; 0x5188 <fmin+0x38>
    5182:	b9 01       	movw	r22, r18
    5184:	ca 01       	movw	r24, r20
    5186:	ba 2f       	mov	r27, r26
    5188:	b6 95       	lsr	r27
    518a:	97 95       	ror	r25
    518c:	08 95       	ret

0000518e <__fp_cmp>:
    518e:	99 0f       	add	r25, r25
    5190:	00 08       	sbc	r0, r0
    5192:	55 0f       	add	r21, r21
    5194:	aa 0b       	sbc	r26, r26
    5196:	e0 e8       	ldi	r30, 0x80	; 128
    5198:	fe ef       	ldi	r31, 0xFE	; 254
    519a:	16 16       	cp	r1, r22
    519c:	17 06       	cpc	r1, r23
    519e:	e8 07       	cpc	r30, r24
    51a0:	f9 07       	cpc	r31, r25
    51a2:	c0 f0       	brcs	.+48     	; 0x51d4 <__fp_cmp+0x46>
    51a4:	12 16       	cp	r1, r18
    51a6:	13 06       	cpc	r1, r19
    51a8:	e4 07       	cpc	r30, r20
    51aa:	f5 07       	cpc	r31, r21
    51ac:	98 f0       	brcs	.+38     	; 0x51d4 <__fp_cmp+0x46>
    51ae:	62 1b       	sub	r22, r18
    51b0:	73 0b       	sbc	r23, r19
    51b2:	84 0b       	sbc	r24, r20
    51b4:	95 0b       	sbc	r25, r21
    51b6:	39 f4       	brne	.+14     	; 0x51c6 <__fp_cmp+0x38>
    51b8:	0a 26       	eor	r0, r26
    51ba:	61 f0       	breq	.+24     	; 0x51d4 <__fp_cmp+0x46>
    51bc:	23 2b       	or	r18, r19
    51be:	24 2b       	or	r18, r20
    51c0:	25 2b       	or	r18, r21
    51c2:	21 f4       	brne	.+8      	; 0x51cc <__fp_cmp+0x3e>
    51c4:	08 95       	ret
    51c6:	0a 26       	eor	r0, r26
    51c8:	09 f4       	brne	.+2      	; 0x51cc <__fp_cmp+0x3e>
    51ca:	a1 40       	sbci	r26, 0x01	; 1
    51cc:	a6 95       	lsr	r26
    51ce:	8f ef       	ldi	r24, 0xFF	; 255
    51d0:	81 1d       	adc	r24, r1
    51d2:	81 1d       	adc	r24, r1
    51d4:	08 95       	ret

000051d6 <__fp_inf>:
    51d6:	97 f9       	bld	r25, 7
    51d8:	9f 67       	ori	r25, 0x7F	; 127
    51da:	80 e8       	ldi	r24, 0x80	; 128
    51dc:	70 e0       	ldi	r23, 0x00	; 0
    51de:	60 e0       	ldi	r22, 0x00	; 0
    51e0:	08 95       	ret

000051e2 <__fp_nan>:
    51e2:	9f ef       	ldi	r25, 0xFF	; 255
    51e4:	80 ec       	ldi	r24, 0xC0	; 192
    51e6:	08 95       	ret

000051e8 <__fp_negdi>:
    51e8:	90 95       	com	r25
    51ea:	80 95       	com	r24
    51ec:	70 95       	com	r23
    51ee:	60 95       	com	r22
    51f0:	50 95       	com	r21
    51f2:	40 95       	com	r20
    51f4:	30 95       	com	r19
    51f6:	21 95       	neg	r18
    51f8:	3f 4f       	sbci	r19, 0xFF	; 255
    51fa:	4f 4f       	sbci	r20, 0xFF	; 255
    51fc:	5f 4f       	sbci	r21, 0xFF	; 255
    51fe:	6f 4f       	sbci	r22, 0xFF	; 255
    5200:	7f 4f       	sbci	r23, 0xFF	; 255
    5202:	8f 4f       	sbci	r24, 0xFF	; 255
    5204:	9f 4f       	sbci	r25, 0xFF	; 255
    5206:	08 95       	ret

00005208 <__fp_pscA>:
    5208:	00 24       	eor	r0, r0
    520a:	0a 94       	dec	r0
    520c:	16 16       	cp	r1, r22
    520e:	17 06       	cpc	r1, r23
    5210:	18 06       	cpc	r1, r24
    5212:	09 06       	cpc	r0, r25
    5214:	08 95       	ret

00005216 <__fp_pscB>:
    5216:	00 24       	eor	r0, r0
    5218:	0a 94       	dec	r0
    521a:	12 16       	cp	r1, r18
    521c:	13 06       	cpc	r1, r19
    521e:	14 06       	cpc	r1, r20
    5220:	05 06       	cpc	r0, r21
    5222:	08 95       	ret
    5224:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__fp_nan>

00005228 <__fp_rempio2>:
    5228:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <__fp_splitA>
    522c:	d8 f3       	brcs	.-10     	; 0x5224 <__fp_pscB+0xe>
    522e:	e8 94       	clt
    5230:	e0 e0       	ldi	r30, 0x00	; 0
    5232:	bb 27       	eor	r27, r27
    5234:	9f 57       	subi	r25, 0x7F	; 127
    5236:	f0 f0       	brcs	.+60     	; 0x5274 <__fp_rempio2+0x4c>
    5238:	2a ed       	ldi	r18, 0xDA	; 218
    523a:	3f e0       	ldi	r19, 0x0F	; 15
    523c:	49 ec       	ldi	r20, 0xC9	; 201
    523e:	06 c0       	rjmp	.+12     	; 0x524c <__fp_rempio2+0x24>
    5240:	ee 0f       	add	r30, r30
    5242:	bb 0f       	add	r27, r27
    5244:	66 1f       	adc	r22, r22
    5246:	77 1f       	adc	r23, r23
    5248:	88 1f       	adc	r24, r24
    524a:	28 f0       	brcs	.+10     	; 0x5256 <__fp_rempio2+0x2e>
    524c:	b2 3a       	cpi	r27, 0xA2	; 162
    524e:	62 07       	cpc	r22, r18
    5250:	73 07       	cpc	r23, r19
    5252:	84 07       	cpc	r24, r20
    5254:	28 f0       	brcs	.+10     	; 0x5260 <__fp_rempio2+0x38>
    5256:	b2 5a       	subi	r27, 0xA2	; 162
    5258:	62 0b       	sbc	r22, r18
    525a:	73 0b       	sbc	r23, r19
    525c:	84 0b       	sbc	r24, r20
    525e:	e3 95       	inc	r30
    5260:	9a 95       	dec	r25
    5262:	72 f7       	brpl	.-36     	; 0x5240 <__fp_rempio2+0x18>
    5264:	80 38       	cpi	r24, 0x80	; 128
    5266:	30 f4       	brcc	.+12     	; 0x5274 <__fp_rempio2+0x4c>
    5268:	9a 95       	dec	r25
    526a:	bb 0f       	add	r27, r27
    526c:	66 1f       	adc	r22, r22
    526e:	77 1f       	adc	r23, r23
    5270:	88 1f       	adc	r24, r24
    5272:	d2 f7       	brpl	.-12     	; 0x5268 <__fp_rempio2+0x40>
    5274:	90 48       	sbci	r25, 0x80	; 128
    5276:	0c 94 ff 29 	jmp	0x53fe	; 0x53fe <__fp_mpack_finite>

0000527a <__fp_round>:
    527a:	09 2e       	mov	r0, r25
    527c:	03 94       	inc	r0
    527e:	00 0c       	add	r0, r0
    5280:	11 f4       	brne	.+4      	; 0x5286 <__fp_round+0xc>
    5282:	88 23       	and	r24, r24
    5284:	52 f0       	brmi	.+20     	; 0x529a <__fp_round+0x20>
    5286:	bb 0f       	add	r27, r27
    5288:	40 f4       	brcc	.+16     	; 0x529a <__fp_round+0x20>
    528a:	bf 2b       	or	r27, r31
    528c:	11 f4       	brne	.+4      	; 0x5292 <__fp_round+0x18>
    528e:	60 ff       	sbrs	r22, 0
    5290:	04 c0       	rjmp	.+8      	; 0x529a <__fp_round+0x20>
    5292:	6f 5f       	subi	r22, 0xFF	; 255
    5294:	7f 4f       	sbci	r23, 0xFF	; 255
    5296:	8f 4f       	sbci	r24, 0xFF	; 255
    5298:	9f 4f       	sbci	r25, 0xFF	; 255
    529a:	08 95       	ret

0000529c <__fp_sinus>:
    529c:	ef 93       	push	r30
    529e:	e0 ff       	sbrs	r30, 0
    52a0:	07 c0       	rjmp	.+14     	; 0x52b0 <__fp_sinus+0x14>
    52a2:	a2 ea       	ldi	r26, 0xA2	; 162
    52a4:	2a ed       	ldi	r18, 0xDA	; 218
    52a6:	3f e0       	ldi	r19, 0x0F	; 15
    52a8:	49 ec       	ldi	r20, 0xC9	; 201
    52aa:	5f eb       	ldi	r21, 0xBF	; 191
    52ac:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__addsf3x>
    52b0:	0e 94 3d 29 	call	0x527a	; 0x527a <__fp_round>
    52b4:	0f 90       	pop	r0
    52b6:	03 94       	inc	r0
    52b8:	01 fc       	sbrc	r0, 1
    52ba:	90 58       	subi	r25, 0x80	; 128
    52bc:	e8 e6       	ldi	r30, 0x68	; 104
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <__fp_powsodd>

000052c4 <__fp_split3>:
    52c4:	57 fd       	sbrc	r21, 7
    52c6:	90 58       	subi	r25, 0x80	; 128
    52c8:	44 0f       	add	r20, r20
    52ca:	55 1f       	adc	r21, r21
    52cc:	59 f0       	breq	.+22     	; 0x52e4 <__fp_splitA+0x10>
    52ce:	5f 3f       	cpi	r21, 0xFF	; 255
    52d0:	71 f0       	breq	.+28     	; 0x52ee <__fp_splitA+0x1a>
    52d2:	47 95       	ror	r20

000052d4 <__fp_splitA>:
    52d4:	88 0f       	add	r24, r24
    52d6:	97 fb       	bst	r25, 7
    52d8:	99 1f       	adc	r25, r25
    52da:	61 f0       	breq	.+24     	; 0x52f4 <__fp_splitA+0x20>
    52dc:	9f 3f       	cpi	r25, 0xFF	; 255
    52de:	79 f0       	breq	.+30     	; 0x52fe <__fp_splitA+0x2a>
    52e0:	87 95       	ror	r24
    52e2:	08 95       	ret
    52e4:	12 16       	cp	r1, r18
    52e6:	13 06       	cpc	r1, r19
    52e8:	14 06       	cpc	r1, r20
    52ea:	55 1f       	adc	r21, r21
    52ec:	f2 cf       	rjmp	.-28     	; 0x52d2 <__fp_split3+0xe>
    52ee:	46 95       	lsr	r20
    52f0:	f1 df       	rcall	.-30     	; 0x52d4 <__fp_splitA>
    52f2:	08 c0       	rjmp	.+16     	; 0x5304 <__fp_splitA+0x30>
    52f4:	16 16       	cp	r1, r22
    52f6:	17 06       	cpc	r1, r23
    52f8:	18 06       	cpc	r1, r24
    52fa:	99 1f       	adc	r25, r25
    52fc:	f1 cf       	rjmp	.-30     	; 0x52e0 <__fp_splitA+0xc>
    52fe:	86 95       	lsr	r24
    5300:	71 05       	cpc	r23, r1
    5302:	61 05       	cpc	r22, r1
    5304:	08 94       	sec
    5306:	08 95       	ret

00005308 <__fp_zero>:
    5308:	e8 94       	clt

0000530a <__fp_szero>:
    530a:	bb 27       	eor	r27, r27
    530c:	66 27       	eor	r22, r22
    530e:	77 27       	eor	r23, r23
    5310:	cb 01       	movw	r24, r22
    5312:	97 f9       	bld	r25, 7
    5314:	08 95       	ret

00005316 <__gesf2>:
    5316:	0e 94 c7 28 	call	0x518e	; 0x518e <__fp_cmp>
    531a:	08 f4       	brcc	.+2      	; 0x531e <__gesf2+0x8>
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	08 95       	ret

00005320 <__mulsf3>:
    5320:	0e 94 a3 29 	call	0x5346	; 0x5346 <__mulsf3x>
    5324:	0c 94 3d 29 	jmp	0x527a	; 0x527a <__fp_round>
    5328:	0e 94 04 29 	call	0x5208	; 0x5208 <__fp_pscA>
    532c:	38 f0       	brcs	.+14     	; 0x533c <__mulsf3+0x1c>
    532e:	0e 94 0b 29 	call	0x5216	; 0x5216 <__fp_pscB>
    5332:	20 f0       	brcs	.+8      	; 0x533c <__mulsf3+0x1c>
    5334:	95 23       	and	r25, r21
    5336:	11 f0       	breq	.+4      	; 0x533c <__mulsf3+0x1c>
    5338:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__fp_inf>
    533c:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__fp_nan>
    5340:	11 24       	eor	r1, r1
    5342:	0c 94 85 29 	jmp	0x530a	; 0x530a <__fp_szero>

00005346 <__mulsf3x>:
    5346:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__fp_split3>
    534a:	70 f3       	brcs	.-36     	; 0x5328 <__mulsf3+0x8>

0000534c <__mulsf3_pse>:
    534c:	95 9f       	mul	r25, r21
    534e:	c1 f3       	breq	.-16     	; 0x5340 <__mulsf3+0x20>
    5350:	95 0f       	add	r25, r21
    5352:	50 e0       	ldi	r21, 0x00	; 0
    5354:	55 1f       	adc	r21, r21
    5356:	62 9f       	mul	r22, r18
    5358:	f0 01       	movw	r30, r0
    535a:	72 9f       	mul	r23, r18
    535c:	bb 27       	eor	r27, r27
    535e:	f0 0d       	add	r31, r0
    5360:	b1 1d       	adc	r27, r1
    5362:	63 9f       	mul	r22, r19
    5364:	aa 27       	eor	r26, r26
    5366:	f0 0d       	add	r31, r0
    5368:	b1 1d       	adc	r27, r1
    536a:	aa 1f       	adc	r26, r26
    536c:	64 9f       	mul	r22, r20
    536e:	66 27       	eor	r22, r22
    5370:	b0 0d       	add	r27, r0
    5372:	a1 1d       	adc	r26, r1
    5374:	66 1f       	adc	r22, r22
    5376:	82 9f       	mul	r24, r18
    5378:	22 27       	eor	r18, r18
    537a:	b0 0d       	add	r27, r0
    537c:	a1 1d       	adc	r26, r1
    537e:	62 1f       	adc	r22, r18
    5380:	73 9f       	mul	r23, r19
    5382:	b0 0d       	add	r27, r0
    5384:	a1 1d       	adc	r26, r1
    5386:	62 1f       	adc	r22, r18
    5388:	83 9f       	mul	r24, r19
    538a:	a0 0d       	add	r26, r0
    538c:	61 1d       	adc	r22, r1
    538e:	22 1f       	adc	r18, r18
    5390:	74 9f       	mul	r23, r20
    5392:	33 27       	eor	r19, r19
    5394:	a0 0d       	add	r26, r0
    5396:	61 1d       	adc	r22, r1
    5398:	23 1f       	adc	r18, r19
    539a:	84 9f       	mul	r24, r20
    539c:	60 0d       	add	r22, r0
    539e:	21 1d       	adc	r18, r1
    53a0:	82 2f       	mov	r24, r18
    53a2:	76 2f       	mov	r23, r22
    53a4:	6a 2f       	mov	r22, r26
    53a6:	11 24       	eor	r1, r1
    53a8:	9f 57       	subi	r25, 0x7F	; 127
    53aa:	50 40       	sbci	r21, 0x00	; 0
    53ac:	9a f0       	brmi	.+38     	; 0x53d4 <__mulsf3_pse+0x88>
    53ae:	f1 f0       	breq	.+60     	; 0x53ec <__mulsf3_pse+0xa0>
    53b0:	88 23       	and	r24, r24
    53b2:	4a f0       	brmi	.+18     	; 0x53c6 <__mulsf3_pse+0x7a>
    53b4:	ee 0f       	add	r30, r30
    53b6:	ff 1f       	adc	r31, r31
    53b8:	bb 1f       	adc	r27, r27
    53ba:	66 1f       	adc	r22, r22
    53bc:	77 1f       	adc	r23, r23
    53be:	88 1f       	adc	r24, r24
    53c0:	91 50       	subi	r25, 0x01	; 1
    53c2:	50 40       	sbci	r21, 0x00	; 0
    53c4:	a9 f7       	brne	.-22     	; 0x53b0 <__mulsf3_pse+0x64>
    53c6:	9e 3f       	cpi	r25, 0xFE	; 254
    53c8:	51 05       	cpc	r21, r1
    53ca:	80 f0       	brcs	.+32     	; 0x53ec <__mulsf3_pse+0xa0>
    53cc:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__fp_inf>
    53d0:	0c 94 85 29 	jmp	0x530a	; 0x530a <__fp_szero>
    53d4:	5f 3f       	cpi	r21, 0xFF	; 255
    53d6:	e4 f3       	brlt	.-8      	; 0x53d0 <__mulsf3_pse+0x84>
    53d8:	98 3e       	cpi	r25, 0xE8	; 232
    53da:	d4 f3       	brlt	.-12     	; 0x53d0 <__mulsf3_pse+0x84>
    53dc:	86 95       	lsr	r24
    53de:	77 95       	ror	r23
    53e0:	67 95       	ror	r22
    53e2:	b7 95       	ror	r27
    53e4:	f7 95       	ror	r31
    53e6:	e7 95       	ror	r30
    53e8:	9f 5f       	subi	r25, 0xFF	; 255
    53ea:	c1 f7       	brne	.-16     	; 0x53dc <__mulsf3_pse+0x90>
    53ec:	fe 2b       	or	r31, r30
    53ee:	88 0f       	add	r24, r24
    53f0:	91 1d       	adc	r25, r1
    53f2:	96 95       	lsr	r25
    53f4:	87 95       	ror	r24
    53f6:	97 f9       	bld	r25, 7
    53f8:	08 95       	ret

000053fa <__fp_mpack>:
    53fa:	9f 3f       	cpi	r25, 0xFF	; 255
    53fc:	31 f0       	breq	.+12     	; 0x540a <__fp_mpack_finite+0xc>

000053fe <__fp_mpack_finite>:
    53fe:	91 50       	subi	r25, 0x01	; 1
    5400:	20 f4       	brcc	.+8      	; 0x540a <__fp_mpack_finite+0xc>
    5402:	87 95       	ror	r24
    5404:	77 95       	ror	r23
    5406:	67 95       	ror	r22
    5408:	b7 95       	ror	r27
    540a:	88 0f       	add	r24, r24
    540c:	91 1d       	adc	r25, r1
    540e:	96 95       	lsr	r25
    5410:	87 95       	ror	r24
    5412:	97 f9       	bld	r25, 7
    5414:	08 95       	ret

00005416 <__fp_powser>:
    5416:	df 93       	push	r29
    5418:	cf 93       	push	r28
    541a:	1f 93       	push	r17
    541c:	0f 93       	push	r16
    541e:	ff 92       	push	r15
    5420:	ef 92       	push	r14
    5422:	df 92       	push	r13
    5424:	7b 01       	movw	r14, r22
    5426:	8c 01       	movw	r16, r24
    5428:	68 94       	set
    542a:	06 c0       	rjmp	.+12     	; 0x5438 <__fp_powser+0x22>
    542c:	da 2e       	mov	r13, r26
    542e:	ef 01       	movw	r28, r30
    5430:	0e 94 a3 29 	call	0x5346	; 0x5346 <__mulsf3x>
    5434:	fe 01       	movw	r30, r28
    5436:	e8 94       	clt
    5438:	a5 91       	lpm	r26, Z+
    543a:	25 91       	lpm	r18, Z+
    543c:	35 91       	lpm	r19, Z+
    543e:	45 91       	lpm	r20, Z+
    5440:	55 91       	lpm	r21, Z+
    5442:	a6 f3       	brts	.-24     	; 0x542c <__fp_powser+0x16>
    5444:	ef 01       	movw	r28, r30
    5446:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__addsf3x>
    544a:	fe 01       	movw	r30, r28
    544c:	97 01       	movw	r18, r14
    544e:	a8 01       	movw	r20, r16
    5450:	da 94       	dec	r13
    5452:	69 f7       	brne	.-38     	; 0x542e <__fp_powser+0x18>
    5454:	df 90       	pop	r13
    5456:	ef 90       	pop	r14
    5458:	ff 90       	pop	r15
    545a:	0f 91       	pop	r16
    545c:	1f 91       	pop	r17
    545e:	cf 91       	pop	r28
    5460:	df 91       	pop	r29
    5462:	08 95       	ret

00005464 <__fp_powsodd>:
    5464:	9f 93       	push	r25
    5466:	8f 93       	push	r24
    5468:	7f 93       	push	r23
    546a:	6f 93       	push	r22
    546c:	ff 93       	push	r31
    546e:	ef 93       	push	r30
    5470:	9b 01       	movw	r18, r22
    5472:	ac 01       	movw	r20, r24
    5474:	0e 94 90 29 	call	0x5320	; 0x5320 <__mulsf3>
    5478:	ef 91       	pop	r30
    547a:	ff 91       	pop	r31
    547c:	0e 94 0b 2a 	call	0x5416	; 0x5416 <__fp_powser>
    5480:	2f 91       	pop	r18
    5482:	3f 91       	pop	r19
    5484:	4f 91       	pop	r20
    5486:	5f 91       	pop	r21
    5488:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__mulsf3>

0000548c <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
	return morph_config_adc_get_adc_pin(p, res);
	#else
	return morph_get_adc_pin_function(p, res);
	#endif
}
    548c:	cf 93       	push	r28
    548e:	df 93       	push	r29
    5490:	cd b7       	in	r28, 0x3d	; 61
    5492:	de b7       	in	r29, 0x3e	; 62
    5494:	00 00       	nop
    5496:	df 91       	pop	r29
    5498:	cf 91       	pop	r28
    549a:	08 95       	ret

0000549c <MorphADC_register_get_adc_value_function>:
    549c:	cf 93       	push	r28
    549e:	df 93       	push	r29
    54a0:	00 d0       	rcall	.+0      	; 0x54a2 <MorphADC_register_get_adc_value_function+0x6>
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	9a 83       	std	Y+2, r25	; 0x02
    54a8:	89 83       	std	Y+1, r24	; 0x01
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	9a 81       	ldd	r25, Y+2	; 0x02
    54ae:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <morph_get_adc_value_function+0x1>
    54b2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <morph_get_adc_value_function>
    54b6:	00 00       	nop
    54b8:	bc 01       	movw	r22, r24
    54ba:	cd 01       	movw	r24, r26
    54bc:	0f 90       	pop	r0
    54be:	0f 90       	pop	r0
    54c0:	df 91       	pop	r29
    54c2:	cf 91       	pop	r28
    54c4:	08 95       	ret

000054c6 <MorphADC_register_get_adc_pin_function>:
    54c6:	cf 93       	push	r28
    54c8:	df 93       	push	r29
    54ca:	00 d0       	rcall	.+0      	; 0x54cc <MorphADC_register_get_adc_pin_function+0x6>
    54cc:	cd b7       	in	r28, 0x3d	; 61
    54ce:	de b7       	in	r29, 0x3e	; 62
    54d0:	9a 83       	std	Y+2, r25	; 0x02
    54d2:	89 83       	std	Y+1, r24	; 0x01
    54d4:	89 81       	ldd	r24, Y+1	; 0x01
    54d6:	9a 81       	ldd	r25, Y+2	; 0x02
    54d8:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <morph_get_adc_pin_function+0x1>
    54dc:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <morph_get_adc_pin_function>
    54e0:	00 00       	nop
    54e2:	bc 01       	movw	r22, r24
    54e4:	cd 01       	movw	r24, r26
    54e6:	0f 90       	pop	r0
    54e8:	0f 90       	pop	r0
    54ea:	df 91       	pop	r29
    54ec:	cf 91       	pop	r28
    54ee:	08 95       	ret

000054f0 <MorphADC_register_init_adc_function>:
    54f0:	cf 93       	push	r28
    54f2:	df 93       	push	r29
    54f4:	00 d0       	rcall	.+0      	; 0x54f6 <MorphADC_register_init_adc_function+0x6>
    54f6:	cd b7       	in	r28, 0x3d	; 61
    54f8:	de b7       	in	r29, 0x3e	; 62
    54fa:	9a 83       	std	Y+2, r25	; 0x02
    54fc:	89 83       	std	Y+1, r24	; 0x01
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	9a 81       	ldd	r25, Y+2	; 0x02
    5502:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <morph_init_adc_function+0x1>
    5506:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <morph_init_adc_function>
    550a:	00 00       	nop
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	08 95       	ret

00005516 <MorphADC_register_read_function>:
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	00 d0       	rcall	.+0      	; 0x551c <MorphADC_register_read_function+0x6>
    551c:	cd b7       	in	r28, 0x3d	; 61
    551e:	de b7       	in	r29, 0x3e	; 62
    5520:	9a 83       	std	Y+2, r25	; 0x02
    5522:	89 83       	std	Y+1, r24	; 0x01
    5524:	89 81       	ldd	r24, Y+1	; 0x01
    5526:	9a 81       	ldd	r25, Y+2	; 0x02
    5528:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <morph_read_function+0x1>
    552c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <morph_read_function>
    5530:	00 00       	nop
    5532:	0f 90       	pop	r0
    5534:	0f 90       	pop	r0
    5536:	df 91       	pop	r29
    5538:	cf 91       	pop	r28
    553a:	08 95       	ret

0000553c <MorphADC_register_set_resolution_function>:
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	00 d0       	rcall	.+0      	; 0x5542 <MorphADC_register_set_resolution_function+0x6>
    5542:	cd b7       	in	r28, 0x3d	; 61
    5544:	de b7       	in	r29, 0x3e	; 62
    5546:	9a 83       	std	Y+2, r25	; 0x02
    5548:	89 83       	std	Y+1, r24	; 0x01
    554a:	89 81       	ldd	r24, Y+1	; 0x01
    554c:	9a 81       	ldd	r25, Y+2	; 0x02
    554e:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <morph_set_resolution_function+0x1>
    5552:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <morph_set_resolution_function>
    5556:	00 00       	nop
    5558:	0f 90       	pop	r0
    555a:	0f 90       	pop	r0
    555c:	df 91       	pop	r29
    555e:	cf 91       	pop	r28
    5560:	08 95       	ret

00005562 <MorphADC_register_set_reference_function>:
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	00 d0       	rcall	.+0      	; 0x5568 <MorphADC_register_set_reference_function+0x6>
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
    556c:	9a 83       	std	Y+2, r25	; 0x02
    556e:	89 83       	std	Y+1, r24	; 0x01
    5570:	89 81       	ldd	r24, Y+1	; 0x01
    5572:	9a 81       	ldd	r25, Y+2	; 0x02
    5574:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <morph_set_reference_function+0x1>
    5578:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <morph_set_reference_function>
    557c:	00 00       	nop
    557e:	0f 90       	pop	r0
    5580:	0f 90       	pop	r0
    5582:	df 91       	pop	r29
    5584:	cf 91       	pop	r28
    5586:	08 95       	ret

00005588 <MorphADC_register_set_prescaler_function>:
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	00 d0       	rcall	.+0      	; 0x558e <MorphADC_register_set_prescaler_function+0x6>
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
    5592:	9a 83       	std	Y+2, r25	; 0x02
    5594:	89 83       	std	Y+1, r24	; 0x01
    5596:	89 81       	ldd	r24, Y+1	; 0x01
    5598:	9a 81       	ldd	r25, Y+2	; 0x02
    559a:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <morph_set_prescaler_function+0x1>
    559e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <morph_set_prescaler_function>
    55a2:	00 00       	nop
    55a4:	0f 90       	pop	r0
    55a6:	0f 90       	pop	r0
    55a8:	df 91       	pop	r29
    55aa:	cf 91       	pop	r28
    55ac:	08 95       	ret

000055ae <MorphADC_register_get_maximum_value>:
    55ae:	cf 93       	push	r28
    55b0:	df 93       	push	r29
    55b2:	00 d0       	rcall	.+0      	; 0x55b4 <MorphADC_register_get_maximum_value+0x6>
    55b4:	cd b7       	in	r28, 0x3d	; 61
    55b6:	de b7       	in	r29, 0x3e	; 62
    55b8:	9a 83       	std	Y+2, r25	; 0x02
    55ba:	89 83       	std	Y+1, r24	; 0x01
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	9a 81       	ldd	r25, Y+2	; 0x02
    55c0:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <morph_get_maximum_value_function+0x1>
    55c4:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <morph_get_maximum_value_function>
    55c8:	00 00       	nop
    55ca:	0f 90       	pop	r0
    55cc:	0f 90       	pop	r0
    55ce:	df 91       	pop	r29
    55d0:	cf 91       	pop	r28
    55d2:	08 95       	ret

000055d4 <MorphADC_init_adc>:

// This does all the up-front work to get an ADC to function.
void MorphADC_init_adc(MorphPinNumber p)
{
    55d4:	cf 93       	push	r28
    55d6:	df 93       	push	r29
    55d8:	1f 92       	push	r1
    55da:	cd b7       	in	r28, 0x3d	; 61
    55dc:	de b7       	in	r29, 0x3e	; 62
    55de:	89 83       	std	Y+1, r24	; 0x01
	#ifdef MORPH_IMPLICIT
		morph_config_adc_init_adc(p);
	#else
		morph_init_adc_function(p);
    55e0:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <morph_init_adc_function>
    55e4:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <morph_init_adc_function+0x1>
    55e8:	89 81       	ldd	r24, Y+1	; 0x01
    55ea:	f9 01       	movw	r30, r18
    55ec:	09 95       	icall
	#endif
}
    55ee:	00 00       	nop
    55f0:	0f 90       	pop	r0
    55f2:	df 91       	pop	r29
    55f4:	cf 91       	pop	r28
    55f6:	08 95       	ret

000055f8 <MorphADC_read>:

// This function attempts to read from the ADC and return a value.
MorphADCValue MorphADC_read(MorphPinNumber p)
{
    55f8:	cf 93       	push	r28
    55fa:	df 93       	push	r29
    55fc:	1f 92       	push	r1
    55fe:	cd b7       	in	r28, 0x3d	; 61
    5600:	de b7       	in	r29, 0x3e	; 62
    5602:	89 83       	std	Y+1, r24	; 0x01
	#ifdef MORPH_IMPLICIT
	return morph_config_adc_read(p);
	#else
	return morph_read_function(p);
    5604:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <morph_read_function>
    5608:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <morph_read_function+0x1>
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	f9 01       	movw	r30, r18
    5610:	09 95       	icall
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
	#endif	
}
    5616:	bc 01       	movw	r22, r24
    5618:	cd 01       	movw	r24, r26
    561a:	0f 90       	pop	r0
    561c:	df 91       	pop	r29
    561e:	cf 91       	pop	r28
    5620:	08 95       	ret

00005622 <MorphADC_set_resolution>:

// Attempts to set the resolution of the ADC.
// Returns the actual ADC resolution.
int8_t MorphADC_set_resolution(MorphPinNumber p, MorphADCResolution res)
{
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	00 d0       	rcall	.+0      	; 0x5628 <MorphADC_set_resolution+0x6>
    5628:	cd b7       	in	r28, 0x3d	; 61
    562a:	de b7       	in	r29, 0x3e	; 62
    562c:	89 83       	std	Y+1, r24	; 0x01
    562e:	6a 83       	std	Y+2, r22	; 0x02
	#ifdef MORPH_IMPLICIT
	return morph_config_adc_set_resolution(p, res);
	#else
	return morph_set_resolution_function(p, res);
    5630:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <morph_set_resolution_function>
    5634:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <morph_set_resolution_function+0x1>
    5638:	6a 81       	ldd	r22, Y+2	; 0x02
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	f9 01       	movw	r30, r18
    563e:	09 95       	icall
	#endif	
}
    5640:	0f 90       	pop	r0
    5642:	0f 90       	pop	r0
    5644:	df 91       	pop	r29
    5646:	cf 91       	pop	r28
    5648:	08 95       	ret

0000564a <MorphADC_set_reference>:

// This function sets the reference of a given ADC input.
// The reference may be set to Internal or External, then a number that identifies which external or internal ref.
// Since external and internal reference options change wildly between processors, take a look at the datasheet for this one.
void MorphADC_set_reference(MorphPinNumber p, enum MorphADCReference ref, uint8_t ref_num)
{
    564a:	cf 93       	push	r28
    564c:	df 93       	push	r29
    564e:	00 d0       	rcall	.+0      	; 0x5650 <MorphADC_set_reference+0x6>
    5650:	1f 92       	push	r1
    5652:	cd b7       	in	r28, 0x3d	; 61
    5654:	de b7       	in	r29, 0x3e	; 62
    5656:	89 83       	std	Y+1, r24	; 0x01
    5658:	6a 83       	std	Y+2, r22	; 0x02
    565a:	4b 83       	std	Y+3, r20	; 0x03
	#ifdef MORPH_IMPLICIT
		morph_config_adc_set_reference(p, ref, ref_num);
	#else
		morph_set_reference_function(p, ref, ref_num);
    565c:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <morph_set_reference_function>
    5660:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <morph_set_reference_function+0x1>
    5664:	4b 81       	ldd	r20, Y+3	; 0x03
    5666:	6a 81       	ldd	r22, Y+2	; 0x02
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	f9 01       	movw	r30, r18
    566c:	09 95       	icall
	#endif	
}
    566e:	00 00       	nop
    5670:	0f 90       	pop	r0
    5672:	0f 90       	pop	r0
    5674:	0f 90       	pop	r0
    5676:	df 91       	pop	r29
    5678:	cf 91       	pop	r28
    567a:	08 95       	ret

0000567c <MorphADC_set_prescaler>:

// This function sets the prescaler for the given ADC input.
// You need to be aware of the clock speed of your system for this to make any sense.
void MorphADC_set_prescaler(MorphPinNumber p, uint16_t prescaler)
{
    567c:	cf 93       	push	r28
    567e:	df 93       	push	r29
    5680:	00 d0       	rcall	.+0      	; 0x5682 <MorphADC_set_prescaler+0x6>
    5682:	1f 92       	push	r1
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
    5688:	89 83       	std	Y+1, r24	; 0x01
    568a:	7b 83       	std	Y+3, r23	; 0x03
    568c:	6a 83       	std	Y+2, r22	; 0x02
	#ifdef MORPH_IMPLICIT
		morph_config_adc_set_prescaler(p, prescaler);
	#else
		morph_set_prescaler_function(p, prescaler);
    568e:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <morph_set_prescaler_function>
    5692:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <morph_set_prescaler_function+0x1>
    5696:	8a 81       	ldd	r24, Y+2	; 0x02
    5698:	9b 81       	ldd	r25, Y+3	; 0x03
    569a:	bc 01       	movw	r22, r24
    569c:	89 81       	ldd	r24, Y+1	; 0x01
    569e:	f9 01       	movw	r30, r18
    56a0:	09 95       	icall
	#endif	
}
    56a2:	00 00       	nop
    56a4:	0f 90       	pop	r0
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	08 95       	ret

000056b0 <MorphADC_get_maximum_value>:

// This function will get the maximum value an ADC channel may return.
MorphADCValue MorphADC_get_maximum_value(MorphPinNumber p)
{
    56b0:	cf 93       	push	r28
    56b2:	df 93       	push	r29
    56b4:	00 d0       	rcall	.+0      	; 0x56b6 <MorphADC_get_maximum_value+0x6>
    56b6:	00 d0       	rcall	.+0      	; 0x56b8 <MorphADC_get_maximum_value+0x8>
    56b8:	1f 92       	push	r1
    56ba:	cd b7       	in	r28, 0x3d	; 61
    56bc:	de b7       	in	r29, 0x3e	; 62
    56be:	8d 83       	std	Y+5, r24	; 0x05
	MorphADCValue return_value;
	
	#ifdef MORPH_IMPLICIT
	return_value = morph_config_adc_get_maximum_value(p);
	#else
	return_value = morph_get_maximum_value_function(p);
    56c0:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <morph_get_maximum_value_function>
    56c4:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <morph_get_maximum_value_function+0x1>
    56c8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ca:	f9 01       	movw	r30, r18
    56cc:	09 95       	icall
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	89 83       	std	Y+1, r24	; 0x01
    56d4:	9a 83       	std	Y+2, r25	; 0x02
    56d6:	ab 83       	std	Y+3, r26	; 0x03
    56d8:	bc 83       	std	Y+4, r27	; 0x04
	#endif	
	
	return return_value;
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	9a 81       	ldd	r25, Y+2	; 0x02
    56de:	ab 81       	ldd	r26, Y+3	; 0x03
    56e0:	bc 81       	ldd	r27, Y+4	; 0x04
	
    56e2:	bc 01       	movw	r22, r24
    56e4:	cd 01       	movw	r24, r26
    56e6:	0f 90       	pop	r0
    56e8:	0f 90       	pop	r0
    56ea:	0f 90       	pop	r0
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	08 95       	ret

000056f6 <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
		return morph_config_gpio_get_pin_direction(pn);
	#else
		return morph_get_pin_direction_function(pn);
	#endif
}
    56f6:	cf 93       	push	r28
    56f8:	df 93       	push	r29
    56fa:	cd b7       	in	r28, 0x3d	; 61
    56fc:	de b7       	in	r29, 0x3e	; 62
    56fe:	00 00       	nop
    5700:	df 91       	pop	r29
    5702:	cf 91       	pop	r28
    5704:	08 95       	ret

00005706 <MorphGPIO_register_set_pin_value_function>:
    5706:	cf 93       	push	r28
    5708:	df 93       	push	r29
    570a:	00 d0       	rcall	.+0      	; 0x570c <MorphGPIO_register_set_pin_value_function+0x6>
    570c:	cd b7       	in	r28, 0x3d	; 61
    570e:	de b7       	in	r29, 0x3e	; 62
    5710:	9a 83       	std	Y+2, r25	; 0x02
    5712:	89 83       	std	Y+1, r24	; 0x01
    5714:	89 81       	ldd	r24, Y+1	; 0x01
    5716:	9a 81       	ldd	r25, Y+2	; 0x02
    5718:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <morph_set_pin_value_function+0x1>
    571c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <morph_set_pin_value_function>
    5720:	00 00       	nop
    5722:	0f 90       	pop	r0
    5724:	0f 90       	pop	r0
    5726:	df 91       	pop	r29
    5728:	cf 91       	pop	r28
    572a:	08 95       	ret

0000572c <MorphGPIO_register_get_pin_value_function>:
    572c:	cf 93       	push	r28
    572e:	df 93       	push	r29
    5730:	00 d0       	rcall	.+0      	; 0x5732 <MorphGPIO_register_get_pin_value_function+0x6>
    5732:	cd b7       	in	r28, 0x3d	; 61
    5734:	de b7       	in	r29, 0x3e	; 62
    5736:	9a 83       	std	Y+2, r25	; 0x02
    5738:	89 83       	std	Y+1, r24	; 0x01
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	9a 81       	ldd	r25, Y+2	; 0x02
    573e:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <morph_get_pin_value_function+0x1>
    5742:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <morph_get_pin_value_function>
    5746:	00 00       	nop
    5748:	0f 90       	pop	r0
    574a:	0f 90       	pop	r0
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	08 95       	ret

00005752 <MorphGPIO_register_set_pin_direction_function>:
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	00 d0       	rcall	.+0      	; 0x5758 <MorphGPIO_register_set_pin_direction_function+0x6>
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
    575c:	9a 83       	std	Y+2, r25	; 0x02
    575e:	89 83       	std	Y+1, r24	; 0x01
    5760:	89 81       	ldd	r24, Y+1	; 0x01
    5762:	9a 81       	ldd	r25, Y+2	; 0x02
    5764:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <morph_set_pin_direction_function+0x1>
    5768:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <morph_set_pin_direction_function>
    576c:	00 00       	nop
    576e:	0f 90       	pop	r0
    5770:	0f 90       	pop	r0
    5772:	df 91       	pop	r29
    5774:	cf 91       	pop	r28
    5776:	08 95       	ret

00005778 <MorphGPIO_register_get_pin_direction_function>:
    5778:	cf 93       	push	r28
    577a:	df 93       	push	r29
    577c:	00 d0       	rcall	.+0      	; 0x577e <MorphGPIO_register_get_pin_direction_function+0x6>
    577e:	cd b7       	in	r28, 0x3d	; 61
    5780:	de b7       	in	r29, 0x3e	; 62
    5782:	9a 83       	std	Y+2, r25	; 0x02
    5784:	89 83       	std	Y+1, r24	; 0x01
    5786:	89 81       	ldd	r24, Y+1	; 0x01
    5788:	9a 81       	ldd	r25, Y+2	; 0x02
    578a:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <morph_get_pin_direction_function+0x1>
    578e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <morph_get_pin_direction_function>
    5792:	00 00       	nop
    5794:	0f 90       	pop	r0
    5796:	0f 90       	pop	r0
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	08 95       	ret

0000579e <MorphGPIO_register_set_pin_pull_state_function>:
    579e:	cf 93       	push	r28
    57a0:	df 93       	push	r29
    57a2:	00 d0       	rcall	.+0      	; 0x57a4 <MorphGPIO_register_set_pin_pull_state_function+0x6>
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
    57a8:	9a 83       	std	Y+2, r25	; 0x02
    57aa:	89 83       	std	Y+1, r24	; 0x01
    57ac:	89 81       	ldd	r24, Y+1	; 0x01
    57ae:	9a 81       	ldd	r25, Y+2	; 0x02
    57b0:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <morph_set_pin_pull_state_function+0x1>
    57b4:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <morph_set_pin_pull_state_function>
    57b8:	00 00       	nop
    57ba:	0f 90       	pop	r0
    57bc:	0f 90       	pop	r0
    57be:	df 91       	pop	r29
    57c0:	cf 91       	pop	r28
    57c2:	08 95       	ret

000057c4 <MorphGPIO_register_get_pin_pull_state_function>:
    57c4:	cf 93       	push	r28
    57c6:	df 93       	push	r29
    57c8:	00 d0       	rcall	.+0      	; 0x57ca <MorphGPIO_register_get_pin_pull_state_function+0x6>
    57ca:	cd b7       	in	r28, 0x3d	; 61
    57cc:	de b7       	in	r29, 0x3e	; 62
    57ce:	9a 83       	std	Y+2, r25	; 0x02
    57d0:	89 83       	std	Y+1, r24	; 0x01
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	9a 81       	ldd	r25, Y+2	; 0x02
    57d6:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <morph_get_pin_pull_state_function+0x1>
    57da:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <morph_get_pin_pull_state_function>
    57de:	00 00       	nop
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	df 91       	pop	r29
    57e6:	cf 91       	pop	r28
    57e8:	08 95       	ret

000057ea <MorphGPIO_set_pin_value>:
    57ea:	cf 93       	push	r28
    57ec:	df 93       	push	r29
    57ee:	00 d0       	rcall	.+0      	; 0x57f0 <MorphGPIO_set_pin_value+0x6>
    57f0:	cd b7       	in	r28, 0x3d	; 61
    57f2:	de b7       	in	r29, 0x3e	; 62
    57f4:	89 83       	std	Y+1, r24	; 0x01
    57f6:	6a 83       	std	Y+2, r22	; 0x02
    57f8:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <morph_set_pin_value_function>
    57fc:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <morph_set_pin_value_function+0x1>
    5800:	6a 81       	ldd	r22, Y+2	; 0x02
    5802:	89 81       	ldd	r24, Y+1	; 0x01
    5804:	f9 01       	movw	r30, r18
    5806:	09 95       	icall
    5808:	00 00       	nop
    580a:	0f 90       	pop	r0
    580c:	0f 90       	pop	r0
    580e:	df 91       	pop	r29
    5810:	cf 91       	pop	r28
    5812:	08 95       	ret

00005814 <MorphGPIO_get_pin_value>:
    5814:	cf 93       	push	r28
    5816:	df 93       	push	r29
    5818:	1f 92       	push	r1
    581a:	cd b7       	in	r28, 0x3d	; 61
    581c:	de b7       	in	r29, 0x3e	; 62
    581e:	89 83       	std	Y+1, r24	; 0x01
    5820:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <morph_get_pin_value_function>
    5824:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <morph_get_pin_value_function+0x1>
    5828:	89 81       	ldd	r24, Y+1	; 0x01
    582a:	f9 01       	movw	r30, r18
    582c:	09 95       	icall
    582e:	0f 90       	pop	r0
    5830:	df 91       	pop	r29
    5832:	cf 91       	pop	r28
    5834:	08 95       	ret

00005836 <MorphGPIO_set_pin_direction>:
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	00 d0       	rcall	.+0      	; 0x583c <MorphGPIO_set_pin_direction+0x6>
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
    5840:	89 83       	std	Y+1, r24	; 0x01
    5842:	6a 83       	std	Y+2, r22	; 0x02
    5844:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <morph_set_pin_direction_function>
    5848:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <morph_set_pin_direction_function+0x1>
    584c:	6a 81       	ldd	r22, Y+2	; 0x02
    584e:	89 81       	ldd	r24, Y+1	; 0x01
    5850:	f9 01       	movw	r30, r18
    5852:	09 95       	icall
    5854:	00 00       	nop
    5856:	0f 90       	pop	r0
    5858:	0f 90       	pop	r0
    585a:	df 91       	pop	r29
    585c:	cf 91       	pop	r28
    585e:	08 95       	ret

00005860 <MorphGPIO_set_pin_pull_state>:

void MorphGPIO_set_pin_pull_state(MorphPinNumber pn, enum MorphPinPullState ps)
{
    5860:	cf 93       	push	r28
    5862:	df 93       	push	r29
    5864:	00 d0       	rcall	.+0      	; 0x5866 <MorphGPIO_set_pin_pull_state+0x6>
    5866:	cd b7       	in	r28, 0x3d	; 61
    5868:	de b7       	in	r29, 0x3e	; 62
    586a:	89 83       	std	Y+1, r24	; 0x01
    586c:	6a 83       	std	Y+2, r22	; 0x02
	#ifdef MORPH_IMPLICIT
		morph_config_gpio_set_pin_pull_state(pn, ps);
	#else
		morph_set_pin_pull_state_function(pn, ps);
    586e:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <morph_set_pin_pull_state_function>
    5872:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <morph_set_pin_pull_state_function+0x1>
    5876:	6a 81       	ldd	r22, Y+2	; 0x02
    5878:	89 81       	ldd	r24, Y+1	; 0x01
    587a:	f9 01       	movw	r30, r18
    587c:	09 95       	icall
	#endif
}
    587e:	00 00       	nop
    5880:	0f 90       	pop	r0
    5882:	0f 90       	pop	r0
    5884:	df 91       	pop	r29
    5886:	cf 91       	pop	r28
    5888:	08 95       	ret

0000588a <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
		morph_config_pwm_stop_pwm(pn);
	#else
		morph_stop_pwm_function(pn);
	#endif	
}
    588a:	cf 93       	push	r28
    588c:	df 93       	push	r29
    588e:	cd b7       	in	r28, 0x3d	; 61
    5890:	de b7       	in	r29, 0x3e	; 62
    5892:	00 00       	nop
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	08 95       	ret

0000589a <MorphPWM_register_start_pwm>:
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	00 d0       	rcall	.+0      	; 0x58a0 <MorphPWM_register_start_pwm+0x6>
    58a0:	cd b7       	in	r28, 0x3d	; 61
    58a2:	de b7       	in	r29, 0x3e	; 62
    58a4:	9a 83       	std	Y+2, r25	; 0x02
    58a6:	89 83       	std	Y+1, r24	; 0x01
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
    58aa:	9a 81       	ldd	r25, Y+2	; 0x02
    58ac:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <morph_start_pwm_function+0x1>
    58b0:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <morph_start_pwm_function>
    58b4:	00 00       	nop
    58b6:	0f 90       	pop	r0
    58b8:	0f 90       	pop	r0
    58ba:	df 91       	pop	r29
    58bc:	cf 91       	pop	r28
    58be:	08 95       	ret

000058c0 <MorphPWM_register_stop_pwm>:
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
    58c4:	00 d0       	rcall	.+0      	; 0x58c6 <MorphPWM_register_stop_pwm+0x6>
    58c6:	cd b7       	in	r28, 0x3d	; 61
    58c8:	de b7       	in	r29, 0x3e	; 62
    58ca:	9a 83       	std	Y+2, r25	; 0x02
    58cc:	89 83       	std	Y+1, r24	; 0x01
    58ce:	89 81       	ldd	r24, Y+1	; 0x01
    58d0:	9a 81       	ldd	r25, Y+2	; 0x02
    58d2:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <morph_stop_pwm_function+0x1>
    58d6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <morph_stop_pwm_function>
    58da:	00 00       	nop
    58dc:	0f 90       	pop	r0
    58de:	0f 90       	pop	r0
    58e0:	df 91       	pop	r29
    58e2:	cf 91       	pop	r28
    58e4:	08 95       	ret

000058e6 <MorphPWM_register_set_pwm_duty_float>:
    58e6:	cf 93       	push	r28
    58e8:	df 93       	push	r29
    58ea:	00 d0       	rcall	.+0      	; 0x58ec <MorphPWM_register_set_pwm_duty_float+0x6>
    58ec:	cd b7       	in	r28, 0x3d	; 61
    58ee:	de b7       	in	r29, 0x3e	; 62
    58f0:	9a 83       	std	Y+2, r25	; 0x02
    58f2:	89 83       	std	Y+1, r24	; 0x01
    58f4:	89 81       	ldd	r24, Y+1	; 0x01
    58f6:	9a 81       	ldd	r25, Y+2	; 0x02
    58f8:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <morph_set_pwm_duty_float_function+0x1>
    58fc:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <morph_set_pwm_duty_float_function>
    5900:	00 00       	nop
    5902:	0f 90       	pop	r0
    5904:	0f 90       	pop	r0
    5906:	df 91       	pop	r29
    5908:	cf 91       	pop	r28
    590a:	08 95       	ret

0000590c <MorphPWM_register_set_pwm_duty_64bit>:
    590c:	cf 93       	push	r28
    590e:	df 93       	push	r29
    5910:	00 d0       	rcall	.+0      	; 0x5912 <MorphPWM_register_set_pwm_duty_64bit+0x6>
    5912:	cd b7       	in	r28, 0x3d	; 61
    5914:	de b7       	in	r29, 0x3e	; 62
    5916:	9a 83       	std	Y+2, r25	; 0x02
    5918:	89 83       	std	Y+1, r24	; 0x01
    591a:	89 81       	ldd	r24, Y+1	; 0x01
    591c:	9a 81       	ldd	r25, Y+2	; 0x02
    591e:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <morph_set_pwm_duty_64bit_function+0x1>
    5922:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <morph_set_pwm_duty_64bit_function>
    5926:	00 00       	nop
    5928:	0f 90       	pop	r0
    592a:	0f 90       	pop	r0
    592c:	df 91       	pop	r29
    592e:	cf 91       	pop	r28
    5930:	08 95       	ret

00005932 <MorphPWM_register_set_pwm_duty_32bit>:
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	00 d0       	rcall	.+0      	; 0x5938 <MorphPWM_register_set_pwm_duty_32bit+0x6>
    5938:	cd b7       	in	r28, 0x3d	; 61
    593a:	de b7       	in	r29, 0x3e	; 62
    593c:	9a 83       	std	Y+2, r25	; 0x02
    593e:	89 83       	std	Y+1, r24	; 0x01
    5940:	89 81       	ldd	r24, Y+1	; 0x01
    5942:	9a 81       	ldd	r25, Y+2	; 0x02
    5944:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <morph_set_pwm_duty_32bit_function+0x1>
    5948:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <morph_set_pwm_duty_32bit_function>
    594c:	00 00       	nop
    594e:	0f 90       	pop	r0
    5950:	0f 90       	pop	r0
    5952:	df 91       	pop	r29
    5954:	cf 91       	pop	r28
    5956:	08 95       	ret

00005958 <MorphPWM_register_set_pwm_duty_16bit>:
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	00 d0       	rcall	.+0      	; 0x595e <MorphPWM_register_set_pwm_duty_16bit+0x6>
    595e:	cd b7       	in	r28, 0x3d	; 61
    5960:	de b7       	in	r29, 0x3e	; 62
    5962:	9a 83       	std	Y+2, r25	; 0x02
    5964:	89 83       	std	Y+1, r24	; 0x01
    5966:	89 81       	ldd	r24, Y+1	; 0x01
    5968:	9a 81       	ldd	r25, Y+2	; 0x02
    596a:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <morph_set_pwm_duty_16bit_function+0x1>
    596e:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <morph_set_pwm_duty_16bit_function>
    5972:	00 00       	nop
    5974:	0f 90       	pop	r0
    5976:	0f 90       	pop	r0
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	08 95       	ret

0000597e <MorphPWM_register_set_pwm_duty_8bit>:
    597e:	cf 93       	push	r28
    5980:	df 93       	push	r29
    5982:	00 d0       	rcall	.+0      	; 0x5984 <MorphPWM_register_set_pwm_duty_8bit+0x6>
    5984:	cd b7       	in	r28, 0x3d	; 61
    5986:	de b7       	in	r29, 0x3e	; 62
    5988:	9a 83       	std	Y+2, r25	; 0x02
    598a:	89 83       	std	Y+1, r24	; 0x01
    598c:	89 81       	ldd	r24, Y+1	; 0x01
    598e:	9a 81       	ldd	r25, Y+2	; 0x02
    5990:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <morph_set_pwm_duty_8bit_function+0x1>
    5994:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <morph_set_pwm_duty_8bit_function>
    5998:	00 00       	nop
    599a:	0f 90       	pop	r0
    599c:	0f 90       	pop	r0
    599e:	df 91       	pop	r29
    59a0:	cf 91       	pop	r28
    59a2:	08 95       	ret

000059a4 <MorphPWM_start_pwm>:
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	1f 92       	push	r1
    59aa:	cd b7       	in	r28, 0x3d	; 61
    59ac:	de b7       	in	r29, 0x3e	; 62
    59ae:	89 83       	std	Y+1, r24	; 0x01
    59b0:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <morph_start_pwm_function>
    59b4:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <morph_start_pwm_function+0x1>
    59b8:	89 81       	ldd	r24, Y+1	; 0x01
    59ba:	f9 01       	movw	r30, r18
    59bc:	09 95       	icall
    59be:	00 00       	nop
    59c0:	0f 90       	pop	r0
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	08 95       	ret

000059c8 <MorphPWM_set_pwm_duty_float>:

// Takes a float from 0.0 to 1.0 and sets the output accordingly.
void MorphPWM_set_pwm_duty_float(MorphPinNumber pn, double duty)
{
    59c8:	cf 93       	push	r28
    59ca:	df 93       	push	r29
    59cc:	00 d0       	rcall	.+0      	; 0x59ce <MorphPWM_set_pwm_duty_float+0x6>
    59ce:	00 d0       	rcall	.+0      	; 0x59d0 <MorphPWM_set_pwm_duty_float+0x8>
    59d0:	1f 92       	push	r1
    59d2:	cd b7       	in	r28, 0x3d	; 61
    59d4:	de b7       	in	r29, 0x3e	; 62
    59d6:	89 83       	std	Y+1, r24	; 0x01
    59d8:	4a 83       	std	Y+2, r20	; 0x02
    59da:	5b 83       	std	Y+3, r21	; 0x03
    59dc:	6c 83       	std	Y+4, r22	; 0x04
    59de:	7d 83       	std	Y+5, r23	; 0x05
	#ifdef MORPH_IMPLICIT
		morph_config_pwm_set_pwm_duty_float(pn, duty);
	#else
		morph_set_pwm_duty_float_function(pn, duty);
    59e0:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <morph_set_pwm_duty_float_function>
    59e4:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <morph_set_pwm_duty_float_function+0x1>
    59e8:	8a 81       	ldd	r24, Y+2	; 0x02
    59ea:	9b 81       	ldd	r25, Y+3	; 0x03
    59ec:	ac 81       	ldd	r26, Y+4	; 0x04
    59ee:	bd 81       	ldd	r27, Y+5	; 0x05
    59f0:	ac 01       	movw	r20, r24
    59f2:	bd 01       	movw	r22, r26
    59f4:	89 81       	ldd	r24, Y+1	; 0x01
    59f6:	f9 01       	movw	r30, r18
    59f8:	09 95       	icall
	#endif	
}
    59fa:	00 00       	nop
    59fc:	0f 90       	pop	r0
    59fe:	0f 90       	pop	r0
    5a00:	0f 90       	pop	r0
    5a02:	0f 90       	pop	r0
    5a04:	0f 90       	pop	r0
    5a06:	df 91       	pop	r29
    5a08:	cf 91       	pop	r28
    5a0a:	08 95       	ret

00005a0c <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
		morph_config_time_init_rtc();
	#else
		morph_init_rtc_function();
	#endif
}
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
    5a10:	cd b7       	in	r28, 0x3d	; 61
    5a12:	de b7       	in	r29, 0x3e	; 62
    5a14:	00 00       	nop
    5a16:	df 91       	pop	r29
    5a18:	cf 91       	pop	r28
    5a1a:	08 95       	ret

00005a1c <MorphTime_register_init_function>:
    5a1c:	cf 93       	push	r28
    5a1e:	df 93       	push	r29
    5a20:	00 d0       	rcall	.+0      	; 0x5a22 <MorphTime_register_init_function+0x6>
    5a22:	cd b7       	in	r28, 0x3d	; 61
    5a24:	de b7       	in	r29, 0x3e	; 62
    5a26:	9a 83       	std	Y+2, r25	; 0x02
    5a28:	89 83       	std	Y+1, r24	; 0x01
    5a2a:	89 81       	ldd	r24, Y+1	; 0x01
    5a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a2e:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <morph_init_function+0x1>
    5a32:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <morph_init_function>
    5a36:	00 00       	nop
    5a38:	0f 90       	pop	r0
    5a3a:	0f 90       	pop	r0
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	08 95       	ret

00005a42 <MorphTime_register_init_rtc_function>:
    5a42:	cf 93       	push	r28
    5a44:	df 93       	push	r29
    5a46:	00 d0       	rcall	.+0      	; 0x5a48 <MorphTime_register_init_rtc_function+0x6>
    5a48:	cd b7       	in	r28, 0x3d	; 61
    5a4a:	de b7       	in	r29, 0x3e	; 62
    5a4c:	9a 83       	std	Y+2, r25	; 0x02
    5a4e:	89 83       	std	Y+1, r24	; 0x01
    5a50:	89 81       	ldd	r24, Y+1	; 0x01
    5a52:	9a 81       	ldd	r25, Y+2	; 0x02
    5a54:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <morph_init_rtc_function+0x1>
    5a58:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <morph_init_rtc_function>
    5a5c:	00 00       	nop
    5a5e:	0f 90       	pop	r0
    5a60:	0f 90       	pop	r0
    5a62:	df 91       	pop	r29
    5a64:	cf 91       	pop	r28
    5a66:	08 95       	ret

00005a68 <MorphTime_register_millis_function>:
    5a68:	cf 93       	push	r28
    5a6a:	df 93       	push	r29
    5a6c:	00 d0       	rcall	.+0      	; 0x5a6e <MorphTime_register_millis_function+0x6>
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	9a 83       	std	Y+2, r25	; 0x02
    5a74:	89 83       	std	Y+1, r24	; 0x01
    5a76:	89 81       	ldd	r24, Y+1	; 0x01
    5a78:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7a:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <morph_millis_function+0x1>
    5a7e:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <morph_millis_function>
    5a82:	00 00       	nop
    5a84:	0f 90       	pop	r0
    5a86:	0f 90       	pop	r0
    5a88:	df 91       	pop	r29
    5a8a:	cf 91       	pop	r28
    5a8c:	08 95       	ret

00005a8e <MorphTime_init>:
    5a8e:	cf 93       	push	r28
    5a90:	df 93       	push	r29
    5a92:	00 d0       	rcall	.+0      	; 0x5a94 <MorphTime_init+0x6>
    5a94:	cd b7       	in	r28, 0x3d	; 61
    5a96:	de b7       	in	r29, 0x3e	; 62
    5a98:	89 83       	std	Y+1, r24	; 0x01
    5a9a:	6a 83       	std	Y+2, r22	; 0x02
    5a9c:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <morph_init_function>
    5aa0:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <morph_init_function+0x1>
    5aa4:	6a 81       	ldd	r22, Y+2	; 0x02
    5aa6:	89 81       	ldd	r24, Y+1	; 0x01
    5aa8:	f9 01       	movw	r30, r18
    5aaa:	09 95       	icall
    5aac:	00 00       	nop
    5aae:	0f 90       	pop	r0
    5ab0:	0f 90       	pop	r0
    5ab2:	df 91       	pop	r29
    5ab4:	cf 91       	pop	r28
    5ab6:	08 95       	ret

00005ab8 <MorphTime_millis>:

MorphTimeValue MorphTime_millis()
{
    5ab8:	af 92       	push	r10
    5aba:	bf 92       	push	r11
    5abc:	cf 92       	push	r12
    5abe:	df 92       	push	r13
    5ac0:	ef 92       	push	r14
    5ac2:	ff 92       	push	r15
    5ac4:	0f 93       	push	r16
    5ac6:	1f 93       	push	r17
    5ac8:	cf 93       	push	r28
    5aca:	df 93       	push	r29
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	28 97       	sbiw	r28, 0x08	; 8
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	f8 94       	cli
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	cd bf       	out	0x3d, r28	; 61
	volatile MorphTimeValue value = 0;
    5adc:	19 82       	std	Y+1, r1	; 0x01
    5ade:	1a 82       	std	Y+2, r1	; 0x02
    5ae0:	1b 82       	std	Y+3, r1	; 0x03
    5ae2:	1c 82       	std	Y+4, r1	; 0x04
    5ae4:	1d 82       	std	Y+5, r1	; 0x05
    5ae6:	1e 82       	std	Y+6, r1	; 0x06
    5ae8:	1f 82       	std	Y+7, r1	; 0x07
    5aea:	18 86       	std	Y+8, r1	; 0x08
	#ifdef MORPH_IMPLICIT
		value = morph_config_time_millis();
	#else
		value = morph_millis_function();
    5aec:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <morph_millis_function>
    5af0:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <morph_millis_function+0x1>
    5af4:	fc 01       	movw	r30, r24
    5af6:	09 95       	icall
    5af8:	a2 2e       	mov	r10, r18
    5afa:	b3 2e       	mov	r11, r19
    5afc:	c4 2e       	mov	r12, r20
    5afe:	d5 2e       	mov	r13, r21
    5b00:	e6 2e       	mov	r14, r22
    5b02:	f7 2e       	mov	r15, r23
    5b04:	08 2f       	mov	r16, r24
    5b06:	19 2f       	mov	r17, r25
    5b08:	a9 82       	std	Y+1, r10	; 0x01
    5b0a:	ba 82       	std	Y+2, r11	; 0x02
    5b0c:	cb 82       	std	Y+3, r12	; 0x03
    5b0e:	dc 82       	std	Y+4, r13	; 0x04
    5b10:	ed 82       	std	Y+5, r14	; 0x05
    5b12:	fe 82       	std	Y+6, r15	; 0x06
    5b14:	0f 83       	std	Y+7, r16	; 0x07
    5b16:	18 87       	std	Y+8, r17	; 0x08
	#endif
	
	return value;
    5b18:	29 81       	ldd	r18, Y+1	; 0x01
    5b1a:	3a 81       	ldd	r19, Y+2	; 0x02
    5b1c:	4b 81       	ldd	r20, Y+3	; 0x03
    5b1e:	5c 81       	ldd	r21, Y+4	; 0x04
    5b20:	6d 81       	ldd	r22, Y+5	; 0x05
    5b22:	7e 81       	ldd	r23, Y+6	; 0x06
    5b24:	8f 81       	ldd	r24, Y+7	; 0x07
    5b26:	98 85       	ldd	r25, Y+8	; 0x08
    5b28:	a2 2e       	mov	r10, r18
    5b2a:	b3 2e       	mov	r11, r19
    5b2c:	c4 2e       	mov	r12, r20
    5b2e:	d5 2e       	mov	r13, r21
    5b30:	e6 2e       	mov	r14, r22
    5b32:	f7 2e       	mov	r15, r23
    5b34:	08 2f       	mov	r16, r24
    5b36:	19 2f       	mov	r17, r25
}
    5b38:	2a 2d       	mov	r18, r10
    5b3a:	3b 2d       	mov	r19, r11
    5b3c:	4c 2d       	mov	r20, r12
    5b3e:	5d 2d       	mov	r21, r13
    5b40:	6e 2d       	mov	r22, r14
    5b42:	7f 2d       	mov	r23, r15
    5b44:	80 2f       	mov	r24, r16
    5b46:	91 2f       	mov	r25, r17
    5b48:	28 96       	adiw	r28, 0x08	; 8
    5b4a:	0f b6       	in	r0, 0x3f	; 63
    5b4c:	f8 94       	cli
    5b4e:	de bf       	out	0x3e, r29	; 62
    5b50:	0f be       	out	0x3f, r0	; 63
    5b52:	cd bf       	out	0x3d, r28	; 61
    5b54:	df 91       	pop	r29
    5b56:	cf 91       	pop	r28
    5b58:	1f 91       	pop	r17
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 90       	pop	r15
    5b5e:	ef 90       	pop	r14
    5b60:	df 90       	pop	r13
    5b62:	cf 90       	pop	r12
    5b64:	bf 90       	pop	r11
    5b66:	af 90       	pop	r10
    5b68:	08 95       	ret

00005b6a <MorphUtils_empty_callback>:
#ifndef MORPHUTILS_H_
#define MORPHUTILS_H_

// This function is used to initialize any function pointers.
// If this is not used, function pointers will restart the program if accidentally called.
static void MorphUtils_empty_callback(){
    5b6a:	cf 93       	push	r28
    5b6c:	df 93       	push	r29
    5b6e:	cd b7       	in	r28, 0x3d	; 61
    5b70:	de b7       	in	r29, 0x3e	; 62
	; // Do nothing
}
    5b72:	00 00       	nop
    5b74:	df 91       	pop	r29
    5b76:	cf 91       	pop	r28
    5b78:	08 95       	ret

00005b7a <MorphTimer_register_acquire_timer_function>:
void (*morph_set_timer_callback_function)(MorphTimerNumber, MorphTimerResolution, void (*)(void)) = &MorphUtils_empty_callback;
void (*morph_unset_timer_callback_function)(MorphTimerNumber, MorphTimerResolution, void (*)(void)) = &MorphUtils_empty_callback;
bool (*morph_timer_is_in_use_function)(MorphTimerNumber, MorphTimerResolution) = &MorphUtils_empty_callback;

void MorphTimer_register_acquire_timer_function(void (*function)(MorphTimerNumber, MorphTimerResolution))
{
    5b7a:	cf 93       	push	r28
    5b7c:	df 93       	push	r29
    5b7e:	00 d0       	rcall	.+0      	; 0x5b80 <MorphTimer_register_acquire_timer_function+0x6>
    5b80:	cd b7       	in	r28, 0x3d	; 61
    5b82:	de b7       	in	r29, 0x3e	; 62
    5b84:	9a 83       	std	Y+2, r25	; 0x02
    5b86:	89 83       	std	Y+1, r24	; 0x01
	morph_aquire_timer_function = function;
    5b88:	89 81       	ldd	r24, Y+1	; 0x01
    5b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b8c:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <morph_aquire_timer_function+0x1>
    5b90:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <morph_aquire_timer_function>
}
    5b94:	00 00       	nop
    5b96:	0f 90       	pop	r0
    5b98:	0f 90       	pop	r0
    5b9a:	df 91       	pop	r29
    5b9c:	cf 91       	pop	r28
    5b9e:	08 95       	ret

00005ba0 <MorphTimer_register_release_timer_function>:

void MorphTimer_register_release_timer_function(void (*function)(MorphTimerNumber, MorphTimerResolution))
{
    5ba0:	cf 93       	push	r28
    5ba2:	df 93       	push	r29
    5ba4:	00 d0       	rcall	.+0      	; 0x5ba6 <MorphTimer_register_release_timer_function+0x6>
    5ba6:	cd b7       	in	r28, 0x3d	; 61
    5ba8:	de b7       	in	r29, 0x3e	; 62
    5baa:	9a 83       	std	Y+2, r25	; 0x02
    5bac:	89 83       	std	Y+1, r24	; 0x01
	morph_release_timer_function = function;	
    5bae:	89 81       	ldd	r24, Y+1	; 0x01
    5bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bb2:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <morph_release_timer_function+0x1>
    5bb6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <morph_release_timer_function>
}
    5bba:	00 00       	nop
    5bbc:	0f 90       	pop	r0
    5bbe:	0f 90       	pop	r0
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	08 95       	ret

00005bc6 <MorphTimer_register_set_rate_function>:

void MorphTimer_register_set_rate_function(void (*function)(MorphTimerNumber, MorphTimerResolution, MorphTimerRate))
{
    5bc6:	cf 93       	push	r28
    5bc8:	df 93       	push	r29
    5bca:	00 d0       	rcall	.+0      	; 0x5bcc <MorphTimer_register_set_rate_function+0x6>
    5bcc:	cd b7       	in	r28, 0x3d	; 61
    5bce:	de b7       	in	r29, 0x3e	; 62
    5bd0:	9a 83       	std	Y+2, r25	; 0x02
    5bd2:	89 83       	std	Y+1, r24	; 0x01
	morph_set_timer_rate_function = function;
    5bd4:	89 81       	ldd	r24, Y+1	; 0x01
    5bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd8:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <morph_set_timer_rate_function+0x1>
    5bdc:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <morph_set_timer_rate_function>
}
    5be0:	00 00       	nop
    5be2:	0f 90       	pop	r0
    5be4:	0f 90       	pop	r0
    5be6:	df 91       	pop	r29
    5be8:	cf 91       	pop	r28
    5bea:	08 95       	ret

00005bec <MorphTimer_register_set_timer_callback_function>:

void MorphTimer_register_set_timer_callback_function(void (*function)(MorphTimerNumber, MorphTimerResolution, void (*)(void)))
{
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    5bf0:	00 d0       	rcall	.+0      	; 0x5bf2 <MorphTimer_register_set_timer_callback_function+0x6>
    5bf2:	cd b7       	in	r28, 0x3d	; 61
    5bf4:	de b7       	in	r29, 0x3e	; 62
    5bf6:	9a 83       	std	Y+2, r25	; 0x02
    5bf8:	89 83       	std	Y+1, r24	; 0x01
	morph_set_timer_callback_function = function;	
    5bfa:	89 81       	ldd	r24, Y+1	; 0x01
    5bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfe:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <morph_set_timer_callback_function+0x1>
    5c02:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <morph_set_timer_callback_function>
}
    5c06:	00 00       	nop
    5c08:	0f 90       	pop	r0
    5c0a:	0f 90       	pop	r0
    5c0c:	df 91       	pop	r29
    5c0e:	cf 91       	pop	r28
    5c10:	08 95       	ret

00005c12 <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
		morph_config_uart_write_data_buffer(c, buffer, length);
	#else
		morph_write_data_buffer_function(c, buffer, length);
	#endif
}
    5c12:	cf 93       	push	r28
    5c14:	df 93       	push	r29
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    5c1a:	00 00       	nop
    5c1c:	df 91       	pop	r29
    5c1e:	cf 91       	pop	r28
    5c20:	08 95       	ret

00005c22 <MorphUART_register_setup_channel_function>:
    5c22:	cf 93       	push	r28
    5c24:	df 93       	push	r29
    5c26:	00 d0       	rcall	.+0      	; 0x5c28 <MorphUART_register_setup_channel_function+0x6>
    5c28:	cd b7       	in	r28, 0x3d	; 61
    5c2a:	de b7       	in	r29, 0x3e	; 62
    5c2c:	9a 83       	std	Y+2, r25	; 0x02
    5c2e:	89 83       	std	Y+1, r24	; 0x01
    5c30:	89 81       	ldd	r24, Y+1	; 0x01
    5c32:	9a 81       	ldd	r25, Y+2	; 0x02
    5c34:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <morph_setup_channel_function+0x1>
    5c38:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <morph_setup_channel_function>
    5c3c:	00 00       	nop
    5c3e:	0f 90       	pop	r0
    5c40:	0f 90       	pop	r0
    5c42:	df 91       	pop	r29
    5c44:	cf 91       	pop	r28
    5c46:	08 95       	ret

00005c48 <MorphUART_register_send_data_function>:
    5c48:	cf 93       	push	r28
    5c4a:	df 93       	push	r29
    5c4c:	00 d0       	rcall	.+0      	; 0x5c4e <MorphUART_register_send_data_function+0x6>
    5c4e:	cd b7       	in	r28, 0x3d	; 61
    5c50:	de b7       	in	r29, 0x3e	; 62
    5c52:	9a 83       	std	Y+2, r25	; 0x02
    5c54:	89 83       	std	Y+1, r24	; 0x01
    5c56:	89 81       	ldd	r24, Y+1	; 0x01
    5c58:	9a 81       	ldd	r25, Y+2	; 0x02
    5c5a:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <morph_send_data_function+0x1>
    5c5e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <morph_send_data_function>
    5c62:	00 00       	nop
    5c64:	0f 90       	pop	r0
    5c66:	0f 90       	pop	r0
    5c68:	df 91       	pop	r29
    5c6a:	cf 91       	pop	r28
    5c6c:	08 95       	ret

00005c6e <MorphUART_register_read_data_function>:
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	00 d0       	rcall	.+0      	; 0x5c74 <MorphUART_register_read_data_function+0x6>
    5c74:	cd b7       	in	r28, 0x3d	; 61
    5c76:	de b7       	in	r29, 0x3e	; 62
    5c78:	9a 83       	std	Y+2, r25	; 0x02
    5c7a:	89 83       	std	Y+1, r24	; 0x01
    5c7c:	89 81       	ldd	r24, Y+1	; 0x01
    5c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c80:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <morph_read_data_function+0x1>
    5c84:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <morph_read_data_function>
    5c88:	00 00       	nop
    5c8a:	0f 90       	pop	r0
    5c8c:	0f 90       	pop	r0
    5c8e:	df 91       	pop	r29
    5c90:	cf 91       	pop	r28
    5c92:	08 95       	ret

00005c94 <MorphUART_register_send_byte_function>:
    5c94:	cf 93       	push	r28
    5c96:	df 93       	push	r29
    5c98:	00 d0       	rcall	.+0      	; 0x5c9a <MorphUART_register_send_byte_function+0x6>
    5c9a:	cd b7       	in	r28, 0x3d	; 61
    5c9c:	de b7       	in	r29, 0x3e	; 62
    5c9e:	9a 83       	std	Y+2, r25	; 0x02
    5ca0:	89 83       	std	Y+1, r24	; 0x01
    5ca2:	89 81       	ldd	r24, Y+1	; 0x01
    5ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca6:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <morph_send_byte_function+0x1>
    5caa:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <morph_send_byte_function>
    5cae:	00 00       	nop
    5cb0:	0f 90       	pop	r0
    5cb2:	0f 90       	pop	r0
    5cb4:	df 91       	pop	r29
    5cb6:	cf 91       	pop	r28
    5cb8:	08 95       	ret

00005cba <MorphUART_register_read_byte_function>:
    5cba:	cf 93       	push	r28
    5cbc:	df 93       	push	r29
    5cbe:	00 d0       	rcall	.+0      	; 0x5cc0 <MorphUART_register_read_byte_function+0x6>
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
    5cc4:	9a 83       	std	Y+2, r25	; 0x02
    5cc6:	89 83       	std	Y+1, r24	; 0x01
    5cc8:	89 81       	ldd	r24, Y+1	; 0x01
    5cca:	9a 81       	ldd	r25, Y+2	; 0x02
    5ccc:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <morph_read_byte_function+0x1>
    5cd0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <morph_read_byte_function>
    5cd4:	00 00       	nop
    5cd6:	0f 90       	pop	r0
    5cd8:	0f 90       	pop	r0
    5cda:	df 91       	pop	r29
    5cdc:	cf 91       	pop	r28
    5cde:	08 95       	ret

00005ce0 <MorphUART_register_write_data_buffer_function>:
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	00 d0       	rcall	.+0      	; 0x5ce6 <MorphUART_register_write_data_buffer_function+0x6>
    5ce6:	cd b7       	in	r28, 0x3d	; 61
    5ce8:	de b7       	in	r29, 0x3e	; 62
    5cea:	9a 83       	std	Y+2, r25	; 0x02
    5cec:	89 83       	std	Y+1, r24	; 0x01
    5cee:	89 81       	ldd	r24, Y+1	; 0x01
    5cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf2:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <morph_write_data_buffer_function+0x1>
    5cf6:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <morph_write_data_buffer_function>
    5cfa:	00 00       	nop
    5cfc:	0f 90       	pop	r0
    5cfe:	0f 90       	pop	r0
    5d00:	df 91       	pop	r29
    5d02:	cf 91       	pop	r28
    5d04:	08 95       	ret

00005d06 <MorphUART_register_write_byte_buffer_function>:
    5d06:	cf 93       	push	r28
    5d08:	df 93       	push	r29
    5d0a:	00 d0       	rcall	.+0      	; 0x5d0c <MorphUART_register_write_byte_buffer_function+0x6>
    5d0c:	cd b7       	in	r28, 0x3d	; 61
    5d0e:	de b7       	in	r29, 0x3e	; 62
    5d10:	9a 83       	std	Y+2, r25	; 0x02
    5d12:	89 83       	std	Y+1, r24	; 0x01
    5d14:	89 81       	ldd	r24, Y+1	; 0x01
    5d16:	9a 81       	ldd	r25, Y+2	; 0x02
    5d18:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <morph_write_byte_buffer_function+0x1>
    5d1c:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <morph_write_byte_buffer_function>
    5d20:	00 00       	nop
    5d22:	0f 90       	pop	r0
    5d24:	0f 90       	pop	r0
    5d26:	df 91       	pop	r29
    5d28:	cf 91       	pop	r28
    5d2a:	08 95       	ret

00005d2c <MorphUART_register_read_data_buffer_function>:
    5d2c:	cf 93       	push	r28
    5d2e:	df 93       	push	r29
    5d30:	00 d0       	rcall	.+0      	; 0x5d32 <MorphUART_register_read_data_buffer_function+0x6>
    5d32:	cd b7       	in	r28, 0x3d	; 61
    5d34:	de b7       	in	r29, 0x3e	; 62
    5d36:	9a 83       	std	Y+2, r25	; 0x02
    5d38:	89 83       	std	Y+1, r24	; 0x01
    5d3a:	89 81       	ldd	r24, Y+1	; 0x01
    5d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d3e:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <morph_read_data_buffer_function+0x1>
    5d42:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <morph_read_data_buffer_function>
    5d46:	00 00       	nop
    5d48:	0f 90       	pop	r0
    5d4a:	0f 90       	pop	r0
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	08 95       	ret

00005d52 <MorphUART_register_read_byte_buffer_function>:
    5d52:	cf 93       	push	r28
    5d54:	df 93       	push	r29
    5d56:	00 d0       	rcall	.+0      	; 0x5d58 <MorphUART_register_read_byte_buffer_function+0x6>
    5d58:	cd b7       	in	r28, 0x3d	; 61
    5d5a:	de b7       	in	r29, 0x3e	; 62
    5d5c:	9a 83       	std	Y+2, r25	; 0x02
    5d5e:	89 83       	std	Y+1, r24	; 0x01
    5d60:	89 81       	ldd	r24, Y+1	; 0x01
    5d62:	9a 81       	ldd	r25, Y+2	; 0x02
    5d64:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <morph_read_byte_buffer_function+0x1>
    5d68:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <morph_read_byte_buffer_function>
    5d6c:	00 00       	nop
    5d6e:	0f 90       	pop	r0
    5d70:	0f 90       	pop	r0
    5d72:	df 91       	pop	r29
    5d74:	cf 91       	pop	r28
    5d76:	08 95       	ret

00005d78 <MorphUART_register_data_ready_function>:
    5d78:	cf 93       	push	r28
    5d7a:	df 93       	push	r29
    5d7c:	00 d0       	rcall	.+0      	; 0x5d7e <MorphUART_register_data_ready_function+0x6>
    5d7e:	cd b7       	in	r28, 0x3d	; 61
    5d80:	de b7       	in	r29, 0x3e	; 62
    5d82:	9a 83       	std	Y+2, r25	; 0x02
    5d84:	89 83       	std	Y+1, r24	; 0x01
    5d86:	89 81       	ldd	r24, Y+1	; 0x01
    5d88:	9a 81       	ldd	r25, Y+2	; 0x02
    5d8a:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <morph_data_ready_function+0x1>
    5d8e:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <morph_data_ready_function>
    5d92:	00 00       	nop
    5d94:	0f 90       	pop	r0
    5d96:	0f 90       	pop	r0
    5d98:	df 91       	pop	r29
    5d9a:	cf 91       	pop	r28
    5d9c:	08 95       	ret

00005d9e <MorphUART_setup_channel>:
    5d9e:	ef 92       	push	r14
    5da0:	0f 93       	push	r16
    5da2:	cf 93       	push	r28
    5da4:	df 93       	push	r29
    5da6:	cd b7       	in	r28, 0x3d	; 61
    5da8:	de b7       	in	r29, 0x3e	; 62
    5daa:	28 97       	sbiw	r28, 0x08	; 8
    5dac:	0f b6       	in	r0, 0x3f	; 63
    5dae:	f8 94       	cli
    5db0:	de bf       	out	0x3e, r29	; 62
    5db2:	0f be       	out	0x3f, r0	; 63
    5db4:	cd bf       	out	0x3d, r28	; 61
    5db6:	89 83       	std	Y+1, r24	; 0x01
    5db8:	4a 83       	std	Y+2, r20	; 0x02
    5dba:	5b 83       	std	Y+3, r21	; 0x03
    5dbc:	6c 83       	std	Y+4, r22	; 0x04
    5dbe:	7d 83       	std	Y+5, r23	; 0x05
    5dc0:	2e 83       	std	Y+6, r18	; 0x06
    5dc2:	0f 83       	std	Y+7, r16	; 0x07
    5dc4:	e8 86       	std	Y+8, r14	; 0x08
    5dc6:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <morph_setup_channel_function>
    5dca:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <morph_setup_channel_function+0x1>
    5dce:	8a 81       	ldd	r24, Y+2	; 0x02
    5dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    5dd2:	ac 81       	ldd	r26, Y+4	; 0x04
    5dd4:	bd 81       	ldd	r27, Y+5	; 0x05
    5dd6:	e8 84       	ldd	r14, Y+8	; 0x08
    5dd8:	0f 81       	ldd	r16, Y+7	; 0x07
    5dda:	2e 81       	ldd	r18, Y+6	; 0x06
    5ddc:	ac 01       	movw	r20, r24
    5dde:	bd 01       	movw	r22, r26
    5de0:	89 81       	ldd	r24, Y+1	; 0x01
    5de2:	09 95       	icall
    5de4:	00 00       	nop
    5de6:	28 96       	adiw	r28, 0x08	; 8
    5de8:	0f b6       	in	r0, 0x3f	; 63
    5dea:	f8 94       	cli
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	0f be       	out	0x3f, r0	; 63
    5df0:	cd bf       	out	0x3d, r28	; 61
    5df2:	df 91       	pop	r29
    5df4:	cf 91       	pop	r28
    5df6:	0f 91       	pop	r16
    5df8:	ef 90       	pop	r14
    5dfa:	08 95       	ret

00005dfc <MorphUART_send_byte>:
    5dfc:	cf 93       	push	r28
    5dfe:	df 93       	push	r29
    5e00:	00 d0       	rcall	.+0      	; 0x5e02 <MorphUART_send_byte+0x6>
    5e02:	cd b7       	in	r28, 0x3d	; 61
    5e04:	de b7       	in	r29, 0x3e	; 62
    5e06:	89 83       	std	Y+1, r24	; 0x01
    5e08:	6a 83       	std	Y+2, r22	; 0x02
    5e0a:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <morph_send_byte_function>
    5e0e:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <morph_send_byte_function+0x1>
    5e12:	6a 81       	ldd	r22, Y+2	; 0x02
    5e14:	89 81       	ldd	r24, Y+1	; 0x01
    5e16:	f9 01       	movw	r30, r18
    5e18:	09 95       	icall
    5e1a:	00 00       	nop
    5e1c:	0f 90       	pop	r0
    5e1e:	0f 90       	pop	r0
    5e20:	df 91       	pop	r29
    5e22:	cf 91       	pop	r28
    5e24:	08 95       	ret

00005e26 <MorphUART_write_byte_buffer>:

// Writes a buffer to the UART channel. Will limit frame size to 8 bits.
void MorphUART_write_byte_buffer(MorphUARTChannel c, MorphUARTByte * buffer, size_t length)
{
    5e26:	cf 93       	push	r28
    5e28:	df 93       	push	r29
    5e2a:	00 d0       	rcall	.+0      	; 0x5e2c <MorphUART_write_byte_buffer+0x6>
    5e2c:	00 d0       	rcall	.+0      	; 0x5e2e <MorphUART_write_byte_buffer+0x8>
    5e2e:	1f 92       	push	r1
    5e30:	cd b7       	in	r28, 0x3d	; 61
    5e32:	de b7       	in	r29, 0x3e	; 62
    5e34:	89 83       	std	Y+1, r24	; 0x01
    5e36:	7b 83       	std	Y+3, r23	; 0x03
    5e38:	6a 83       	std	Y+2, r22	; 0x02
    5e3a:	5d 83       	std	Y+5, r21	; 0x05
    5e3c:	4c 83       	std	Y+4, r20	; 0x04
	#ifdef MORPH_IMPLICIT	
		morph_config_uart_write_byte_buffer(c, buffer, length);
	#else
		morph_write_byte_buffer_function(c, buffer, length);
    5e3e:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <morph_write_byte_buffer_function>
    5e42:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <morph_write_byte_buffer_function+0x1>
    5e46:	4c 81       	ldd	r20, Y+4	; 0x04
    5e48:	5d 81       	ldd	r21, Y+5	; 0x05
    5e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e4e:	bc 01       	movw	r22, r24
    5e50:	89 81       	ldd	r24, Y+1	; 0x01
    5e52:	f9 01       	movw	r30, r18
    5e54:	09 95       	icall
	#endif
}
    5e56:	00 00       	nop
    5e58:	0f 90       	pop	r0
    5e5a:	0f 90       	pop	r0
    5e5c:	0f 90       	pop	r0
    5e5e:	0f 90       	pop	r0
    5e60:	0f 90       	pop	r0
    5e62:	df 91       	pop	r29
    5e64:	cf 91       	pop	r28
    5e66:	08 95       	ret

00005e68 <__udivmodhi4>:
    5e68:	aa 1b       	sub	r26, r26
    5e6a:	bb 1b       	sub	r27, r27
    5e6c:	51 e1       	ldi	r21, 0x11	; 17
    5e6e:	07 c0       	rjmp	.+14     	; 0x5e7e <__udivmodhi4_ep>

00005e70 <__udivmodhi4_loop>:
    5e70:	aa 1f       	adc	r26, r26
    5e72:	bb 1f       	adc	r27, r27
    5e74:	a6 17       	cp	r26, r22
    5e76:	b7 07       	cpc	r27, r23
    5e78:	10 f0       	brcs	.+4      	; 0x5e7e <__udivmodhi4_ep>
    5e7a:	a6 1b       	sub	r26, r22
    5e7c:	b7 0b       	sbc	r27, r23

00005e7e <__udivmodhi4_ep>:
    5e7e:	88 1f       	adc	r24, r24
    5e80:	99 1f       	adc	r25, r25
    5e82:	5a 95       	dec	r21
    5e84:	a9 f7       	brne	.-22     	; 0x5e70 <__udivmodhi4_loop>
    5e86:	80 95       	com	r24
    5e88:	90 95       	com	r25
    5e8a:	bc 01       	movw	r22, r24
    5e8c:	cd 01       	movw	r24, r26
    5e8e:	08 95       	ret

00005e90 <__divmodhi4>:
    5e90:	97 fb       	bst	r25, 7
    5e92:	07 2e       	mov	r0, r23
    5e94:	16 f4       	brtc	.+4      	; 0x5e9a <__divmodhi4+0xa>
    5e96:	00 94       	com	r0
    5e98:	07 d0       	rcall	.+14     	; 0x5ea8 <__divmodhi4_neg1>
    5e9a:	77 fd       	sbrc	r23, 7
    5e9c:	09 d0       	rcall	.+18     	; 0x5eb0 <__divmodhi4_neg2>
    5e9e:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__udivmodhi4>
    5ea2:	07 fc       	sbrc	r0, 7
    5ea4:	05 d0       	rcall	.+10     	; 0x5eb0 <__divmodhi4_neg2>
    5ea6:	3e f4       	brtc	.+14     	; 0x5eb6 <__divmodhi4_exit>

00005ea8 <__divmodhi4_neg1>:
    5ea8:	90 95       	com	r25
    5eaa:	81 95       	neg	r24
    5eac:	9f 4f       	sbci	r25, 0xFF	; 255
    5eae:	08 95       	ret

00005eb0 <__divmodhi4_neg2>:
    5eb0:	70 95       	com	r23
    5eb2:	61 95       	neg	r22
    5eb4:	7f 4f       	sbci	r23, 0xFF	; 255

00005eb6 <__divmodhi4_exit>:
    5eb6:	08 95       	ret

00005eb8 <__udivmodsi4>:
    5eb8:	a1 e2       	ldi	r26, 0x21	; 33
    5eba:	1a 2e       	mov	r1, r26
    5ebc:	aa 1b       	sub	r26, r26
    5ebe:	bb 1b       	sub	r27, r27
    5ec0:	fd 01       	movw	r30, r26
    5ec2:	0d c0       	rjmp	.+26     	; 0x5ede <__udivmodsi4_ep>

00005ec4 <__udivmodsi4_loop>:
    5ec4:	aa 1f       	adc	r26, r26
    5ec6:	bb 1f       	adc	r27, r27
    5ec8:	ee 1f       	adc	r30, r30
    5eca:	ff 1f       	adc	r31, r31
    5ecc:	a2 17       	cp	r26, r18
    5ece:	b3 07       	cpc	r27, r19
    5ed0:	e4 07       	cpc	r30, r20
    5ed2:	f5 07       	cpc	r31, r21
    5ed4:	20 f0       	brcs	.+8      	; 0x5ede <__udivmodsi4_ep>
    5ed6:	a2 1b       	sub	r26, r18
    5ed8:	b3 0b       	sbc	r27, r19
    5eda:	e4 0b       	sbc	r30, r20
    5edc:	f5 0b       	sbc	r31, r21

00005ede <__udivmodsi4_ep>:
    5ede:	66 1f       	adc	r22, r22
    5ee0:	77 1f       	adc	r23, r23
    5ee2:	88 1f       	adc	r24, r24
    5ee4:	99 1f       	adc	r25, r25
    5ee6:	1a 94       	dec	r1
    5ee8:	69 f7       	brne	.-38     	; 0x5ec4 <__udivmodsi4_loop>
    5eea:	60 95       	com	r22
    5eec:	70 95       	com	r23
    5eee:	80 95       	com	r24
    5ef0:	90 95       	com	r25
    5ef2:	9b 01       	movw	r18, r22
    5ef4:	ac 01       	movw	r20, r24
    5ef6:	bd 01       	movw	r22, r26
    5ef8:	cf 01       	movw	r24, r30
    5efa:	08 95       	ret

00005efc <__moddi3>:
    5efc:	68 94       	set
    5efe:	01 c0       	rjmp	.+2      	; 0x5f02 <__divdi3_moddi3>

00005f00 <__divdi3>:
    5f00:	e8 94       	clt

00005f02 <__divdi3_moddi3>:
    5f02:	f9 2f       	mov	r31, r25
    5f04:	f1 2b       	or	r31, r17
    5f06:	12 f0       	brmi	.+4      	; 0x5f0c <__divdi3_moddi3+0xa>
    5f08:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <__udivdi3_umoddi3>
    5f0c:	a0 e0       	ldi	r26, 0x00	; 0
    5f0e:	b0 e0       	ldi	r27, 0x00	; 0
    5f10:	ec e8       	ldi	r30, 0x8C	; 140
    5f12:	ff e2       	ldi	r31, 0x2F	; 47
    5f14:	0c 94 24 30 	jmp	0x6048	; 0x6048 <__prologue_saves__+0xc>
    5f18:	09 2e       	mov	r0, r25
    5f1a:	05 94       	asr	r0
    5f1c:	22 f4       	brpl	.+8      	; 0x5f26 <__divdi3_moddi3+0x24>
    5f1e:	0e 94 0e 30 	call	0x601c	; 0x601c <__negdi2>
    5f22:	11 23       	and	r17, r17
    5f24:	92 f4       	brpl	.+36     	; 0x5f4a <__divdi3_moddi3+0x48>
    5f26:	f0 e8       	ldi	r31, 0x80	; 128
    5f28:	0f 26       	eor	r0, r31
    5f2a:	ff ef       	ldi	r31, 0xFF	; 255
    5f2c:	e0 94       	com	r14
    5f2e:	f0 94       	com	r15
    5f30:	00 95       	com	r16
    5f32:	10 95       	com	r17
    5f34:	b0 94       	com	r11
    5f36:	c0 94       	com	r12
    5f38:	d0 94       	com	r13
    5f3a:	a1 94       	neg	r10
    5f3c:	bf 0a       	sbc	r11, r31
    5f3e:	cf 0a       	sbc	r12, r31
    5f40:	df 0a       	sbc	r13, r31
    5f42:	ef 0a       	sbc	r14, r31
    5f44:	ff 0a       	sbc	r15, r31
    5f46:	0f 0b       	sbc	r16, r31
    5f48:	1f 0b       	sbc	r17, r31
    5f4a:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__udivmod64>
    5f4e:	07 fc       	sbrc	r0, 7
    5f50:	0e 94 0e 30 	call	0x601c	; 0x601c <__negdi2>
    5f54:	cd b7       	in	r28, 0x3d	; 61
    5f56:	de b7       	in	r29, 0x3e	; 62
    5f58:	ec e0       	ldi	r30, 0x0C	; 12
    5f5a:	0c 94 40 30 	jmp	0x6080	; 0x6080 <__epilogue_restores__+0xc>

00005f5e <__umoddi3>:
    5f5e:	68 94       	set
    5f60:	01 c0       	rjmp	.+2      	; 0x5f64 <__udivdi3_umoddi3>

00005f62 <__udivdi3>:
    5f62:	e8 94       	clt

00005f64 <__udivdi3_umoddi3>:
    5f64:	8f 92       	push	r8
    5f66:	9f 92       	push	r9
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__udivmod64>
    5f70:	df 91       	pop	r29
    5f72:	cf 91       	pop	r28
    5f74:	9f 90       	pop	r9
    5f76:	8f 90       	pop	r8
    5f78:	08 95       	ret

00005f7a <__udivmod64>:
    5f7a:	88 24       	eor	r8, r8
    5f7c:	99 24       	eor	r9, r9
    5f7e:	f4 01       	movw	r30, r8
    5f80:	e4 01       	movw	r28, r8
    5f82:	b0 e4       	ldi	r27, 0x40	; 64
    5f84:	9f 93       	push	r25
    5f86:	aa 27       	eor	r26, r26
    5f88:	9a 15       	cp	r25, r10
    5f8a:	8b 04       	cpc	r8, r11
    5f8c:	9c 04       	cpc	r9, r12
    5f8e:	ed 05       	cpc	r30, r13
    5f90:	fe 05       	cpc	r31, r14
    5f92:	cf 05       	cpc	r28, r15
    5f94:	d0 07       	cpc	r29, r16
    5f96:	a1 07       	cpc	r26, r17
    5f98:	98 f4       	brcc	.+38     	; 0x5fc0 <__udivmod64+0x46>
    5f9a:	ad 2f       	mov	r26, r29
    5f9c:	dc 2f       	mov	r29, r28
    5f9e:	cf 2f       	mov	r28, r31
    5fa0:	fe 2f       	mov	r31, r30
    5fa2:	e9 2d       	mov	r30, r9
    5fa4:	98 2c       	mov	r9, r8
    5fa6:	89 2e       	mov	r8, r25
    5fa8:	98 2f       	mov	r25, r24
    5faa:	87 2f       	mov	r24, r23
    5fac:	76 2f       	mov	r23, r22
    5fae:	65 2f       	mov	r22, r21
    5fb0:	54 2f       	mov	r21, r20
    5fb2:	43 2f       	mov	r20, r19
    5fb4:	32 2f       	mov	r19, r18
    5fb6:	22 27       	eor	r18, r18
    5fb8:	b8 50       	subi	r27, 0x08	; 8
    5fba:	31 f7       	brne	.-52     	; 0x5f88 <__udivmod64+0xe>
    5fbc:	bf 91       	pop	r27
    5fbe:	27 c0       	rjmp	.+78     	; 0x600e <__udivmod64+0x94>
    5fc0:	1b 2e       	mov	r1, r27
    5fc2:	bf 91       	pop	r27
    5fc4:	bb 27       	eor	r27, r27
    5fc6:	22 0f       	add	r18, r18
    5fc8:	33 1f       	adc	r19, r19
    5fca:	44 1f       	adc	r20, r20
    5fcc:	55 1f       	adc	r21, r21
    5fce:	66 1f       	adc	r22, r22
    5fd0:	77 1f       	adc	r23, r23
    5fd2:	88 1f       	adc	r24, r24
    5fd4:	99 1f       	adc	r25, r25
    5fd6:	88 1c       	adc	r8, r8
    5fd8:	99 1c       	adc	r9, r9
    5fda:	ee 1f       	adc	r30, r30
    5fdc:	ff 1f       	adc	r31, r31
    5fde:	cc 1f       	adc	r28, r28
    5fe0:	dd 1f       	adc	r29, r29
    5fe2:	aa 1f       	adc	r26, r26
    5fe4:	bb 1f       	adc	r27, r27
    5fe6:	8a 14       	cp	r8, r10
    5fe8:	9b 04       	cpc	r9, r11
    5fea:	ec 05       	cpc	r30, r12
    5fec:	fd 05       	cpc	r31, r13
    5fee:	ce 05       	cpc	r28, r14
    5ff0:	df 05       	cpc	r29, r15
    5ff2:	a0 07       	cpc	r26, r16
    5ff4:	b1 07       	cpc	r27, r17
    5ff6:	48 f0       	brcs	.+18     	; 0x600a <__udivmod64+0x90>
    5ff8:	8a 18       	sub	r8, r10
    5ffa:	9b 08       	sbc	r9, r11
    5ffc:	ec 09       	sbc	r30, r12
    5ffe:	fd 09       	sbc	r31, r13
    6000:	ce 09       	sbc	r28, r14
    6002:	df 09       	sbc	r29, r15
    6004:	a0 0b       	sbc	r26, r16
    6006:	b1 0b       	sbc	r27, r17
    6008:	21 60       	ori	r18, 0x01	; 1
    600a:	1a 94       	dec	r1
    600c:	e1 f6       	brne	.-72     	; 0x5fc6 <__udivmod64+0x4c>
    600e:	2e f4       	brtc	.+10     	; 0x601a <__udivmod64+0xa0>
    6010:	94 01       	movw	r18, r8
    6012:	af 01       	movw	r20, r30
    6014:	be 01       	movw	r22, r28
    6016:	cd 01       	movw	r24, r26
    6018:	00 0c       	add	r0, r0
    601a:	08 95       	ret

0000601c <__negdi2>:
    601c:	60 95       	com	r22
    601e:	70 95       	com	r23
    6020:	80 95       	com	r24
    6022:	90 95       	com	r25
    6024:	30 95       	com	r19
    6026:	40 95       	com	r20
    6028:	50 95       	com	r21
    602a:	21 95       	neg	r18
    602c:	3f 4f       	sbci	r19, 0xFF	; 255
    602e:	4f 4f       	sbci	r20, 0xFF	; 255
    6030:	5f 4f       	sbci	r21, 0xFF	; 255
    6032:	6f 4f       	sbci	r22, 0xFF	; 255
    6034:	7f 4f       	sbci	r23, 0xFF	; 255
    6036:	8f 4f       	sbci	r24, 0xFF	; 255
    6038:	9f 4f       	sbci	r25, 0xFF	; 255
    603a:	08 95       	ret

0000603c <__prologue_saves__>:
    603c:	2f 92       	push	r2
    603e:	3f 92       	push	r3
    6040:	4f 92       	push	r4
    6042:	5f 92       	push	r5
    6044:	6f 92       	push	r6
    6046:	7f 92       	push	r7
    6048:	8f 92       	push	r8
    604a:	9f 92       	push	r9
    604c:	af 92       	push	r10
    604e:	bf 92       	push	r11
    6050:	cf 92       	push	r12
    6052:	df 92       	push	r13
    6054:	ef 92       	push	r14
    6056:	ff 92       	push	r15
    6058:	0f 93       	push	r16
    605a:	1f 93       	push	r17
    605c:	cf 93       	push	r28
    605e:	df 93       	push	r29
    6060:	cd b7       	in	r28, 0x3d	; 61
    6062:	de b7       	in	r29, 0x3e	; 62
    6064:	ca 1b       	sub	r28, r26
    6066:	db 0b       	sbc	r29, r27
    6068:	0f b6       	in	r0, 0x3f	; 63
    606a:	f8 94       	cli
    606c:	de bf       	out	0x3e, r29	; 62
    606e:	0f be       	out	0x3f, r0	; 63
    6070:	cd bf       	out	0x3d, r28	; 61
    6072:	09 94       	ijmp

00006074 <__epilogue_restores__>:
    6074:	2a 88       	ldd	r2, Y+18	; 0x12
    6076:	39 88       	ldd	r3, Y+17	; 0x11
    6078:	48 88       	ldd	r4, Y+16	; 0x10
    607a:	5f 84       	ldd	r5, Y+15	; 0x0f
    607c:	6e 84       	ldd	r6, Y+14	; 0x0e
    607e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6080:	8c 84       	ldd	r8, Y+12	; 0x0c
    6082:	9b 84       	ldd	r9, Y+11	; 0x0b
    6084:	aa 84       	ldd	r10, Y+10	; 0x0a
    6086:	b9 84       	ldd	r11, Y+9	; 0x09
    6088:	c8 84       	ldd	r12, Y+8	; 0x08
    608a:	df 80       	ldd	r13, Y+7	; 0x07
    608c:	ee 80       	ldd	r14, Y+6	; 0x06
    608e:	fd 80       	ldd	r15, Y+5	; 0x05
    6090:	0c 81       	ldd	r16, Y+4	; 0x04
    6092:	1b 81       	ldd	r17, Y+3	; 0x03
    6094:	aa 81       	ldd	r26, Y+2	; 0x02
    6096:	b9 81       	ldd	r27, Y+1	; 0x01
    6098:	ce 0f       	add	r28, r30
    609a:	d1 1d       	adc	r29, r1
    609c:	0f b6       	in	r0, 0x3f	; 63
    609e:	f8 94       	cli
    60a0:	de bf       	out	0x3e, r29	; 62
    60a2:	0f be       	out	0x3f, r0	; 63
    60a4:	cd bf       	out	0x3d, r28	; 61
    60a6:	ed 01       	movw	r28, r26
    60a8:	08 95       	ret

000060aa <__ashldi3>:
    60aa:	0f 93       	push	r16
    60ac:	08 30       	cpi	r16, 0x08	; 8
    60ae:	90 f0       	brcs	.+36     	; 0x60d4 <__ashldi3+0x2a>
    60b0:	98 2f       	mov	r25, r24
    60b2:	87 2f       	mov	r24, r23
    60b4:	76 2f       	mov	r23, r22
    60b6:	65 2f       	mov	r22, r21
    60b8:	54 2f       	mov	r21, r20
    60ba:	43 2f       	mov	r20, r19
    60bc:	32 2f       	mov	r19, r18
    60be:	22 27       	eor	r18, r18
    60c0:	08 50       	subi	r16, 0x08	; 8
    60c2:	f4 cf       	rjmp	.-24     	; 0x60ac <__ashldi3+0x2>
    60c4:	22 0f       	add	r18, r18
    60c6:	33 1f       	adc	r19, r19
    60c8:	44 1f       	adc	r20, r20
    60ca:	55 1f       	adc	r21, r21
    60cc:	66 1f       	adc	r22, r22
    60ce:	77 1f       	adc	r23, r23
    60d0:	88 1f       	adc	r24, r24
    60d2:	99 1f       	adc	r25, r25
    60d4:	0a 95       	dec	r16
    60d6:	b2 f7       	brpl	.-20     	; 0x60c4 <__ashldi3+0x1a>
    60d8:	0f 91       	pop	r16
    60da:	08 95       	ret

000060dc <__ashrdi3>:
    60dc:	97 fb       	bst	r25, 7
    60de:	10 f8       	bld	r1, 0

000060e0 <__lshrdi3>:
    60e0:	16 94       	lsr	r1
    60e2:	00 08       	sbc	r0, r0
    60e4:	0f 93       	push	r16
    60e6:	08 30       	cpi	r16, 0x08	; 8
    60e8:	98 f0       	brcs	.+38     	; 0x6110 <__lshrdi3+0x30>
    60ea:	08 50       	subi	r16, 0x08	; 8
    60ec:	23 2f       	mov	r18, r19
    60ee:	34 2f       	mov	r19, r20
    60f0:	45 2f       	mov	r20, r21
    60f2:	56 2f       	mov	r21, r22
    60f4:	67 2f       	mov	r22, r23
    60f6:	78 2f       	mov	r23, r24
    60f8:	89 2f       	mov	r24, r25
    60fa:	90 2d       	mov	r25, r0
    60fc:	f4 cf       	rjmp	.-24     	; 0x60e6 <__lshrdi3+0x6>
    60fe:	05 94       	asr	r0
    6100:	97 95       	ror	r25
    6102:	87 95       	ror	r24
    6104:	77 95       	ror	r23
    6106:	67 95       	ror	r22
    6108:	57 95       	ror	r21
    610a:	47 95       	ror	r20
    610c:	37 95       	ror	r19
    610e:	27 95       	ror	r18
    6110:	0a 95       	dec	r16
    6112:	aa f7       	brpl	.-22     	; 0x60fe <__lshrdi3+0x1e>
    6114:	0f 91       	pop	r16
    6116:	08 95       	ret

00006118 <__adddi3>:
    6118:	2a 0d       	add	r18, r10
    611a:	3b 1d       	adc	r19, r11
    611c:	4c 1d       	adc	r20, r12
    611e:	5d 1d       	adc	r21, r13
    6120:	6e 1d       	adc	r22, r14
    6122:	7f 1d       	adc	r23, r15
    6124:	80 1f       	adc	r24, r16
    6126:	91 1f       	adc	r25, r17
    6128:	08 95       	ret

0000612a <__adddi3_s8>:
    612a:	00 24       	eor	r0, r0
    612c:	a7 fd       	sbrc	r26, 7
    612e:	00 94       	com	r0
    6130:	2a 0f       	add	r18, r26
    6132:	30 1d       	adc	r19, r0
    6134:	40 1d       	adc	r20, r0
    6136:	50 1d       	adc	r21, r0
    6138:	60 1d       	adc	r22, r0
    613a:	70 1d       	adc	r23, r0
    613c:	80 1d       	adc	r24, r0
    613e:	90 1d       	adc	r25, r0
    6140:	08 95       	ret

00006142 <__subdi3>:
    6142:	2a 19       	sub	r18, r10
    6144:	3b 09       	sbc	r19, r11
    6146:	4c 09       	sbc	r20, r12
    6148:	5d 09       	sbc	r21, r13
    614a:	6e 09       	sbc	r22, r14
    614c:	7f 09       	sbc	r23, r15
    614e:	80 0b       	sbc	r24, r16
    6150:	91 0b       	sbc	r25, r17
    6152:	08 95       	ret

00006154 <__cmpdi2>:
    6154:	2a 15       	cp	r18, r10
    6156:	3b 05       	cpc	r19, r11
    6158:	4c 05       	cpc	r20, r12
    615a:	5d 05       	cpc	r21, r13
    615c:	6e 05       	cpc	r22, r14
    615e:	7f 05       	cpc	r23, r15
    6160:	80 07       	cpc	r24, r16
    6162:	91 07       	cpc	r25, r17
    6164:	08 95       	ret

00006166 <__cmpdi2_s8>:
    6166:	00 24       	eor	r0, r0
    6168:	a7 fd       	sbrc	r26, 7
    616a:	00 94       	com	r0
    616c:	2a 17       	cp	r18, r26
    616e:	30 05       	cpc	r19, r0
    6170:	40 05       	cpc	r20, r0
    6172:	50 05       	cpc	r21, r0
    6174:	60 05       	cpc	r22, r0
    6176:	70 05       	cpc	r23, r0
    6178:	80 05       	cpc	r24, r0
    617a:	90 05       	cpc	r25, r0
    617c:	08 95       	ret

0000617e <strlen>:
    617e:	fc 01       	movw	r30, r24
    6180:	01 90       	ld	r0, Z+
    6182:	00 20       	and	r0, r0
    6184:	e9 f7       	brne	.-6      	; 0x6180 <strlen+0x2>
    6186:	80 95       	com	r24
    6188:	90 95       	com	r25
    618a:	8e 0f       	add	r24, r30
    618c:	9f 1f       	adc	r25, r31
    618e:	08 95       	ret

00006190 <sprintf>:
    6190:	ae e0       	ldi	r26, 0x0E	; 14
    6192:	b0 e0       	ldi	r27, 0x00	; 0
    6194:	ee ec       	ldi	r30, 0xCE	; 206
    6196:	f0 e3       	ldi	r31, 0x30	; 48
    6198:	0c 94 2c 30 	jmp	0x6058	; 0x6058 <__prologue_saves__+0x1c>
    619c:	0d 89       	ldd	r16, Y+21	; 0x15
    619e:	1e 89       	ldd	r17, Y+22	; 0x16
    61a0:	86 e0       	ldi	r24, 0x06	; 6
    61a2:	8c 83       	std	Y+4, r24	; 0x04
    61a4:	1a 83       	std	Y+2, r17	; 0x02
    61a6:	09 83       	std	Y+1, r16	; 0x01
    61a8:	8f ef       	ldi	r24, 0xFF	; 255
    61aa:	9f e7       	ldi	r25, 0x7F	; 127
    61ac:	9e 83       	std	Y+6, r25	; 0x06
    61ae:	8d 83       	std	Y+5, r24	; 0x05
    61b0:	ae 01       	movw	r20, r28
    61b2:	47 5e       	subi	r20, 0xE7	; 231
    61b4:	5f 4f       	sbci	r21, 0xFF	; 255
    61b6:	6f 89       	ldd	r22, Y+23	; 0x17
    61b8:	78 8d       	ldd	r23, Y+24	; 0x18
    61ba:	ce 01       	movw	r24, r28
    61bc:	01 96       	adiw	r24, 0x01	; 1
    61be:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <vfprintf>
    61c2:	ef 81       	ldd	r30, Y+7	; 0x07
    61c4:	f8 85       	ldd	r31, Y+8	; 0x08
    61c6:	e0 0f       	add	r30, r16
    61c8:	f1 1f       	adc	r31, r17
    61ca:	10 82       	st	Z, r1
    61cc:	2e 96       	adiw	r28, 0x0e	; 14
    61ce:	e4 e0       	ldi	r30, 0x04	; 4
    61d0:	0c 94 48 30 	jmp	0x6090	; 0x6090 <__epilogue_restores__+0x1c>

000061d4 <vfprintf>:
    61d4:	ab e0       	ldi	r26, 0x0B	; 11
    61d6:	b0 e0       	ldi	r27, 0x00	; 0
    61d8:	e0 ef       	ldi	r30, 0xF0	; 240
    61da:	f0 e3       	ldi	r31, 0x30	; 48
    61dc:	0c 94 1e 30 	jmp	0x603c	; 0x603c <__prologue_saves__>
    61e0:	6c 01       	movw	r12, r24
    61e2:	7b 01       	movw	r14, r22
    61e4:	8a 01       	movw	r16, r20
    61e6:	fc 01       	movw	r30, r24
    61e8:	17 82       	std	Z+7, r1	; 0x07
    61ea:	16 82       	std	Z+6, r1	; 0x06
    61ec:	83 81       	ldd	r24, Z+3	; 0x03
    61ee:	81 ff       	sbrs	r24, 1
    61f0:	cc c1       	rjmp	.+920    	; 0x658a <vfprintf+0x3b6>
    61f2:	ce 01       	movw	r24, r28
    61f4:	01 96       	adiw	r24, 0x01	; 1
    61f6:	3c 01       	movw	r6, r24
    61f8:	f6 01       	movw	r30, r12
    61fa:	93 81       	ldd	r25, Z+3	; 0x03
    61fc:	f7 01       	movw	r30, r14
    61fe:	93 fd       	sbrc	r25, 3
    6200:	85 91       	lpm	r24, Z+
    6202:	93 ff       	sbrs	r25, 3
    6204:	81 91       	ld	r24, Z+
    6206:	7f 01       	movw	r14, r30
    6208:	88 23       	and	r24, r24
    620a:	09 f4       	brne	.+2      	; 0x620e <vfprintf+0x3a>
    620c:	ba c1       	rjmp	.+884    	; 0x6582 <vfprintf+0x3ae>
    620e:	85 32       	cpi	r24, 0x25	; 37
    6210:	39 f4       	brne	.+14     	; 0x6220 <vfprintf+0x4c>
    6212:	93 fd       	sbrc	r25, 3
    6214:	85 91       	lpm	r24, Z+
    6216:	93 ff       	sbrs	r25, 3
    6218:	81 91       	ld	r24, Z+
    621a:	7f 01       	movw	r14, r30
    621c:	85 32       	cpi	r24, 0x25	; 37
    621e:	29 f4       	brne	.+10     	; 0x622a <vfprintf+0x56>
    6220:	b6 01       	movw	r22, r12
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    6228:	e7 cf       	rjmp	.-50     	; 0x61f8 <vfprintf+0x24>
    622a:	91 2c       	mov	r9, r1
    622c:	21 2c       	mov	r2, r1
    622e:	31 2c       	mov	r3, r1
    6230:	ff e1       	ldi	r31, 0x1F	; 31
    6232:	f3 15       	cp	r31, r3
    6234:	d8 f0       	brcs	.+54     	; 0x626c <vfprintf+0x98>
    6236:	8b 32       	cpi	r24, 0x2B	; 43
    6238:	79 f0       	breq	.+30     	; 0x6258 <vfprintf+0x84>
    623a:	38 f4       	brcc	.+14     	; 0x624a <vfprintf+0x76>
    623c:	80 32       	cpi	r24, 0x20	; 32
    623e:	79 f0       	breq	.+30     	; 0x625e <vfprintf+0x8a>
    6240:	83 32       	cpi	r24, 0x23	; 35
    6242:	a1 f4       	brne	.+40     	; 0x626c <vfprintf+0x98>
    6244:	23 2d       	mov	r18, r3
    6246:	20 61       	ori	r18, 0x10	; 16
    6248:	1d c0       	rjmp	.+58     	; 0x6284 <vfprintf+0xb0>
    624a:	8d 32       	cpi	r24, 0x2D	; 45
    624c:	61 f0       	breq	.+24     	; 0x6266 <vfprintf+0x92>
    624e:	80 33       	cpi	r24, 0x30	; 48
    6250:	69 f4       	brne	.+26     	; 0x626c <vfprintf+0x98>
    6252:	23 2d       	mov	r18, r3
    6254:	21 60       	ori	r18, 0x01	; 1
    6256:	16 c0       	rjmp	.+44     	; 0x6284 <vfprintf+0xb0>
    6258:	83 2d       	mov	r24, r3
    625a:	82 60       	ori	r24, 0x02	; 2
    625c:	38 2e       	mov	r3, r24
    625e:	e3 2d       	mov	r30, r3
    6260:	e4 60       	ori	r30, 0x04	; 4
    6262:	3e 2e       	mov	r3, r30
    6264:	2a c0       	rjmp	.+84     	; 0x62ba <vfprintf+0xe6>
    6266:	f3 2d       	mov	r31, r3
    6268:	f8 60       	ori	r31, 0x08	; 8
    626a:	1d c0       	rjmp	.+58     	; 0x62a6 <vfprintf+0xd2>
    626c:	37 fc       	sbrc	r3, 7
    626e:	2d c0       	rjmp	.+90     	; 0x62ca <vfprintf+0xf6>
    6270:	20 ed       	ldi	r18, 0xD0	; 208
    6272:	28 0f       	add	r18, r24
    6274:	2a 30       	cpi	r18, 0x0A	; 10
    6276:	40 f0       	brcs	.+16     	; 0x6288 <vfprintf+0xb4>
    6278:	8e 32       	cpi	r24, 0x2E	; 46
    627a:	b9 f4       	brne	.+46     	; 0x62aa <vfprintf+0xd6>
    627c:	36 fc       	sbrc	r3, 6
    627e:	81 c1       	rjmp	.+770    	; 0x6582 <vfprintf+0x3ae>
    6280:	23 2d       	mov	r18, r3
    6282:	20 64       	ori	r18, 0x40	; 64
    6284:	32 2e       	mov	r3, r18
    6286:	19 c0       	rjmp	.+50     	; 0x62ba <vfprintf+0xe6>
    6288:	36 fe       	sbrs	r3, 6
    628a:	06 c0       	rjmp	.+12     	; 0x6298 <vfprintf+0xc4>
    628c:	8a e0       	ldi	r24, 0x0A	; 10
    628e:	98 9e       	mul	r9, r24
    6290:	20 0d       	add	r18, r0
    6292:	11 24       	eor	r1, r1
    6294:	92 2e       	mov	r9, r18
    6296:	11 c0       	rjmp	.+34     	; 0x62ba <vfprintf+0xe6>
    6298:	ea e0       	ldi	r30, 0x0A	; 10
    629a:	2e 9e       	mul	r2, r30
    629c:	20 0d       	add	r18, r0
    629e:	11 24       	eor	r1, r1
    62a0:	22 2e       	mov	r2, r18
    62a2:	f3 2d       	mov	r31, r3
    62a4:	f0 62       	ori	r31, 0x20	; 32
    62a6:	3f 2e       	mov	r3, r31
    62a8:	08 c0       	rjmp	.+16     	; 0x62ba <vfprintf+0xe6>
    62aa:	8c 36       	cpi	r24, 0x6C	; 108
    62ac:	21 f4       	brne	.+8      	; 0x62b6 <vfprintf+0xe2>
    62ae:	83 2d       	mov	r24, r3
    62b0:	80 68       	ori	r24, 0x80	; 128
    62b2:	38 2e       	mov	r3, r24
    62b4:	02 c0       	rjmp	.+4      	; 0x62ba <vfprintf+0xe6>
    62b6:	88 36       	cpi	r24, 0x68	; 104
    62b8:	41 f4       	brne	.+16     	; 0x62ca <vfprintf+0xf6>
    62ba:	f7 01       	movw	r30, r14
    62bc:	93 fd       	sbrc	r25, 3
    62be:	85 91       	lpm	r24, Z+
    62c0:	93 ff       	sbrs	r25, 3
    62c2:	81 91       	ld	r24, Z+
    62c4:	7f 01       	movw	r14, r30
    62c6:	81 11       	cpse	r24, r1
    62c8:	b3 cf       	rjmp	.-154    	; 0x6230 <vfprintf+0x5c>
    62ca:	98 2f       	mov	r25, r24
    62cc:	9f 7d       	andi	r25, 0xDF	; 223
    62ce:	95 54       	subi	r25, 0x45	; 69
    62d0:	93 30       	cpi	r25, 0x03	; 3
    62d2:	28 f4       	brcc	.+10     	; 0x62de <vfprintf+0x10a>
    62d4:	0c 5f       	subi	r16, 0xFC	; 252
    62d6:	1f 4f       	sbci	r17, 0xFF	; 255
    62d8:	9f e3       	ldi	r25, 0x3F	; 63
    62da:	99 83       	std	Y+1, r25	; 0x01
    62dc:	0d c0       	rjmp	.+26     	; 0x62f8 <vfprintf+0x124>
    62de:	83 36       	cpi	r24, 0x63	; 99
    62e0:	31 f0       	breq	.+12     	; 0x62ee <vfprintf+0x11a>
    62e2:	83 37       	cpi	r24, 0x73	; 115
    62e4:	71 f0       	breq	.+28     	; 0x6302 <vfprintf+0x12e>
    62e6:	83 35       	cpi	r24, 0x53	; 83
    62e8:	09 f0       	breq	.+2      	; 0x62ec <vfprintf+0x118>
    62ea:	59 c0       	rjmp	.+178    	; 0x639e <vfprintf+0x1ca>
    62ec:	21 c0       	rjmp	.+66     	; 0x6330 <vfprintf+0x15c>
    62ee:	f8 01       	movw	r30, r16
    62f0:	80 81       	ld	r24, Z
    62f2:	89 83       	std	Y+1, r24	; 0x01
    62f4:	0e 5f       	subi	r16, 0xFE	; 254
    62f6:	1f 4f       	sbci	r17, 0xFF	; 255
    62f8:	88 24       	eor	r8, r8
    62fa:	83 94       	inc	r8
    62fc:	91 2c       	mov	r9, r1
    62fe:	53 01       	movw	r10, r6
    6300:	13 c0       	rjmp	.+38     	; 0x6328 <vfprintf+0x154>
    6302:	28 01       	movw	r4, r16
    6304:	f2 e0       	ldi	r31, 0x02	; 2
    6306:	4f 0e       	add	r4, r31
    6308:	51 1c       	adc	r5, r1
    630a:	f8 01       	movw	r30, r16
    630c:	a0 80       	ld	r10, Z
    630e:	b1 80       	ldd	r11, Z+1	; 0x01
    6310:	36 fe       	sbrs	r3, 6
    6312:	03 c0       	rjmp	.+6      	; 0x631a <vfprintf+0x146>
    6314:	69 2d       	mov	r22, r9
    6316:	70 e0       	ldi	r23, 0x00	; 0
    6318:	02 c0       	rjmp	.+4      	; 0x631e <vfprintf+0x14a>
    631a:	6f ef       	ldi	r22, 0xFF	; 255
    631c:	7f ef       	ldi	r23, 0xFF	; 255
    631e:	c5 01       	movw	r24, r10
    6320:	0e 94 d6 32 	call	0x65ac	; 0x65ac <strnlen>
    6324:	4c 01       	movw	r8, r24
    6326:	82 01       	movw	r16, r4
    6328:	f3 2d       	mov	r31, r3
    632a:	ff 77       	andi	r31, 0x7F	; 127
    632c:	3f 2e       	mov	r3, r31
    632e:	16 c0       	rjmp	.+44     	; 0x635c <vfprintf+0x188>
    6330:	28 01       	movw	r4, r16
    6332:	22 e0       	ldi	r18, 0x02	; 2
    6334:	42 0e       	add	r4, r18
    6336:	51 1c       	adc	r5, r1
    6338:	f8 01       	movw	r30, r16
    633a:	a0 80       	ld	r10, Z
    633c:	b1 80       	ldd	r11, Z+1	; 0x01
    633e:	36 fe       	sbrs	r3, 6
    6340:	03 c0       	rjmp	.+6      	; 0x6348 <vfprintf+0x174>
    6342:	69 2d       	mov	r22, r9
    6344:	70 e0       	ldi	r23, 0x00	; 0
    6346:	02 c0       	rjmp	.+4      	; 0x634c <vfprintf+0x178>
    6348:	6f ef       	ldi	r22, 0xFF	; 255
    634a:	7f ef       	ldi	r23, 0xFF	; 255
    634c:	c5 01       	movw	r24, r10
    634e:	0e 94 cb 32 	call	0x6596	; 0x6596 <strnlen_P>
    6352:	4c 01       	movw	r8, r24
    6354:	f3 2d       	mov	r31, r3
    6356:	f0 68       	ori	r31, 0x80	; 128
    6358:	3f 2e       	mov	r3, r31
    635a:	82 01       	movw	r16, r4
    635c:	33 fc       	sbrc	r3, 3
    635e:	1b c0       	rjmp	.+54     	; 0x6396 <vfprintf+0x1c2>
    6360:	82 2d       	mov	r24, r2
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	88 16       	cp	r8, r24
    6366:	99 06       	cpc	r9, r25
    6368:	b0 f4       	brcc	.+44     	; 0x6396 <vfprintf+0x1c2>
    636a:	b6 01       	movw	r22, r12
    636c:	80 e2       	ldi	r24, 0x20	; 32
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    6374:	2a 94       	dec	r2
    6376:	f4 cf       	rjmp	.-24     	; 0x6360 <vfprintf+0x18c>
    6378:	f5 01       	movw	r30, r10
    637a:	37 fc       	sbrc	r3, 7
    637c:	85 91       	lpm	r24, Z+
    637e:	37 fe       	sbrs	r3, 7
    6380:	81 91       	ld	r24, Z+
    6382:	5f 01       	movw	r10, r30
    6384:	b6 01       	movw	r22, r12
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    638c:	21 10       	cpse	r2, r1
    638e:	2a 94       	dec	r2
    6390:	21 e0       	ldi	r18, 0x01	; 1
    6392:	82 1a       	sub	r8, r18
    6394:	91 08       	sbc	r9, r1
    6396:	81 14       	cp	r8, r1
    6398:	91 04       	cpc	r9, r1
    639a:	71 f7       	brne	.-36     	; 0x6378 <vfprintf+0x1a4>
    639c:	e8 c0       	rjmp	.+464    	; 0x656e <vfprintf+0x39a>
    639e:	84 36       	cpi	r24, 0x64	; 100
    63a0:	11 f0       	breq	.+4      	; 0x63a6 <vfprintf+0x1d2>
    63a2:	89 36       	cpi	r24, 0x69	; 105
    63a4:	41 f5       	brne	.+80     	; 0x63f6 <vfprintf+0x222>
    63a6:	f8 01       	movw	r30, r16
    63a8:	37 fe       	sbrs	r3, 7
    63aa:	07 c0       	rjmp	.+14     	; 0x63ba <vfprintf+0x1e6>
    63ac:	60 81       	ld	r22, Z
    63ae:	71 81       	ldd	r23, Z+1	; 0x01
    63b0:	82 81       	ldd	r24, Z+2	; 0x02
    63b2:	93 81       	ldd	r25, Z+3	; 0x03
    63b4:	0c 5f       	subi	r16, 0xFC	; 252
    63b6:	1f 4f       	sbci	r17, 0xFF	; 255
    63b8:	08 c0       	rjmp	.+16     	; 0x63ca <vfprintf+0x1f6>
    63ba:	60 81       	ld	r22, Z
    63bc:	71 81       	ldd	r23, Z+1	; 0x01
    63be:	07 2e       	mov	r0, r23
    63c0:	00 0c       	add	r0, r0
    63c2:	88 0b       	sbc	r24, r24
    63c4:	99 0b       	sbc	r25, r25
    63c6:	0e 5f       	subi	r16, 0xFE	; 254
    63c8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ca:	f3 2d       	mov	r31, r3
    63cc:	ff 76       	andi	r31, 0x6F	; 111
    63ce:	3f 2e       	mov	r3, r31
    63d0:	97 ff       	sbrs	r25, 7
    63d2:	09 c0       	rjmp	.+18     	; 0x63e6 <vfprintf+0x212>
    63d4:	90 95       	com	r25
    63d6:	80 95       	com	r24
    63d8:	70 95       	com	r23
    63da:	61 95       	neg	r22
    63dc:	7f 4f       	sbci	r23, 0xFF	; 255
    63de:	8f 4f       	sbci	r24, 0xFF	; 255
    63e0:	9f 4f       	sbci	r25, 0xFF	; 255
    63e2:	f0 68       	ori	r31, 0x80	; 128
    63e4:	3f 2e       	mov	r3, r31
    63e6:	2a e0       	ldi	r18, 0x0A	; 10
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	a3 01       	movw	r20, r6
    63ec:	0e 94 1d 33 	call	0x663a	; 0x663a <__ultoa_invert>
    63f0:	88 2e       	mov	r8, r24
    63f2:	86 18       	sub	r8, r6
    63f4:	45 c0       	rjmp	.+138    	; 0x6480 <vfprintf+0x2ac>
    63f6:	85 37       	cpi	r24, 0x75	; 117
    63f8:	31 f4       	brne	.+12     	; 0x6406 <vfprintf+0x232>
    63fa:	23 2d       	mov	r18, r3
    63fc:	2f 7e       	andi	r18, 0xEF	; 239
    63fe:	b2 2e       	mov	r11, r18
    6400:	2a e0       	ldi	r18, 0x0A	; 10
    6402:	30 e0       	ldi	r19, 0x00	; 0
    6404:	25 c0       	rjmp	.+74     	; 0x6450 <vfprintf+0x27c>
    6406:	93 2d       	mov	r25, r3
    6408:	99 7f       	andi	r25, 0xF9	; 249
    640a:	b9 2e       	mov	r11, r25
    640c:	8f 36       	cpi	r24, 0x6F	; 111
    640e:	c1 f0       	breq	.+48     	; 0x6440 <vfprintf+0x26c>
    6410:	18 f4       	brcc	.+6      	; 0x6418 <vfprintf+0x244>
    6412:	88 35       	cpi	r24, 0x58	; 88
    6414:	79 f0       	breq	.+30     	; 0x6434 <vfprintf+0x260>
    6416:	b5 c0       	rjmp	.+362    	; 0x6582 <vfprintf+0x3ae>
    6418:	80 37       	cpi	r24, 0x70	; 112
    641a:	19 f0       	breq	.+6      	; 0x6422 <vfprintf+0x24e>
    641c:	88 37       	cpi	r24, 0x78	; 120
    641e:	21 f0       	breq	.+8      	; 0x6428 <vfprintf+0x254>
    6420:	b0 c0       	rjmp	.+352    	; 0x6582 <vfprintf+0x3ae>
    6422:	e9 2f       	mov	r30, r25
    6424:	e0 61       	ori	r30, 0x10	; 16
    6426:	be 2e       	mov	r11, r30
    6428:	b4 fe       	sbrs	r11, 4
    642a:	0d c0       	rjmp	.+26     	; 0x6446 <vfprintf+0x272>
    642c:	fb 2d       	mov	r31, r11
    642e:	f4 60       	ori	r31, 0x04	; 4
    6430:	bf 2e       	mov	r11, r31
    6432:	09 c0       	rjmp	.+18     	; 0x6446 <vfprintf+0x272>
    6434:	34 fe       	sbrs	r3, 4
    6436:	0a c0       	rjmp	.+20     	; 0x644c <vfprintf+0x278>
    6438:	29 2f       	mov	r18, r25
    643a:	26 60       	ori	r18, 0x06	; 6
    643c:	b2 2e       	mov	r11, r18
    643e:	06 c0       	rjmp	.+12     	; 0x644c <vfprintf+0x278>
    6440:	28 e0       	ldi	r18, 0x08	; 8
    6442:	30 e0       	ldi	r19, 0x00	; 0
    6444:	05 c0       	rjmp	.+10     	; 0x6450 <vfprintf+0x27c>
    6446:	20 e1       	ldi	r18, 0x10	; 16
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	02 c0       	rjmp	.+4      	; 0x6450 <vfprintf+0x27c>
    644c:	20 e1       	ldi	r18, 0x10	; 16
    644e:	32 e0       	ldi	r19, 0x02	; 2
    6450:	f8 01       	movw	r30, r16
    6452:	b7 fe       	sbrs	r11, 7
    6454:	07 c0       	rjmp	.+14     	; 0x6464 <vfprintf+0x290>
    6456:	60 81       	ld	r22, Z
    6458:	71 81       	ldd	r23, Z+1	; 0x01
    645a:	82 81       	ldd	r24, Z+2	; 0x02
    645c:	93 81       	ldd	r25, Z+3	; 0x03
    645e:	0c 5f       	subi	r16, 0xFC	; 252
    6460:	1f 4f       	sbci	r17, 0xFF	; 255
    6462:	06 c0       	rjmp	.+12     	; 0x6470 <vfprintf+0x29c>
    6464:	60 81       	ld	r22, Z
    6466:	71 81       	ldd	r23, Z+1	; 0x01
    6468:	80 e0       	ldi	r24, 0x00	; 0
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	0e 5f       	subi	r16, 0xFE	; 254
    646e:	1f 4f       	sbci	r17, 0xFF	; 255
    6470:	a3 01       	movw	r20, r6
    6472:	0e 94 1d 33 	call	0x663a	; 0x663a <__ultoa_invert>
    6476:	88 2e       	mov	r8, r24
    6478:	86 18       	sub	r8, r6
    647a:	fb 2d       	mov	r31, r11
    647c:	ff 77       	andi	r31, 0x7F	; 127
    647e:	3f 2e       	mov	r3, r31
    6480:	36 fe       	sbrs	r3, 6
    6482:	0d c0       	rjmp	.+26     	; 0x649e <vfprintf+0x2ca>
    6484:	23 2d       	mov	r18, r3
    6486:	2e 7f       	andi	r18, 0xFE	; 254
    6488:	a2 2e       	mov	r10, r18
    648a:	89 14       	cp	r8, r9
    648c:	58 f4       	brcc	.+22     	; 0x64a4 <vfprintf+0x2d0>
    648e:	34 fe       	sbrs	r3, 4
    6490:	0b c0       	rjmp	.+22     	; 0x64a8 <vfprintf+0x2d4>
    6492:	32 fc       	sbrc	r3, 2
    6494:	09 c0       	rjmp	.+18     	; 0x64a8 <vfprintf+0x2d4>
    6496:	83 2d       	mov	r24, r3
    6498:	8e 7e       	andi	r24, 0xEE	; 238
    649a:	a8 2e       	mov	r10, r24
    649c:	05 c0       	rjmp	.+10     	; 0x64a8 <vfprintf+0x2d4>
    649e:	b8 2c       	mov	r11, r8
    64a0:	a3 2c       	mov	r10, r3
    64a2:	03 c0       	rjmp	.+6      	; 0x64aa <vfprintf+0x2d6>
    64a4:	b8 2c       	mov	r11, r8
    64a6:	01 c0       	rjmp	.+2      	; 0x64aa <vfprintf+0x2d6>
    64a8:	b9 2c       	mov	r11, r9
    64aa:	a4 fe       	sbrs	r10, 4
    64ac:	0f c0       	rjmp	.+30     	; 0x64cc <vfprintf+0x2f8>
    64ae:	fe 01       	movw	r30, r28
    64b0:	e8 0d       	add	r30, r8
    64b2:	f1 1d       	adc	r31, r1
    64b4:	80 81       	ld	r24, Z
    64b6:	80 33       	cpi	r24, 0x30	; 48
    64b8:	21 f4       	brne	.+8      	; 0x64c2 <vfprintf+0x2ee>
    64ba:	9a 2d       	mov	r25, r10
    64bc:	99 7e       	andi	r25, 0xE9	; 233
    64be:	a9 2e       	mov	r10, r25
    64c0:	09 c0       	rjmp	.+18     	; 0x64d4 <vfprintf+0x300>
    64c2:	a2 fe       	sbrs	r10, 2
    64c4:	06 c0       	rjmp	.+12     	; 0x64d2 <vfprintf+0x2fe>
    64c6:	b3 94       	inc	r11
    64c8:	b3 94       	inc	r11
    64ca:	04 c0       	rjmp	.+8      	; 0x64d4 <vfprintf+0x300>
    64cc:	8a 2d       	mov	r24, r10
    64ce:	86 78       	andi	r24, 0x86	; 134
    64d0:	09 f0       	breq	.+2      	; 0x64d4 <vfprintf+0x300>
    64d2:	b3 94       	inc	r11
    64d4:	a3 fc       	sbrc	r10, 3
    64d6:	11 c0       	rjmp	.+34     	; 0x64fa <vfprintf+0x326>
    64d8:	a0 fe       	sbrs	r10, 0
    64da:	06 c0       	rjmp	.+12     	; 0x64e8 <vfprintf+0x314>
    64dc:	b2 14       	cp	r11, r2
    64de:	88 f4       	brcc	.+34     	; 0x6502 <vfprintf+0x32e>
    64e0:	28 0c       	add	r2, r8
    64e2:	92 2c       	mov	r9, r2
    64e4:	9b 18       	sub	r9, r11
    64e6:	0e c0       	rjmp	.+28     	; 0x6504 <vfprintf+0x330>
    64e8:	b2 14       	cp	r11, r2
    64ea:	60 f4       	brcc	.+24     	; 0x6504 <vfprintf+0x330>
    64ec:	b6 01       	movw	r22, r12
    64ee:	80 e2       	ldi	r24, 0x20	; 32
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    64f6:	b3 94       	inc	r11
    64f8:	f7 cf       	rjmp	.-18     	; 0x64e8 <vfprintf+0x314>
    64fa:	b2 14       	cp	r11, r2
    64fc:	18 f4       	brcc	.+6      	; 0x6504 <vfprintf+0x330>
    64fe:	2b 18       	sub	r2, r11
    6500:	02 c0       	rjmp	.+4      	; 0x6506 <vfprintf+0x332>
    6502:	98 2c       	mov	r9, r8
    6504:	21 2c       	mov	r2, r1
    6506:	a4 fe       	sbrs	r10, 4
    6508:	10 c0       	rjmp	.+32     	; 0x652a <vfprintf+0x356>
    650a:	b6 01       	movw	r22, r12
    650c:	80 e3       	ldi	r24, 0x30	; 48
    650e:	90 e0       	ldi	r25, 0x00	; 0
    6510:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    6514:	a2 fe       	sbrs	r10, 2
    6516:	17 c0       	rjmp	.+46     	; 0x6546 <vfprintf+0x372>
    6518:	a1 fc       	sbrc	r10, 1
    651a:	03 c0       	rjmp	.+6      	; 0x6522 <vfprintf+0x34e>
    651c:	88 e7       	ldi	r24, 0x78	; 120
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	02 c0       	rjmp	.+4      	; 0x6526 <vfprintf+0x352>
    6522:	88 e5       	ldi	r24, 0x58	; 88
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	b6 01       	movw	r22, r12
    6528:	0c c0       	rjmp	.+24     	; 0x6542 <vfprintf+0x36e>
    652a:	8a 2d       	mov	r24, r10
    652c:	86 78       	andi	r24, 0x86	; 134
    652e:	59 f0       	breq	.+22     	; 0x6546 <vfprintf+0x372>
    6530:	a1 fe       	sbrs	r10, 1
    6532:	02 c0       	rjmp	.+4      	; 0x6538 <vfprintf+0x364>
    6534:	8b e2       	ldi	r24, 0x2B	; 43
    6536:	01 c0       	rjmp	.+2      	; 0x653a <vfprintf+0x366>
    6538:	80 e2       	ldi	r24, 0x20	; 32
    653a:	a7 fc       	sbrc	r10, 7
    653c:	8d e2       	ldi	r24, 0x2D	; 45
    653e:	b6 01       	movw	r22, r12
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    6546:	89 14       	cp	r8, r9
    6548:	38 f4       	brcc	.+14     	; 0x6558 <vfprintf+0x384>
    654a:	b6 01       	movw	r22, r12
    654c:	80 e3       	ldi	r24, 0x30	; 48
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    6554:	9a 94       	dec	r9
    6556:	f7 cf       	rjmp	.-18     	; 0x6546 <vfprintf+0x372>
    6558:	8a 94       	dec	r8
    655a:	f3 01       	movw	r30, r6
    655c:	e8 0d       	add	r30, r8
    655e:	f1 1d       	adc	r31, r1
    6560:	80 81       	ld	r24, Z
    6562:	b6 01       	movw	r22, r12
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    656a:	81 10       	cpse	r8, r1
    656c:	f5 cf       	rjmp	.-22     	; 0x6558 <vfprintf+0x384>
    656e:	22 20       	and	r2, r2
    6570:	09 f4       	brne	.+2      	; 0x6574 <vfprintf+0x3a0>
    6572:	42 ce       	rjmp	.-892    	; 0x61f8 <vfprintf+0x24>
    6574:	b6 01       	movw	r22, r12
    6576:	80 e2       	ldi	r24, 0x20	; 32
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <fputc>
    657e:	2a 94       	dec	r2
    6580:	f6 cf       	rjmp	.-20     	; 0x656e <vfprintf+0x39a>
    6582:	f6 01       	movw	r30, r12
    6584:	86 81       	ldd	r24, Z+6	; 0x06
    6586:	97 81       	ldd	r25, Z+7	; 0x07
    6588:	02 c0       	rjmp	.+4      	; 0x658e <vfprintf+0x3ba>
    658a:	8f ef       	ldi	r24, 0xFF	; 255
    658c:	9f ef       	ldi	r25, 0xFF	; 255
    658e:	2b 96       	adiw	r28, 0x0b	; 11
    6590:	e2 e1       	ldi	r30, 0x12	; 18
    6592:	0c 94 3a 30 	jmp	0x6074	; 0x6074 <__epilogue_restores__>

00006596 <strnlen_P>:
    6596:	fc 01       	movw	r30, r24
    6598:	05 90       	lpm	r0, Z+
    659a:	61 50       	subi	r22, 0x01	; 1
    659c:	70 40       	sbci	r23, 0x00	; 0
    659e:	01 10       	cpse	r0, r1
    65a0:	d8 f7       	brcc	.-10     	; 0x6598 <strnlen_P+0x2>
    65a2:	80 95       	com	r24
    65a4:	90 95       	com	r25
    65a6:	8e 0f       	add	r24, r30
    65a8:	9f 1f       	adc	r25, r31
    65aa:	08 95       	ret

000065ac <strnlen>:
    65ac:	fc 01       	movw	r30, r24
    65ae:	61 50       	subi	r22, 0x01	; 1
    65b0:	70 40       	sbci	r23, 0x00	; 0
    65b2:	01 90       	ld	r0, Z+
    65b4:	01 10       	cpse	r0, r1
    65b6:	d8 f7       	brcc	.-10     	; 0x65ae <strnlen+0x2>
    65b8:	80 95       	com	r24
    65ba:	90 95       	com	r25
    65bc:	8e 0f       	add	r24, r30
    65be:	9f 1f       	adc	r25, r31
    65c0:	08 95       	ret

000065c2 <fputc>:
    65c2:	0f 93       	push	r16
    65c4:	1f 93       	push	r17
    65c6:	cf 93       	push	r28
    65c8:	df 93       	push	r29
    65ca:	fb 01       	movw	r30, r22
    65cc:	23 81       	ldd	r18, Z+3	; 0x03
    65ce:	21 fd       	sbrc	r18, 1
    65d0:	03 c0       	rjmp	.+6      	; 0x65d8 <fputc+0x16>
    65d2:	8f ef       	ldi	r24, 0xFF	; 255
    65d4:	9f ef       	ldi	r25, 0xFF	; 255
    65d6:	2c c0       	rjmp	.+88     	; 0x6630 <fputc+0x6e>
    65d8:	22 ff       	sbrs	r18, 2
    65da:	16 c0       	rjmp	.+44     	; 0x6608 <fputc+0x46>
    65dc:	46 81       	ldd	r20, Z+6	; 0x06
    65de:	57 81       	ldd	r21, Z+7	; 0x07
    65e0:	24 81       	ldd	r18, Z+4	; 0x04
    65e2:	35 81       	ldd	r19, Z+5	; 0x05
    65e4:	42 17       	cp	r20, r18
    65e6:	53 07       	cpc	r21, r19
    65e8:	44 f4       	brge	.+16     	; 0x65fa <fputc+0x38>
    65ea:	a0 81       	ld	r26, Z
    65ec:	b1 81       	ldd	r27, Z+1	; 0x01
    65ee:	9d 01       	movw	r18, r26
    65f0:	2f 5f       	subi	r18, 0xFF	; 255
    65f2:	3f 4f       	sbci	r19, 0xFF	; 255
    65f4:	31 83       	std	Z+1, r19	; 0x01
    65f6:	20 83       	st	Z, r18
    65f8:	8c 93       	st	X, r24
    65fa:	26 81       	ldd	r18, Z+6	; 0x06
    65fc:	37 81       	ldd	r19, Z+7	; 0x07
    65fe:	2f 5f       	subi	r18, 0xFF	; 255
    6600:	3f 4f       	sbci	r19, 0xFF	; 255
    6602:	37 83       	std	Z+7, r19	; 0x07
    6604:	26 83       	std	Z+6, r18	; 0x06
    6606:	14 c0       	rjmp	.+40     	; 0x6630 <fputc+0x6e>
    6608:	8b 01       	movw	r16, r22
    660a:	ec 01       	movw	r28, r24
    660c:	fb 01       	movw	r30, r22
    660e:	00 84       	ldd	r0, Z+8	; 0x08
    6610:	f1 85       	ldd	r31, Z+9	; 0x09
    6612:	e0 2d       	mov	r30, r0
    6614:	09 95       	icall
    6616:	89 2b       	or	r24, r25
    6618:	e1 f6       	brne	.-72     	; 0x65d2 <fputc+0x10>
    661a:	d8 01       	movw	r26, r16
    661c:	16 96       	adiw	r26, 0x06	; 6
    661e:	8d 91       	ld	r24, X+
    6620:	9c 91       	ld	r25, X
    6622:	17 97       	sbiw	r26, 0x07	; 7
    6624:	01 96       	adiw	r24, 0x01	; 1
    6626:	17 96       	adiw	r26, 0x07	; 7
    6628:	9c 93       	st	X, r25
    662a:	8e 93       	st	-X, r24
    662c:	16 97       	sbiw	r26, 0x06	; 6
    662e:	ce 01       	movw	r24, r28
    6630:	df 91       	pop	r29
    6632:	cf 91       	pop	r28
    6634:	1f 91       	pop	r17
    6636:	0f 91       	pop	r16
    6638:	08 95       	ret

0000663a <__ultoa_invert>:
    663a:	fa 01       	movw	r30, r20
    663c:	aa 27       	eor	r26, r26
    663e:	28 30       	cpi	r18, 0x08	; 8
    6640:	51 f1       	breq	.+84     	; 0x6696 <__ultoa_invert+0x5c>
    6642:	20 31       	cpi	r18, 0x10	; 16
    6644:	81 f1       	breq	.+96     	; 0x66a6 <__ultoa_invert+0x6c>
    6646:	e8 94       	clt
    6648:	6f 93       	push	r22
    664a:	6e 7f       	andi	r22, 0xFE	; 254
    664c:	6e 5f       	subi	r22, 0xFE	; 254
    664e:	7f 4f       	sbci	r23, 0xFF	; 255
    6650:	8f 4f       	sbci	r24, 0xFF	; 255
    6652:	9f 4f       	sbci	r25, 0xFF	; 255
    6654:	af 4f       	sbci	r26, 0xFF	; 255
    6656:	b1 e0       	ldi	r27, 0x01	; 1
    6658:	3e d0       	rcall	.+124    	; 0x66d6 <__ultoa_invert+0x9c>
    665a:	b4 e0       	ldi	r27, 0x04	; 4
    665c:	3c d0       	rcall	.+120    	; 0x66d6 <__ultoa_invert+0x9c>
    665e:	67 0f       	add	r22, r23
    6660:	78 1f       	adc	r23, r24
    6662:	89 1f       	adc	r24, r25
    6664:	9a 1f       	adc	r25, r26
    6666:	a1 1d       	adc	r26, r1
    6668:	68 0f       	add	r22, r24
    666a:	79 1f       	adc	r23, r25
    666c:	8a 1f       	adc	r24, r26
    666e:	91 1d       	adc	r25, r1
    6670:	a1 1d       	adc	r26, r1
    6672:	6a 0f       	add	r22, r26
    6674:	71 1d       	adc	r23, r1
    6676:	81 1d       	adc	r24, r1
    6678:	91 1d       	adc	r25, r1
    667a:	a1 1d       	adc	r26, r1
    667c:	20 d0       	rcall	.+64     	; 0x66be <__ultoa_invert+0x84>
    667e:	09 f4       	brne	.+2      	; 0x6682 <__ultoa_invert+0x48>
    6680:	68 94       	set
    6682:	3f 91       	pop	r19
    6684:	2a e0       	ldi	r18, 0x0A	; 10
    6686:	26 9f       	mul	r18, r22
    6688:	11 24       	eor	r1, r1
    668a:	30 19       	sub	r19, r0
    668c:	30 5d       	subi	r19, 0xD0	; 208
    668e:	31 93       	st	Z+, r19
    6690:	de f6       	brtc	.-74     	; 0x6648 <__ultoa_invert+0xe>
    6692:	cf 01       	movw	r24, r30
    6694:	08 95       	ret
    6696:	46 2f       	mov	r20, r22
    6698:	47 70       	andi	r20, 0x07	; 7
    669a:	40 5d       	subi	r20, 0xD0	; 208
    669c:	41 93       	st	Z+, r20
    669e:	b3 e0       	ldi	r27, 0x03	; 3
    66a0:	0f d0       	rcall	.+30     	; 0x66c0 <__ultoa_invert+0x86>
    66a2:	c9 f7       	brne	.-14     	; 0x6696 <__ultoa_invert+0x5c>
    66a4:	f6 cf       	rjmp	.-20     	; 0x6692 <__ultoa_invert+0x58>
    66a6:	46 2f       	mov	r20, r22
    66a8:	4f 70       	andi	r20, 0x0F	; 15
    66aa:	40 5d       	subi	r20, 0xD0	; 208
    66ac:	4a 33       	cpi	r20, 0x3A	; 58
    66ae:	18 f0       	brcs	.+6      	; 0x66b6 <__ultoa_invert+0x7c>
    66b0:	49 5d       	subi	r20, 0xD9	; 217
    66b2:	31 fd       	sbrc	r19, 1
    66b4:	40 52       	subi	r20, 0x20	; 32
    66b6:	41 93       	st	Z+, r20
    66b8:	02 d0       	rcall	.+4      	; 0x66be <__ultoa_invert+0x84>
    66ba:	a9 f7       	brne	.-22     	; 0x66a6 <__ultoa_invert+0x6c>
    66bc:	ea cf       	rjmp	.-44     	; 0x6692 <__ultoa_invert+0x58>
    66be:	b4 e0       	ldi	r27, 0x04	; 4
    66c0:	a6 95       	lsr	r26
    66c2:	97 95       	ror	r25
    66c4:	87 95       	ror	r24
    66c6:	77 95       	ror	r23
    66c8:	67 95       	ror	r22
    66ca:	ba 95       	dec	r27
    66cc:	c9 f7       	brne	.-14     	; 0x66c0 <__ultoa_invert+0x86>
    66ce:	00 97       	sbiw	r24, 0x00	; 0
    66d0:	61 05       	cpc	r22, r1
    66d2:	71 05       	cpc	r23, r1
    66d4:	08 95       	ret
    66d6:	9b 01       	movw	r18, r22
    66d8:	ac 01       	movw	r20, r24
    66da:	0a 2e       	mov	r0, r26
    66dc:	06 94       	lsr	r0
    66de:	57 95       	ror	r21
    66e0:	47 95       	ror	r20
    66e2:	37 95       	ror	r19
    66e4:	27 95       	ror	r18
    66e6:	ba 95       	dec	r27
    66e8:	c9 f7       	brne	.-14     	; 0x66dc <__ultoa_invert+0xa2>
    66ea:	62 0f       	add	r22, r18
    66ec:	73 1f       	adc	r23, r19
    66ee:	84 1f       	adc	r24, r20
    66f0:	95 1f       	adc	r25, r21
    66f2:	a0 1d       	adc	r26, r0
    66f4:	08 95       	ret

000066f6 <_exit>:
    66f6:	f8 94       	cli

000066f8 <__stop_program>:
    66f8:	ff cf       	rjmp	.-2      	; 0x66f8 <__stop_program>
